import os
from datetime import datetime
from typing import List, Tuple
from GoogleParser import GoogleSheetsDataLoader
from models import Teacher, Student
from HelperMethods import School
from ScheduleGenerator import ScheduleGenerator


def main():
    print("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    target_date = input().strip()

    try:
        datetime.strptime(target_date, "%d.%m.%Y")
    except ValueError:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")
        input()
        return

    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        credentials_path = os.path.join(current_dir, "credentials.json")

        if not os.path.exists(credentials_path):
            print(f"–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö 'credentials.json' –≤ –ø–∞–ø–∫—É:\n{current_dir}")
            input()
            return

        spreadsheet_id = "1r1MU8k8umwHx_E4Z-jFHRJ-kdwC43Jw0nwpVeH7T1GU"
        loader = GoogleSheetsDataLoader(credentials_path, spreadsheet_id, target_date)

        teachers, students = loader.load_data()
        print(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:\n- –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(teachers)}\n- –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}")

        if not teachers or not students:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!")
            return

        # –ü–†–û–í–ï–†–ö–ê –ò –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–¢–£–î–ï–ù–¢–û–í
        print("\n" + "=" * 60)
        print("–ü–†–û–í–ï–†–ö–ê –ò –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–¢–£–î–ï–ù–¢–û–í")
        print("=" * 60)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        can_allocate = School.check_teacher_student_allocation(teachers, students)

        if not can_allocate:
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º!")
            print("–ü—Ä–∏—á–∏–Ω—ã –º–æ–≥—É—Ç –±—ã—Ç—å:")
            print("- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—â–µ–π –µ–º–∫–æ—Å—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            print("- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
            print("- –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")
        else:
            print("‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            success, allocation = School.generate_teacher_student_allocation(teachers, students)

            if success:
                print("‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")

                # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
                School.print_detailed_allocation_report(allocation)

                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
                working_teachers = School.get_working_teachers(teachers, students)
                print(f"\nüéØ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(working_teachers)}")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
                print("\n" + "=" * 60)
                print("–ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ê–°–ü–ò–°–ê–ù–ò–Ø –î–õ–Ø –†–ê–ë–û–¢–ê–Æ–©–ò–• –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ô")
                print("=" * 60)

                schedule_matrix = ScheduleGenerator.generate_teacher_schedule_matrix(students, working_teachers)

                # –í—ã–≤–æ–¥–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
                ScheduleGenerator.print_schedule_matrix(schedule_matrix, working_teachers)

                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Google Sheets
                print("\n–≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets...")
                loader.export_schedule_to_google_sheets(schedule_matrix, [])
                print("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ!")

            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!")
                print("–í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–ª–∏ –±–æ–ª—å—à–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º
        print("\n" + "=" * 60)
        print("–ü–†–û–í–ï–†–ö–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–û –í–†–ï–ú–ï–ù–ù–´–ú –°–õ–û–¢–ê–ú")
        print("=" * 60)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –¥–Ω—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 –º–∏–Ω—É—Ç
        start_time = datetime.strptime("09:00", "%H:%M").time()
        end_time = datetime.strptime("20:00", "%H:%M").time()

        time_slots = School.check_allocation_for_time_slots(
            students, teachers, start_time, end_time, 30
        )

        School.print_allocation_report(time_slots)

    except Exception as ex:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex}")
        import traceback
        traceback.print_exc()
    finally:
        print("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        input()


def analyze_data(teachers: List[Teacher], students: List[Student]):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    print("\n" + "=" * 60)
    print("–ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
    print("=" * 60)

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_attention_needed = sum(s.need_for_attention for s in students)
    total_teacher_capacity = sum(t.maximum_attention for t in teachers)

    print(f"–û–±—â–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {total_attention_needed}")
    print(f"–û–±—â–∞—è –µ–º–∫–æ—Å—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {total_teacher_capacity}")
    print(f"–ë–∞–ª–∞–Ω—Å: {'‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ' if total_attention_needed <= total_teacher_capacity else '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'}")

    # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
    student_subjects = set(s.subject_id for s in students)
    teacher_subjects = set()
    for teacher in teachers:
        teacher_subjects.update(teacher.subjects_id)

    missing_subjects = student_subjects - teacher_subjects
    if missing_subjects:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {missing_subjects}")
    else:
        print("‚úÖ –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫—Ä—ã—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏")

    # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    print(
        f"\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Å {min(t.start_of_studying_time for t in teachers)} –¥–æ {max(t.end_of_studying_time for t in teachers)}")
    print(
        f"–°—Ç—É–¥–µ–Ω—Ç—ã –∑–∞–Ω–∏–º–∞—é—Ç—Å—è —Å {min(s.start_of_studying_time for s in students)} –¥–æ {max(s.end_of_studying_time for s in students)}")


if __name__ == "__main__":
    main()