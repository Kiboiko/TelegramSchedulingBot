# ParseTest.py
import os
import sys
from datetime import datetime
from GoogleParser import GoogleSheetsDataLoader
from models import Teacher, Student


def test_google_parser():
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GOOGLE PARSER ===\n")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è credentials —Ñ–∞–π–ª–∞
    credentials_path = "credentials.json"
    if not os.path.exists(credentials_path):
        print("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
        return False

    # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞
    spreadsheet_id = "1r1MU8k8umwHx_E4Z-jFHRJ-kdwC43Jw0nwpVeH7T1GU"  # –¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
    target_date = "01.09.2025"  # –î–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    print(f"ID —Ç–∞–±–ª–∏—Ü—ã: {spreadsheet_id}")
    print(f"–¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: {target_date}")
    print(f"–ü—É—Ç—å –∫ credentials: {credentials_path}")
    print()

    try:
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GoogleSheetsDataLoader...")
        loader = GoogleSheetsDataLoader(credentials_path, spreadsheet_id, target_date)
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # 4. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\nüîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...")
        teachers, students = loader.load_data()

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(teachers)}")
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}")

        # 5. –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if teachers:
            print("\n=== –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ò ===")
            for i, teacher in enumerate(teachers[:3]):  # –ü–µ—Ä–≤—ã–µ 3 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                print(f"{i + 1}. {teacher.name}")
                print(f"   –ü—Ä–µ–¥–º–µ—Ç—ã: {teacher.subjects_id}")
                print(f"   –í—Ä–µ–º—è: {teacher.start_of_studying_time} - {teacher.end_of_studying_time}")
                print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {teacher.priority}")
                print()

        if students:
            print("\n=== –°–¢–£–î–ï–ù–¢–´ ===")
            for i, student in enumerate(students[:3]):  # –ü–µ—Ä–≤—ã–µ 3 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                print(f"{i + 1}. {student.name}")
                print(f"   –ü—Ä–µ–¥–º–µ—Ç: {student.subject_id}")
                print(f"   –í—Ä–µ–º—è: {student.start_of_studying_time} - {student.end_of_studying_time}")
                print(f"   –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å: {student.need_for_attention}")
                print()

        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤...")
        valid_teachers = [t for t in teachers if t.start_of_studying_time != time(0, 0)]
        valid_students = [s for s in students if s.start_of_studying_time != time(0, 0)]

        print(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º: {len(valid_teachers)}/{len(teachers)}")
        print(f"–°—Ç—É–¥–µ–Ω—Ç—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º: {len(valid_students)}/{len(students)}")

        # 7. –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (—Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É)
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞...")
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É
            test_matrix = [
                ["Teachers/Time", "09:00-09:15", "09:15-09:30"],
                ["–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å 1", "1,2", "3"],
                ["–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å 2", "0", "1"],
                ["–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏", "1: –ü—Ä–µ–ø1, –ü—Ä–µ–ø2", "2: –¢–æ–ª—å–∫–æ –ü—Ä–µ–ø1"]
            ]

            # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            test_combinations = [[teachers[0]] if teachers else []]

            # –ü—Ä–æ–±—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
            loader.export_schedule_to_google_sheets(test_matrix, test_combinations)
            print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

        except Exception as export_error:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ): {export_error}")

        # 8. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n=== –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
        print(f"–í—Å–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(teachers)}")
        print(f"–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}")

        if teachers:
            subjects_count = sum(len(t.subjects_id) for t in teachers)
            avg_subjects = subjects_count / len(teachers)
            print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {avg_subjects:.1f}")

        if students:
            subject_ids = [s.subject_id for s in students]
            unique_subjects = set(subject_ids)
            print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(unique_subjects)}")

        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_models():
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ï–ô ===")

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Teacher
    teacher = Teacher(
        name="–ò–≤–∞–Ω–æ–≤ –ò.–ò.",
        start_of_study_time="09:00",
        end_of_study_time="18:00",
        subjects_id=[1, 2, 3],
        priority=1,
        maximum_attention=15
    )
    print(f"‚úÖ Teacher —Å–æ–∑–¥–∞–Ω: {teacher.name}")

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Student
    student = Student(
        name="–ü–µ—Ç—Ä–æ–≤ –ü.–ü.",
        start_of_study_time="10:00",
        end_of_study_time="12:00",
        subject_id=1,
        need_for_attention=3
    )
    print(f"‚úÖ Student —Å–æ–∑–¥–∞–Ω: {student.name}")

    print("‚úÖ –ú–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Google Parser...\n")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    test_models()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    success = test_google_parser()

    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)