# documents_merger.py
import logging
from datetime import datetime
import os
from typing import Dict, List
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from oauth2client.service_account import ServiceAccountCredentials

logger = logging.getLogger(__name__)


class DocumentsMerger:
    def __init__(self, gsheets_manager, credentials_file: str, spreadsheet_id: str):
        self.gsheets = gsheets_manager
        self.credentials_file = credentials_file
        self.spreadsheet_id = spreadsheet_id
        self.output_dir = "merged_documents"
        self.docs_service = None
        self._init_services()

        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)

    def _init_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Docs API"""
        try:
            scope = ['https://www.googleapis.com/auth/documents.readonly']
            creds = ServiceAccountCredentials.from_json_keyfile_name(
                self.credentials_file, scope)
            self.docs_service = build('docs', 'v1', credentials=creds)
            logger.info("Google Docs API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Docs API: {e}")

    def merge_qualification_documents(self, target_date: str) -> str:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–π –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")

            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
            main_doc = Document()

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = main_doc.add_heading('–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º', 0)
            title.alignment = WD_ALIGN_PARAGRAPH.CENTER

            main_doc.add_paragraph(f"–î–∞—Ç–∞: {target_date}")
            main_doc.add_paragraph(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
            main_doc.add_paragraph()
            main_doc.add_paragraph("=" * 80)
            main_doc.add_paragraph()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            document_links = self._get_all_document_links()

            if not document_links:
                main_doc.add_paragraph("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
                main_doc.add_paragraph("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫–∏ –≤ –ª–∏—Å—Ç–µ '–ü—Ä–µ–¥–º–µ—Ç—ã –±–æ—Ç'")
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                for i, (subject_name, doc_url) in enumerate(document_links.items(), 1):
                    success = self._add_document_content(main_doc, subject_name, doc_url, i)
                    if not success:
                        continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            filename = f"merged_materials_{target_date.replace('.', '_')}.docx"
            filepath = os.path.join(self.output_dir, filename)
            main_doc.save(filepath)

            abs_path = os.path.abspath(filepath)
            logger.info(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {abs_path}")

            return f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã!\nüìÅ {abs_path}\n\n–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(document_links)}"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"

    def _get_all_document_links(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–π"""
        try:
            document_links = {}

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "–ü—Ä–µ–¥–º–µ—Ç—ã –±–æ—Ç"
            worksheet = self.gsheets._get_or_create_worksheet("–ü—Ä–µ–¥–º–µ—Ç—ã –±–æ—Ç")
            data = worksheet.get_all_values()

            if len(data) < 2:
                logger.warning("–í –ª–∏—Å—Ç–µ '–ü—Ä–µ–¥–º–µ—Ç—ã –±–æ—Ç' –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                return document_links

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            for row in data[1:]:
                if len(row) >= 3:  # –ï—Å—Ç—å —Å—Å—ã–ª–∫–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ C
                    subject_name = row[1].strip() if len(row) > 1 else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                    doc_url = row[2].strip() if len(row) > 2 else ""

                    if doc_url and doc_url.startswith('http'):
                        document_links[subject_name] = doc_url
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject_name}': {doc_url}")

            logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(document_links)}")
            return document_links

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: {e}")
            return {}

    def _add_document_content(self, main_doc: Document, subject_name: str, doc_url: str, index: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ URL
            doc_id = self._extract_doc_id(doc_url)
            if not doc_id:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ URL: {doc_url}")
                return False

            logger.info(f"–ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {index}: {subject_name}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            content = self._get_document_content(doc_id)
            if not content:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è {subject_name}")
                return False

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            main_doc.add_heading(f'{index}. {subject_name}', level=1)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª
            link_para = main_doc.add_paragraph()
            link_para.add_run('üìé –û—Ä–∏–≥–∏–Ω–∞–ª: ').bold = True
            link_para.add_run(doc_url)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content_para = main_doc.add_paragraph()
            content_para.add_run(content)

            main_doc.add_paragraph()
            main_doc.add_paragraph("‚Äï" * 60)
            main_doc.add_paragraph()

            logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {subject_name}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {subject_name}: {e}")
            return False

    def _extract_doc_id(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ URL"""
        try:
            if '/d/' in url:
                return url.split('/d/')[1].split('/')[0]
            elif 'id=' in url:
                return url.split('id=')[1].split('&')[0]
            return ""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ {url}: {e}")
            return ""

    def _get_document_content(self, doc_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Google –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            document = self.docs_service.documents().get(documentId=doc_id).execute()
            content_parts = []

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
            for element in document.get('body', {}).get('content', []):
                if 'paragraph' in element:
                    paragraph = element['paragraph']
                    paragraph_text = self._extract_paragraph_text(paragraph)
                    if paragraph_text:
                        content_parts.append(paragraph_text)
                elif 'table' in element:
                    # –î–ª—è —Ç–∞–±–ª–∏—Ü –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
                    content_parts.append("[–¢–∞–±–ª–∏—Ü–∞]")

            full_content = '\n'.join(content_parts)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_id}: {len(full_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            return full_content

        except HttpError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É {doc_id}: {e}")
            return f"[–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É: {e}]"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ {doc_id}: {e}")
            return f"[–û—à–∏–±–∫–∞: {str(e)}]"

    def _extract_paragraph_text(self, paragraph: Dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"""
        try:
            text_parts = []
            for elem in paragraph.get('elements', []):
                if 'textRun' in elem:
                    text_content = elem['textRun'].get('content', '')
                    text_parts.append(text_content)

            text = ''.join(text_parts).strip()
            return text if text else ""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {e}")
            return ""