# config.py
import os
from datetime import datetime, timedelta, date, time
from typing import List, Dict
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
BOOKINGS_FILE = "bookings.json"
CREDENTIALS_PATH = r"C:\Users\bestd\OneDrive\–î–æ–∫—É–º–µ–Ω—Ç—ã\GitHub\TelegramSchedulingBot\credentials.json"
SPREADSHEET_ID = "1gFtQ7UJstu-Uv_BpgCUp24unsVT9oajSyWxU0j0GMpg"
# ADMIN_IDS = [1180878673, 973231400, 1312414595]
ADMIN_IDS = [1180878673, 973231400]
BOOKING_TYPES = ["–¢–∏–ø1"]

SUBJECTS = {
    "1": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    "2": "–§–∏–∑–∏–∫–∞",
    "3": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "4": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"
}

WORKING_HOURS = {
    "start": time(9, 0),
    "end": time(20, 0)
}
# config.py (–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
FEEDBACK_CONFIG = {
    "feedback_sheet_students": "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É—á–µ–Ω–∏–∫–∏",
    "feedback_sheet_teachers": "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏",
    "feedback_file_students": "feedback.json",
    "feedback_file_teachers": "feedback_teachers.json",
    "feedback_questions": {
        "good": "–•–æ—Ä–æ—à–æ",
        "could_be_better": "–ú–æ–≥–ª–æ –±—ã—Ç—å –ª—É—á—à–µ",
        "bad": "–£–∂–∞—Å–Ω–æ"
    },
    "admin_phone": "+79001372727",
    "good_feedback_delay": 7  # –ù–û–í–ê–Ø –ö–û–ù–°–¢–ê–ù–¢–ê - —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ "–•–æ—Ä–æ—à–æ"
}

# config.py (–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
FINANCE_CONFIG = {
    "start_date": "01.09.2025",  # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É—á–µ—Ç–∞
    "finance_columns_start": "JG",  # –ù–∞—á–∞–ª–æ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    "tariff_column": "N",  # –°—Ç–æ–ª–±–µ—Ü —Å —Ç–∞—Ä–∏—Ñ–æ–º
    "replenishment_offset": 0,  # –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–∞—Ç—ã)
    "withdrawal_offset": 1,  # –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (–≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü –¥–∞—Ç—ã)
}

REMINDER_CONFIG = {
    "reminder_day": 3,  # –ß–µ—Ç–≤–µ—Ä–≥ (0-–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    "reminder_hour": 18,  # 18:00
    "reminder_minute": 0,
    "reminder_message": "–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï! –ü—Ä–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"
}

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
FEEDBACK_CHECK_INTERVAL = 1800  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS


def _add_minutes_to_time(time_obj: time, minutes: int) -> time:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–∏–Ω—É—Ç—ã –∫ –æ–±—ä–µ–∫—Ç—É time"""
    from datetime import datetime, timedelta
    dummy_date = datetime(2023, 1, 1)
    combined_datetime = datetime.combine(dummy_date, time_obj)
    new_datetime = combined_datetime + timedelta(minutes=minutes)
    return new_datetime.time()


def _create_empty_time_slots(selected_date=None) -> Dict[time, Dict]:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    –ë—É–¥–Ω–∏ (–ø–Ω-–ø—Ç): 14:00-20:00 —Å —à–∞–≥–æ–º 15 –º–∏–Ω—É—Ç
    –í—ã—Ö–æ–¥–Ω—ã–µ (—Å–±-–≤—Å): 10:00-15:00 —Å —à–∞–≥–æ–º 15 –º–∏–Ω—É—Ç
    """
    from datetime import time
    
    time_slots = {}
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-–ø–Ω, 6-–≤—Å)
    if selected_date:
        weekday = selected_date.weekday()  # 0-–ø–Ω, 1-–≤—Ç, ..., 5-—Å–±, 6-–≤—Å
    else:
        weekday = datetime.now().weekday()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±—É–¥–Ω–∏—Ö –¥–Ω–µ–π (–ø–Ω-–ø—Ç)
    if weekday <= 4:  # 0-4 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞
        start_hour, start_minute = 14, 0
        end_hour, end_minute = 20, 0
    else:  # 5-6 = —Å—É–±–±–æ—Ç–∞-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        start_hour, start_minute = 10, 0
        end_hour, end_minute = 15, 0
    
    current_time = time(start_hour, start_minute)
    end_time = time(end_hour, end_minute)
    
    while current_time <= end_time:
        time_slots[current_time] = {
            'distribution': {},
            'condition_result': True
        }
        # –î–æ–±–∞–≤–ª—è–µ–º 15 –º–∏–Ω—É—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        total_minutes = current_time.hour * 60 + current_time.minute + 15
        next_hour = total_minutes // 60
        next_minute = total_minutes % 60
        current_time = time(next_hour, next_minute)
    
    return time_slots



def get_subject_short_name(subject_id: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 3 –±—É–∫–≤—ã)"""
    subject_names = {
        "1": "üìê –ú–∞—Ç",
        "2": "‚öõÔ∏è –§–∏–∑",
        "3": "üíª –ò–Ω—Ñ",
        "4": "üìñ –†—É—Å"
    }
    return subject_names.get(subject_id, subject_id[:3] if subject_id else "???")