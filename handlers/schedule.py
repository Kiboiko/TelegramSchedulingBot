from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from services.storage_service import storage
from keyboards import generate_calendar
from states import BookingStates

router = Router()


@router.message(F.text == "üìä –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def create_schedule(message: types.Message, state: FSMContext):
    if message.from_user.id not in [1180878673, 973231400, 1312414595]:
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=generate_calendar()
    )
    await state.set_state(BookingStates.SELECT_SCHEDULE_DATE)


@router.callback_query(BookingStates.SELECT_SCHEDULE_DATE, F.data.startswith("calendar_day_"))
async def select_schedule_date(callback: types.CallbackQuery, state: FSMContext):
    date_str = callback.data.replace("calendar_day_", "")
    await state.update_data(schedule_date=date_str)

    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    await callback.message.edit_text(
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {date_str} –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–¥–µ—Å—å"
    )
    await state.clear()