# materials_manager.py
import logging
from datetime import datetime
from typing import Dict, List, Optional
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from oauth2client.service_account import ServiceAccountCredentials
import os

logger = logging.getLogger(__name__)


class MaterialsManager:
    def __init__(self, gsheets_manager, credentials_file: str, spreadsheet_id: str):
        self.gsheets = gsheets_manager
        self.credentials_file = credentials_file
        self.spreadsheet_id = spreadsheet_id
        self.drive_service = None
        self.docs_service = None
        self._init_services()

    def _init_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Drive –∏ Docs API"""
        try:
            scope = [
                'https://www.googleapis.com/auth/drive',
                'https://www.googleapis.com/auth/documents',
                'https://www.googleapis.com/auth/drive.file'
            ]
            creds = ServiceAccountCredentials.from_json_keyfile_name(
                self.credentials_file, scope)

            self.drive_service = build('drive', 'v3', credentials=creds)
            self.docs_service = build('docs', 'v1', credentials=creds)
            logger.info("Google Drive –∏ Docs API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google API: {e}")

    def get_student_lesson_info(self, user_id: int, subject_id: str, target_date: str) -> Dict[str, any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏ —É—á–µ–Ω–∏–∫–∞"""
        try:
            from shedule_app.GoogleParser import GoogleSheetsDataLoader

            loader = GoogleSheetsDataLoader(self.credentials_file, self.spreadsheet_id, target_date)
            topic = loader.get_student_topic_by_user_id(str(user_id), target_date, str(subject_id))

            return {
                'lesson_number': 1,  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
                'topic': topic or "–¢–µ–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
                'subject_name': self._get_subject_name(subject_id)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏: {e}")
            return {
                'lesson_number': 1,
                'topic': "–¢–µ–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
                'subject_name': self._get_subject_name(subject_id)
            }

    def get_qualification_materials(self, subject_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"""
        try:
            if hasattr(self.gsheets, 'qual_links') and subject_id in self.gsheets.qual_links:
                doc_url = self.gsheets.qual_links[subject_id]
                return f"–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {doc_url}"
            return "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
            return None

    def create_combined_materials_document(self, target_date: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π Google –¥–æ–∫—É–º–µ–Ω—Ç —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Google –¥–æ–∫—É–º–µ–Ω—Ç
            doc_title = f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–Ω—è—Ç–∏–π –Ω–∞ {target_date}"

            document = self.docs_service.documents().create(body={
                'title': doc_title
            }).execute()

            doc_id = document['documentId']
            logger.info(f"–°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Å ID: {doc_id}")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            requests = self._prepare_document_requests(target_date)

            if requests:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
                self.docs_service.documents().batchUpdate(
                    documentId=doc_id,
                    body={'requests': requests}
                ).execute()

            # –î–µ–ª–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è —á—Ç–µ–Ω–∏—è
            self.drive_service.permissions().create(
                fileId=doc_id,
                body={'type': 'anyone', 'role': 'reader'},
                fields='id'
            ).execute()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            doc_url = f"https://docs.google.com/document/d/{doc_id}/edit"
            logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {doc_url}")

            return doc_url

        except HttpError as e:
            logger.error(f"Google API error: {e}")
            return f"–û—à–∏–±–∫–∞ Google API: {e}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return f"–û—à–∏–±–∫–∞: {str(e)}"

    def _prepare_document_requests(self, target_date: str) -> List[Dict]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        requests = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        requests.append({
            'insertText': {
                'location': {'index': 1},
                'text': f"üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–Ω—è—Ç–∏–π\n–î–∞—Ç–∞: {target_date}\n\n"
            }
        })

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        current_index = len(f"üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–Ω—è—Ç–∏–π\n–î–∞—Ç–∞: {target_date}\n\n") + 1

        test_content = (
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.\n\n"
            "üéì –£—á–µ–Ω–∏–∫: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n"
            "üìñ –ü—Ä–µ–¥–º–µ—Ç: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n"
            "üî¢ –ó–∞–Ω—è—Ç–∏–µ ‚Ññ1\n"
            "üìå –¢–µ–º–∞: –ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è\n"
            "üìù –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: https://example.com\n"
            "==================================================\n\n"
            "üéì –£—á–µ–Ω–∏–∫: –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞\n"
            "üìñ –ü—Ä–µ–¥–º–µ—Ç: –§–∏–∑–∏–∫–∞\n"
            "üî¢ –ó–∞–Ω—è—Ç–∏–µ ‚Ññ2\n"
            "üìå –¢–µ–º–∞: –ó–∞–∫–æ–Ω—ã –ù—å—é—Ç–æ–Ω–∞\n"
            "üìù –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: https://example.com\n"
            "==================================================\n\n"
            "–î–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
            f"–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )

        requests.append({
            'insertText': {
                'location': {'index': current_index},
                'text': test_content
            }
        })

        return requests

    def _get_subject_name(self, subject_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ ID"""
        from config import SUBJECTS
        return SUBJECTS.get(subject_id, f"–ü—Ä–µ–¥–º–µ—Ç {subject_id}")