# feedback_teachers.py
import json
import logging
from datetime import datetime, time, timedelta
from typing import List, Dict, Any
from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logger = logging.getLogger(__name__)


class FeedbackTeacherStates(StatesGroup):
    WAITING_FEEDBACK_REASON = State()
    WAITING_FEEDBACK_DETAILS = State()


class FeedbackTeacherManager:
    def __init__(self, storage, gsheets_manager, bot: Bot):
        self.storage = storage
        self.gsheets = gsheets_manager
        self.bot = bot
        self.feedback_file = "feedback_teachers.json"

    def load_feedback_data(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON"""
        try:
            with open(self.feedback_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return []

    def save_feedback_data(self, data: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ JSON"""
        try:
            with open(self.feedback_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è feedback_teachers: {e}")

    def get_todays_finished_lessons(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            today = datetime.now().date()
            today_str = today.strftime("%Y-%m-%d")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            bookings = self.storage.load()

            finished_lessons = []

            for booking in bookings:
                if (booking.get('user_role') == 'teacher' and
                        booking.get('date') == today_str):

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –ª–∏ –∑–∞–Ω—è—Ç–∏–µ
                    end_time_str = booking.get('end_time', '')
                    if end_time_str:
                        try:
                            end_time = datetime.strptime(end_time_str, "%H:%M").time()
                            current_time = datetime.now().time()

                            # –ï—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–µ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
                            if current_time > end_time:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
                                feedback_sent = self.check_feedback_sent(
                                    booking.get('user_id'),
                                    today_str
                                )

                                if not feedback_sent:
                                    finished_lessons.append(booking)

                        except ValueError:
                            continue

            return finished_lessons

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def check_feedback_sent(self, user_id: int, date: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é"""
        feedback_data = self.load_feedback_data()

        for feedback in feedback_data:
            if (feedback.get('user_id') == user_id and
                    feedback.get('date') == date):
                return True

        return False

    async def send_feedback_questions(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
        try:
            finished_lessons = self.get_todays_finished_lessons()

            for lesson in finished_lessons:
                user_id = lesson.get('user_id')
                date_str = lesson.get('date')
                start_time = lesson.get('start_time', '')
                end_time = lesson.get('end_time', '')
                subjects = lesson.get('subjects', [])

                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                from config import SUBJECTS
                subject_names = []
                for subject_id in subjects:
                    subject_name = SUBJECTS.get(subject_id, f"–ü—Ä–µ–¥–º–µ—Ç {subject_id}")
                    subject_names.append(subject_name)

                subjects_text = ", ".join(subject_names)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                lesson_date = datetime.strptime(date_str, "%Y-%m-%d")
                weekdays_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
                weekday = weekdays_ru[lesson_date.weekday()]
                formatted_date = lesson_date.strftime("%d.%m.%Y")

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="–•–æ—Ä–æ—à–æ üëç",
                            callback_data=f"feedback_teacher_good_{date_str}"
                        )
                    ],
                    [
                        types.InlineKeyboardButton(
                            text="–ú–æ–≥–ª–æ –±—ã—Ç—å –ª—É—á—à–µ ü§î",
                            callback_data=f"feedback_teacher_better_{date_str}"
                        )
                    ],
                    [
                        types.InlineKeyboardButton(
                            text="–£–∂–∞—Å–Ω–æ üëé",
                            callback_data=f"feedback_teacher_bad_{date_str}"
                        )
                    ]
                ])

                message_text = (
                    f"–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–æ—à–ª–∞ –≤–∞—à–∞ —Å–º–µ–Ω–∞?\n"
                    f"üìÖ {formatted_date} ({weekday})\n"
                    f"‚è∞ {start_time}-{end_time}\n"
                    f"üìö {subjects_text}"
                )

                try:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=message_text,
                        reply_markup=keyboard
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é {user_id}")

                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
                    self.mark_feedback_sent(user_id, date_str)

                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º: {e}")

    def mark_feedback_sent(self, user_id: int, date: str):
        """–ü–æ–º–µ—á–∞–µ—Ç, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é"""
        feedback_data = self.load_feedback_data()

        feedback_record = {
            'user_id': user_id,
            'date': date,
            'sent_at': datetime.now().isoformat(),
            'status': 'request_sent'
        }

        feedback_data.append(feedback_record)
        self.save_feedback_data(feedback_data)

    def save_feedback_response(self, user_id: int, date: str,
                               rating: str, details: str = ""):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
        feedback_data = self.load_feedback_data()

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –æ –æ—Ç–ø—Ä–∞–≤–∫–µ
        feedback_data = [f for f in feedback_data if not (
                f.get('user_id') == user_id and
                f.get('date') == date and
                f.get('status') == 'request_sent'
        )]

        feedback_record = {
            'user_id': user_id,
            'date': date,
            'rating': rating,
            'details': details,
            'responded_at': datetime.now().isoformat(),
            'status': 'completed'
        }

        feedback_data.append(feedback_record)
        self.save_feedback_data(feedback_data)

        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        self.sync_feedback_to_gsheets(feedback_record)

    def sync_feedback_to_gsheets(self, feedback_record: Dict[str, Any]):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å Google Sheets"""
        try:
            if not self.gsheets:
                logger.warning("Google Sheets manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return

            required_fields = ['user_id', 'date', 'rating']
            for field in required_fields:
                if field not in feedback_record:
                    logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ {field} –≤ feedback_record")
                    return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
            date_obj = datetime.strptime(feedback_record['date'], "%Y-%m-%d")
            formatted_date = date_obj.strftime("%d.%m.%Y")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞ "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"
            worksheet = self.gsheets._get_or_create_worksheet("–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
            data = worksheet.get_all_values()

            if not data:
                logger.warning("–õ–∏—Å—Ç '–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏' –ø—É—Å—Ç")
                return

            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [h.strip().lower() for h in data[0]]

            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è
            date_col_start = -1
            date_col_end = -1

            for i, header in enumerate(headers):
                if header.startswith(formatted_date.lower()):
                    if date_col_start == -1:
                        date_col_start = i
                    else:
                        date_col_end = i
                        break

            if date_col_start == -1:
                logger.error(f"–î–∞—Ç–∞ {formatted_date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
                return

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤—Ç–æ—Ä—É—é –∫–æ–ª–æ–Ω–∫—É, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è - –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            if date_col_end == -1:
                date_col_end = date_col_start + 1

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            user_name = self.storage.get_user_name(feedback_record['user_id'])
            if not user_name:
                user_name = f"Teacher_{feedback_record['user_id']}"

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ç–µ–∫—Å—Ç
            rating_text = {
                'good': '–•–æ—Ä–æ—à–æ',
                'better': '–ú–æ–≥–ª–æ –±—ã—Ç—å –ª—É—á—à–µ',
                'bad': '–£–∂–∞—Å–Ω–æ'
            }.get(feedback_record['rating'], feedback_record['rating'])

            details_text = feedback_record.get('details', '')

            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å user_id
            target_row = -1

            for row_idx, row in enumerate(data[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(row) > 0 and str(row[0]).strip() == str(feedback_record['user_id']):
                    target_row = row_idx
                    break

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            if target_row == -1:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                new_row = [
                    feedback_record['user_id'],
                    user_name,
                    # –ü—Ä–µ–¥–º–µ—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
                    ''
                ]

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫
                current_cols = len(new_row)
                total_cols = len(headers)
                if current_cols < total_cols:
                    new_row.extend([''] * (total_cols - current_cols))

                worksheet.append_row(new_row)

                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                data = worksheet.get_all_values()
                target_row = len(data)

                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è user_id {feedback_record['user_id']}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫–∏ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
            try:
                # –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–∞—Ç—ã - —Ä–µ–π—Ç–∏–Ω–≥
                worksheet.update_cell(target_row, date_col_start + 1, rating_text)

                # –í—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–∞—Ç—ã - –¥–µ—Ç–∞–ª–∏
                worksheet.update_cell(target_row, date_col_end + 1, details_text)

                logger.info(
                    f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {feedback_record['user_id']} –Ω–∞ –¥–∞—Ç—É {formatted_date}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—á–µ–µ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
                return

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ feedback –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å GSheets: {e}")

    def get_pending_feedback_for_gsheets(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Google Sheets"""
        feedback_data = self.load_feedback_data()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        pending_feedback = []
        for feedback in feedback_data:
            if (feedback.get('status') == 'completed' and
                    not feedback.get('synced_to_gsheets', False)):
                pending_feedback.append(feedback)

        return pending_feedback

    def mark_feedback_synced(self, user_id: int, date: str):
        """–ü–æ–º–µ—á–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å Google Sheets"""
        feedback_data = self.load_feedback_data()

        for feedback in feedback_data:
            if (feedback.get('user_id') == user_id and
                    feedback.get('date') == date and
                    feedback.get('status') == 'completed'):
                feedback['synced_to_gsheets'] = True
                feedback['synced_at'] = datetime.now().isoformat()
                break

        self.save_feedback_data(feedback_data)