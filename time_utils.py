# time_utils.py
from datetime import datetime, time, timedelta
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict

def generate_time_range_keyboard_with_availability(
    selected_date=None,
    start_time=None,
    end_time=None,
    availability_map: Dict[time, bool] = None
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    builder = InlineKeyboardBuilder()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    if selected_date:
        weekday = selected_date.weekday()
        if weekday <= 4:  # –±—É–¥–Ω–∏
            start = datetime.strptime("14:00", "%H:%M")
            end = datetime.strptime("20:00", "%H:%M")
        else:  # –≤—ã—Ö–æ–¥–Ω—ã–µ
            start = datetime.strptime("9:00", "%H:%M")
            end = datetime.strptime("15:00", "%H:%M")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—É–¥–Ω–∏–π –¥–µ–Ω—å
        start = datetime.strptime("14:00", "%H:%M")
        end = datetime.strptime("20:00", "%H:%M")

    current = start

    while current <= end:
        time_str = current.strftime("%H:%M")
        time_obj = current.time()

        # –ï—Å–ª–∏ availability_map = None (–¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π), –≤—Å–µ —Å–ª–æ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        is_available = True
        if availability_map is not None:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            is_available = availability_map.get(time_obj, True)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if start_time and time_str == start_time:
            button_text = "üü¢ " + time_str
        elif end_time and time_str == end_time:
            button_text = "üî¥ " + time_str
        elif (start_time and end_time and
              datetime.strptime(start_time, "%H:%M").time() < time_obj <
              datetime.strptime(end_time, "%H:%M").time()):
            button_text = "üîµ " + time_str
        else:
            button_text = time_str

        # –î–ª—è —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        if availability_map is not None and not is_available:
            button_text = "üîí " + time_str
            callback_data = "time_slot_unavailable"
        else:
            callback_data = f"time_point_{time_str}"

        builder.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=callback_data
        ))
        current += timedelta(minutes=15)  # –®–∞–≥ 15 –º–∏–Ω—É—Ç

    builder.adjust(4)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
    control_buttons = []
    if availability_map is not None:  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
        available_count = sum(1 for available in availability_map.values() if available)
        total_count = len(availability_map)
        control_buttons.append(types.InlineKeyboardButton(
            text=f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_count}/{total_count}",
            callback_data="availability_info"
        ))

    if control_buttons:
        builder.row(*control_buttons)

    if start_time and end_time:
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if availability_map is None:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä–µ–º—è",
                    callback_data="confirm_time_range"
                )
            )
        else:
            # –î–ª—è —É—á–µ–Ω–∏–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            is_interval_available = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
            start_obj = datetime.strptime(start_time, "%H:%M").time()
            end_obj = datetime.strptime(end_time, "%H:%M").time()
            
            current_check = start_obj
            while current_check < end_obj:
                if current_check not in availability_map or not availability_map[current_check]:
                    is_interval_available = False
                    break
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É 15-–º–∏–Ω—É—Ç–Ω–æ–º—É —Å–ª–æ—Ç—É
                total_minutes = current_check.hour * 60 + current_check.minute + 15
                next_hour = total_minutes // 60
                next_minute = total_minutes % 60
                current_check = time(next_hour, next_minute)
            
            if is_interval_available:
                builder.row(
                    types.InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä–µ–º—è",
                        callback_data="confirm_time_range"
                    )
                )
            else:
                builder.row(
                    types.InlineKeyboardButton(
                        text="‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã",
                        callback_data="interval_contains_unavailable"
                    )
                )

    builder.row(
        types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="cancel_time_selection"
        )
    )

    return builder.as_markup()

def calculate_lesson_duration(student_class: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞"""
    if student_class <= 6:
        return 60  # 1 —á–∞—Å –¥–ª—è 6 –∫–ª–∞—Å—Å–∞ –∏ –º–ª–∞–¥—à–µ
    elif student_class <= 8:
        return 90  # 1.5 —á–∞—Å–∞ –¥–ª—è 7-8 –∫–ª–∞—Å—Å–æ–≤
    else:
        return 120  # 2 —á–∞—Å–∞ –¥–ª—è 9 –∫–ª–∞—Å—Å–∞ –∏ —Å—Ç–∞—Ä—à–µ

# def get_student_class(user_id: int) -> int:
#     """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞—Å—Å —É—á–µ–Ω–∏–∫–∞ –∏–∑ Google Sheets"""
#     try:
#         if not gsheets:
#             return 9  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞—Ä—à–∏–µ –∫–ª–∞—Å—Å—ã
        
#         worksheet = gsheets._get_or_create_worksheet("–£—á–µ–Ω–∏–∫–∏ –±–æ—Ç")
#         data = worksheet.get_all_values()
        
#         # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
#         for row in data[1:]:
#             if row and len(row) > 0 and str(row[0]).strip() == str(user_id):
#                 # –ö–ª–∞—Å—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ K (–∏–Ω–¥–µ–∫—Å 10)
#                 if len(row) > 10 and row[10].strip():
#                     try:
#                         class_num = int(row[10].strip())
#                         return class_num
#                     except ValueError:
#                         pass
#         return 9  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞—Ä—à–∏–µ –∫–ª–∞—Å—Å—ã
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ —É—á–µ–Ω–∏–∫–∞ {user_id}: {e}")
#         return 9