# time_utils.py
from datetime import datetime, time, timedelta
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict, Optional
import logging

logger = logging.getLogger(__name__)

def generate_time_range_keyboard_with_availability(
    selected_date=None,
    start_time=None,
    end_time=None,
    availability_map: Dict[time, bool] = None,
    suggested_start_time: str = None,
    suggested_end_time: str = None
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏, –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    builder = InlineKeyboardBuilder()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    start_time_range, end_time_range = _get_working_hours(selected_date)
    
    start = datetime.combine(selected_date, start_time_range) if selected_date else datetime.strptime("14:00", "%H:%M")
    end = datetime.combine(selected_date, end_time_range) if selected_date else datetime.strptime("20:00", "%H:%M")

    current = start

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if suggested_start_time and suggested_end_time and not start_time and not end_time:
        start_time = suggested_start_time
        end_time = suggested_end_time

    while current <= end:
        time_str = current.strftime("%H:%M")
        time_obj = current.time()

        # –ï—Å–ª–∏ availability_map = None (–¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π), –≤—Å–µ —Å–ª–æ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        is_available = True
        if availability_map is not None:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            is_available = availability_map.get(time_obj, True)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        is_suggested = (suggested_start_time and time_str == suggested_start_time) or \
                      (suggested_end_time and time_str == suggested_end_time)
        
        if start_time and time_str == start_time:
            button_text = "üü¢ " + time_str
        elif end_time and time_str == end_time:
            button_text = "üî¥ " + time_str
        elif (start_time and end_time and
              datetime.strptime(start_time, "%H:%M").time() < time_obj <
              datetime.strptime(end_time, "%H:%M").time()):
            button_text = "üîµ " + time_str
        elif is_suggested and not start_time and not end_time:
            button_text = "‚≠ê " + time_str  # –ó–≤–µ–∑–¥–æ—á–∫–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        else:
            button_text = time_str

        # –î–ª—è —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        if availability_map is not None and not is_available:
            button_text = "üîí " + time_str
            callback_data = "time_slot_unavailable"
        else:
            callback_data = f"time_point_{time_str}"

        builder.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=callback_data
        ))
        current += timedelta(minutes=15)  # –®–∞–≥ 15 –º–∏–Ω—É—Ç

    builder.adjust(4)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    info_buttons = []
    if suggested_start_time and suggested_end_time and not start_time and not end_time:
        info_buttons.append(types.InlineKeyboardButton(
            text=f"‚≠ê –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ: {suggested_start_time}-{suggested_end_time}",
            callback_data="suggested_time_info"
        ))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
    if availability_map is not None:  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
        available_count = sum(1 for available in availability_map.values() if available)
        total_count = len(availability_map)
        info_buttons.append(types.InlineKeyboardButton(
            text=f"üìä –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}/{total_count}",
            callback_data="availability_info"
        ))

    if info_buttons:
        builder.row(*info_buttons)

    if start_time and end_time:
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if availability_map is None:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä–µ–º—è",
                    callback_data="confirm_time_range"
                )
            )
        else:
            # –î–ª—è —É—á–µ–Ω–∏–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            is_interval_available = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
            start_obj = datetime.strptime(start_time, "%H:%M").time()
            end_obj = datetime.strptime(end_time, "%H:%M").time()
            
            current_check = start_obj
            while current_check < end_obj:
                if current_check not in availability_map or not availability_map[current_check]:
                    is_interval_available = False
                    break
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É 15-–º–∏–Ω—É—Ç–Ω–æ–º—É —Å–ª–æ—Ç—É
                total_minutes = current_check.hour * 60 + current_check.minute + 15
                next_hour = total_minutes // 60
                next_minute = total_minutes % 60
                current_check = time(next_hour, next_minute)
            
            if is_interval_available:
                builder.row(
                    types.InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä–µ–º—è",
                        callback_data="confirm_time_range"
                    )
                )
            else:
                builder.row(
                    types.InlineKeyboardButton(
                        text="‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã",
                        callback_data="interval_contains_unavailable"
                    )
                )

    # –ö–Ω–æ–ø–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if suggested_start_time and suggested_end_time and not start_time and not end_time:
        builder.row(
            types.InlineKeyboardButton(
                text="‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è",
                callback_data=f"use_suggested_time_{suggested_start_time}_{suggested_end_time}"
            )
        )

    builder.row(
        types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="cancel_time_selection"
        )
    )

    return builder.as_markup()

def _get_working_hours(selected_date):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    if selected_date:
        weekday = selected_date.weekday()
        if weekday <= 4:  # –±—É–¥–Ω–∏
            start_time = time(14, 0)  # 14:00
            end_time = time(20, 0)   # 20:00
        else:  # –≤—ã—Ö–æ–¥–Ω—ã–µ
            start_time = time(9, 0)  # 9:00
            end_time = time(15, 0)   # 15:00
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—É–¥–Ω–∏–π –¥–µ–Ω—å
        start_time = time(14, 0)
        end_time = time(20, 0)
    
    return start_time, end_time

def calculate_lesson_duration(student_class: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞"""
    if student_class <= 6:
        return 60  # 1 —á–∞—Å –¥–ª—è 6 –∫–ª–∞—Å—Å–∞ –∏ –º–ª–∞–¥—à–µ
    elif student_class <= 8:
        return 90  # 1.5 —á–∞—Å–∞ –¥–ª—è 7-8 –∫–ª–∞—Å—Å–æ–≤
    else:
        return 120  # 2 —á–∞—Å–∞ –¥–ª—è 9 –∫–ª–∞—Å—Å–∞ –∏ —Å—Ç–∞—Ä—à–µ

def get_time_range_for_date(selected_date):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏ —à–∞–≥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    start_time, end_time = _get_working_hours(selected_date)
    time_step = 15  # 15 –º–∏–Ω—É—Ç
    
    return start_time, end_time, time_step

def adjust_time_to_working_hours(time_str: str, selected_date, is_start: bool = True) -> str:
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏"""
    try:
        time_obj = datetime.strptime(time_str, "%H:%M").time()
        start_time_range, end_time_range = _get_working_hours(selected_date)
        
        if is_start:
            # –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞: –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è - —Å—Ç–∞–≤–∏–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
            if time_obj < start_time_range:
                return start_time_range.strftime("%H:%M")
            # –ï—Å–ª–∏ –ø–æ–∑–∂–µ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è - —Å—Ç–∞–≤–∏–º –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
            elif time_obj > end_time_range:
                return end_time_range.strftime("%H:%M")
            else:
                return time_str
        else:
            # –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è: –æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
            if time_obj > end_time_range:
                return end_time_range.strftime("%H:%M")
            else:
                return time_str
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return time_str