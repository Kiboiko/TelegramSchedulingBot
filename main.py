import sys

sys.path.append(r"C:\Users\bestd\OneDrive\–î–æ–∫—É–º–µ–Ω—Ç—ã\GitHub\TelegramSchedulingBot\shedule_app")

import asyncio
import json
import os
import logging
from datetime import datetime, timedelta, date,time
from aiogram import Bot, Dispatcher, types, F, BaseMiddleware
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import threading
from gsheets_manager import GoogleSheetsManager
from storage import JSONStorage
from dotenv import load_dotenv
from aiogram.types import Update
from shedule_app.HelperMethods import School
from shedule_app.models import Person,Teacher,Student
from typing import List, Dict
from shedule_app.GoogleParser import GoogleSheetsDataLoader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
BOOKINGS_FILE = "bookings.json"
CREDENTIALS_PATH = r"C:\Users\bestd\OneDrive\–î–æ–∫—É–º–µ–Ω—Ç—ã\GitHub\TelegramSchedulingBot\credentials.json"
SPREADSHEET_ID = "1r1MU8k8umwHx_E4Z-jFHRJ-kdwC43Jw0nwpVeH7T1GU"

BOOKING_TYPES = ["–¢–∏–ø1"]
SUBJECTS = {
    "1": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    "2": "–§–∏–∑–∏–∫–∞",
    "3": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "4": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"
}


class BookingStates(StatesGroup):
    SELECT_ROLE = State()
    INPUT_NAME = State()
    SELECT_SUBJECT = State()  # –¢–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
    SELECT_DATE = State()
    SELECT_TIME_RANGE = State()
    CONFIRMATION = State()
    SELECT_CHILD = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞
    PARENT_SELECT_CHILD = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
storage = JSONStorage(file_path=BOOKINGS_FILE)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
try:
    gsheets = GoogleSheetsManager(
        credentials_file='credentials.json',
        spreadsheet_id='1r1MU8k8umwHx_E4Z-jFHRJ-kdwC43Jw0nwpVeH7T1GU'
    )
    gsheets.connect()
    storage.set_gsheets_manager(gsheets)
    logger.info("Google Sheets integration initialized successfully")
except Exception as e:
    logger.error(f"Google Sheets initialization error: {e}")
    gsheets = None


class RoleCheckMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start, /help –∏ –≤–≤–æ–¥ –∏–º–µ–Ω–∏
        if isinstance(event, Message) and event.text == '/start':
            return await handler(event, data)
            
            current_state = await data['state'].get_state() if data.get('state') else None
            if current_state == BookingStates.INPUT_NAME:
                return await handler(event, data)
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if isinstance(event, Message):
            user_id = event.from_user.id
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if not storage.has_user_roles(user_id):
            if isinstance(event, Message):
                await event.answer(
                    "‚è≥ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
                    reply_markup=ReplyKeyboardRemove()
                )
            elif isinstance(event, CallbackQuery):
                await event.answer(
                    "‚è≥ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞",
                    show_alert=True
                )
            return
        
        return await handler(event, data)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ middleware
dp.update.middleware(RoleCheckMiddleware())

def check_student_availability_for_slots(
    student: Student,
    all_students: List[Student],
    teachers: List[Teacher],
    target_date: date,
    start_time: time,
    end_time: time,
    interval_minutes: int = 30
) -> Dict[time, bool]:
    result = {}
    current_time = start_time
    
    logger.info(f"=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò ===")
    logger.info(f"–°—Ç—É–¥–µ–Ω—Ç: {student.name}, –ø—Ä–µ–¥–º–µ—Ç: {student.subject_id}")
    logger.info(f"–í—Å–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(teachers)}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ã
    for i, teacher in enumerate(teachers):
        logger.info(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {i+1}: {teacher.name}, –ø—Ä–µ–¥–º–µ—Ç—ã: {teacher.subjects_id}, "
                   f"–≤—Ä–µ–º—è: {teacher.start_of_study_time}-{teacher.end_of_study_time}")
    
    logger.info(f"–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(all_students)}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º subject_id —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —á–∏—Å–ª–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    try:
        student_subject_id = int(student.subject_id)
    except (ValueError, TypeError):
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç subject_id: {student.subject_id}")
        return {time_obj: False for time_obj in [start_time + timedelta(minutes=i*interval_minutes) 
                for i in range(int((end_time.hour*60+end_time.minute - start_time.hour*60+start_time.minute)/interval_minutes)+1)]}
    
    while current_time <= end_time:
        active_students = [
            s for s in all_students 
            if (s.start_of_studying_time <= current_time <= s.end_of_studying_time and
                s != student)
        ]
        
        students_with_target = active_students + [student]
        
        active_teachers = [
            t for t in teachers 
            if t.start_of_studying_time <= current_time <= t.end_of_studying_time
        ]
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        can_allocate = True
        
        if not active_teachers:
            logger.info(f"–í—Ä–µ–º—è {current_time}: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            can_allocate = False
        else:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —á–∏—Å–ª–∞ —Å —á–∏—Å–ª–∞–º–∏
            subject_available = any(student_subject_id in t.subjects_id for t in active_teachers)
            if not subject_available:
                logger.info(f"–í—Ä–µ–º—è {current_time}: –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {student_subject_id}")
                can_allocate = False
        
        result[current_time] = can_allocate
        current_time = School.add_minutes_to_time(current_time, interval_minutes)
    
    available_count = sum(1 for available in result.values() if available)
    total_count = len(result)
    logger.info(f"–ò–¢–û–ì: –¥–æ—Å—Ç—É–ø–Ω–æ {available_count}/{total_count} —Å–ª–æ—Ç–æ–≤")
    
    return result

def generate_time_range_keyboard_with_availability(
    selected_date=None,
    start_time=None,
    end_time=None,
    availability_map: Dict[time, bool] = None
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    builder = InlineKeyboardBuilder()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (9:00 - 20:00)
    start = datetime.strptime("09:00", "%H:%M")
    end = datetime.strptime("20:00", "%H:%M")
    current = start

    while current <= end:
        time_str = current.strftime("%H:%M")
        time_obj = current.time()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if availability_map and time_obj in availability_map:
            is_available = availability_map[time_obj]
            if start_time and time_str == start_time:
                button_text = "üü¢ " + time_str if is_available else "üî¥ " + time_str
            elif end_time and time_str == end_time:
                button_text = "üî¥ " + time_str if is_available else "üî¥üîí " + time_str
            elif (start_time and end_time and
                  datetime.strptime(start_time, "%H:%M").time() < time_obj <
                  datetime.strptime(end_time, "%H:%M").time()):
                button_text = "üîµ " + time_str if is_available else "üîµüîí " + time_str
            else:
                button_text = time_str if is_available else "üîí " + time_str
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –≤–∏–¥
            if start_time and time_str == start_time:
                button_text = "üü¢ " + time_str
            elif end_time and time_str == end_time:
                button_text = "üî¥ " + time_str
            elif (start_time and end_time and
                  datetime.strptime(start_time, "%H:%M").time() < time_obj <
                  datetime.strptime(end_time, "%H:%M").time()):
                button_text = "üîµ " + time_str
            else:
                button_text = time_str

        # –î–µ–ª–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏
        if availability_map and time_obj in availability_map and not availability_map[time_obj]:
            callback_data = "time_slot_unavailable"
        else:
            callback_data = f"time_point_{time_str}"

        builder.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=callback_data
        ))
        current += timedelta(minutes=30)

    builder.adjust(4)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = []
    if availability_map:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        available_count = sum(1 for available in availability_map.values() if available)
        total_count = len(availability_map)
        control_buttons.append(types.InlineKeyboardButton(
            text=f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_count}/{total_count}",
            callback_data="availability_info"
        ))

    control_buttons.extend([
        types.InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –Ω–∞—á–∞–ª–æ üü¢",
            callback_data="select_start_mode"
        ),
        types.InlineKeyboardButton(
            text="–í—ã–±–∏—Ä–∞—Ç—å –∫–æ–Ω–µ—Ü üî¥",
            callback_data="select_end_mode"
        )
    ])

    builder.row(*control_buttons)

    if start_time and end_time:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        start_available = availability_map and datetime.strptime(start_time, "%H:%M").time() in availability_map and availability_map[datetime.strptime(start_time, "%H:%M").time()]
        end_available = availability_map and datetime.strptime(end_time, "%H:%M").time() in availability_map and availability_map[datetime.strptime(end_time, "%H:%M").time()]
        
        if start_available and end_available:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä–µ–º—è",
                    callback_data="confirm_time_range"
                )
            )
        else:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    callback_data="interval_unavailable"
                )
            )

    builder.row(
        types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="cancel_time_selection"
        )
    )

    return builder.as_markup()

def has_teacher_booking_conflict(user_id, date, time_start, time_end, exclude_id=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    bookings = storage.load()
    
    def time_to_minutes(t):
        h, m = map(int, t.split(':'))
        return h * 60 + m

    new_start = time_to_minutes(time_start)
    new_end = time_to_minutes(time_end)

    for booking in bookings:
        if (booking.get('user_id') == user_id and
            booking.get('date') == date and
            booking.get('user_role') == 'teacher'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            
            if exclude_id and booking.get('id') == exclude_id:
                continue

            existing_start = time_to_minutes(booking.get('start_time', '00:00'))
            existing_end = time_to_minutes(booking.get('end_time', '00:00'))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            if not (new_end <= existing_start or new_start >= existing_end):
                return True
                
    return False


def generate_booking_types():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    builder = InlineKeyboardBuilder()
    for booking_type in BOOKING_TYPES:
        builder.add(types.InlineKeyboardButton(
            text=booking_type,
            callback_data=f"booking_type_{booking_type}"
        ))
    builder.adjust(2)
    return builder.as_markup()


# def merge_adjacent_bookings(bookings):
#     """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–º–µ–∂–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞"""
#     if not bookings:
#         return bookings

#     sorted_bookings = sorted(bookings, key=lambda x: (
#         x.get('booking_type', ''),
#         x.get('date', ''),
#         x.get('start_time', '')
#     ))

#     merged = []
#     current = sorted_bookings[0]

#     for next_booking in sorted_bookings[1:]:
#         if (current.get('booking_type') == next_booking.get('booking_type') and
#                 current.get('date') == next_booking.get('date') and
#                 current.get('end_time') == next_booking.get('start_time')):

#             current = {
#                 **current,
#                 'end_time': next_booking.get('end_time'),
#                 'id': min(current.get('id', 0), next_booking.get('id', 0)),
#                 'merged': True
#             }
#         else:
#             merged.append(current)
#             current = next_booking

#     merged.append(current)
#     return merged


def load_bookings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏–µ"""
    data = storage.load()
    valid_bookings = []
    current_time = datetime.now()

    for booking in data:
        if 'date' not in booking:
            continue

        try:
            if isinstance(booking['date'], str):
                booking_date = datetime.strptime(booking['date'], "%Y-%m-%d").date()
            else:
                continue

            time_end = datetime.strptime(booking.get('end_time', "00:00"), "%H:%M").time()
            booking_datetime = datetime.combine(booking_date, time_end)

            if booking_datetime < current_time:
                continue

            booking['date'] = booking_date
            valid_bookings.append(booking)

        except ValueError:
            continue

    return valid_bookings


# def has_booking_conflict(user_id, date, time_start, time_end, subject=None, exclude_id=None):
#     """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ (–ª—é–±—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è)"""
#     bookings = load_bookings()
    
#     def time_to_minutes(t):
#         h, m = map(int, t.split(':'))
#         return h * 60 + m

#     new_start = time_to_minutes(time_start)
#     new_end = time_to_minutes(time_end)

#     for booking in bookings:
#         if (booking.get('user_id') == user_id and
#             booking.get('date') == date and
#             booking.get('user_role') == 'student'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
            
#             if exclude_id and booking.get('id') == exclude_id:
#                 continue

#             existing_start = time_to_minutes(booking.get('start_time', '00:00'))
#             existing_end = time_to_minutes(booking.get('end_time', '00:00'))

#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
#             if not (new_end <= existing_start or new_start >= existing_end):
#                 return True
                
#     return False


def generate_calendar(year=None, month=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤"""
    now = datetime.now()
    if year is None:
        year = now.year
    if month is None:
        month = now.month

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É (1 —Å–µ–Ω—Ç—è–±—Ä—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞)
    min_date = datetime(year=now.year, month=9, day=1).date()
    if now.date() > min_date:
        min_date = now.date()

    builder = InlineKeyboardBuilder()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    month_name = datetime(year, month, 1).strftime("%B %Y")
    builder.row(types.InlineKeyboardButton(
        text=month_name, 
        callback_data="ignore_month_header"
    ))

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    builder.row(*[
        types.InlineKeyboardButton(text=day, callback_data="ignore_weekday") 
        for day in week_days
    ])

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
    first_day = datetime(year, month, 1)
    start_weekday = first_day.weekday()  # 0-6 (–ø–Ω-–≤—Å)
    days_in_month = (datetime(year, month + 1, 1) - first_day).days if month < 12 else 31

    buttons = []
    # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for _ in range(start_weekday):
        buttons.append(types.InlineKeyboardButton(
            text=" ", 
            callback_data="ignore_empty_day"
        ))

    # –ö–Ω–æ–ø–∫–∏ –¥–Ω–µ–π —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for day in range(1, days_in_month + 1):
        current_date = datetime(year, month, day).date()
        if current_date < min_date:
            buttons.append(types.InlineKeyboardButton(
                text=" ", 
                callback_data="ignore_past_day"
            ))
        else:
            buttons.append(types.InlineKeyboardButton(
                text=str(day),
                callback_data=f"calendar_day_{year}-{month}-{day}"
            ))

        # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
        if (day + start_weekday) % 7 == 0 or day == days_in_month:
            builder.row(*buttons)
            buttons = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    show_prev = datetime(prev_year, prev_month, 1).date() >= min_date

    nav_buttons = []
    if show_prev:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è", 
            callback_data=f"calendar_change_{prev_year}-{prev_month}"
        ))
    else:
        nav_buttons.append(types.InlineKeyboardButton(
            text=" ", 
            callback_data="ignore_prev_disabled"
        ))

    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–≤–ø–µ—Ä–µ–¥"
    nav_buttons.append(types.InlineKeyboardButton(
        text="‚û°Ô∏è", 
        callback_data=f"calendar_change_{next_year}-{next_month}"
    ))

    builder.row(*nav_buttons)

    return builder.as_markup()

@dp.callback_query(
    BookingStates.SELECT_DATE, 
    F.data.startswith("calendar_change_")
)
async def process_calendar_change(callback: types.CallbackQuery):
    try:
        date_str = callback.data.replace("calendar_change_", "")
        year, month = map(int, date_str.split("-"))
        
        await callback.message.edit_reply_markup(
            reply_markup=generate_calendar(year, month)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error changing calendar month: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—è—Ü", show_alert=True)

@dp.callback_query(F.data.startswith("ignore_"))
async def ignore_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback'–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"""
    await callback.answer()


def generate_time_range_keyboard(selected_date=None, start_time=None, end_time=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞"""
    builder = InlineKeyboardBuilder()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (9:00 - 20:00)
    start = datetime.strptime("09:00", "%H:%M")
    end = datetime.strptime("20:00", "%H:%M")
    current = start

    while current <= end:
        time_str = current.strftime("%H:%M")
        time_obj = current.time()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
        if start_time and time_str == start_time:
            button_text = "üü¢ " + time_str  # –ù–∞—á–∞–ª–æ - –∑–µ–ª–µ–Ω—ã–π
        elif end_time and time_str == end_time:
            button_text = "üî¥ " + time_str  # –ö–æ–Ω–µ—Ü - –∫—Ä–∞—Å–Ω—ã–π
        elif (start_time and end_time and
              datetime.strptime(start_time, "%H:%M").time() < time_obj <
              datetime.strptime(end_time, "%H:%M").time()):
            button_text = "üîµ " + time_str  # –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ - —Å–∏–Ω–∏–π
        else:
            button_text = time_str  # –û–±—ã—á–Ω—ã–π –≤–∏–¥

        builder.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"time_point_{time_str}"
        ))
        current += timedelta(minutes=30)

    builder.adjust(4)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = [
        types.InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –Ω–∞—á–∞–ª–æ üü¢",
            callback_data="select_start_mode"
        ),
        types.InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–µ—Ü üî¥",
            callback_data="select_end_mode"
        )
    ]

    builder.row(*control_buttons)

    if start_time and end_time:
        builder.row(
            types.InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä–µ–º—è",
                callback_data="confirm_time_range"
            )
        )

    builder.row(
        types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="cancel_time_selection"
        )
    )

    return builder.as_markup()


@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data == "select_end_mode")
async def select_end_mode_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    if not data.get('time_start'):
        await callback.answer(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞!",
            show_alert=True
        )
        return

    await state.update_data(selecting_mode='end')

    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞—á–∞–ª–æ: {data['time_start']}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–∫—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä):",
        reply_markup=generate_time_range_keyboard(
            selected_date=data.get('selected_date'),
            start_time=data['time_start'],
            end_time=data.get('time_end')
        )
    )
    await callback.answer()


def generate_confirmation():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="booking_confirm"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="booking_cancel"),
    )
    return builder.as_markup()


def generate_booking_list(user_id: int):
    bookings = load_bookings()
    user_roles = storage.get_user_roles(user_id)
    
    # –î–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –µ–≥–æ –¥–µ—Ç–µ–π
    children_ids = []
    if 'parent' in user_roles:
        children_ids = storage.get_parent_children(user_id)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    teacher_bookings = []
    student_bookings = []
    children_bookings = []
    
    for booking in bookings:
        if booking.get('user_id') == user_id:
            if booking.get('user_role') == 'teacher':
                teacher_bookings.append(booking)
            else:
                student_bookings.append(booking)
        elif booking.get('user_id') in children_ids:
            children_bookings.append(booking)
    
    if not any([teacher_bookings, student_bookings, children_bookings]):
        return None
    
    builder = InlineKeyboardBuilder()
    
    # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    if teacher_bookings:
        builder.row(types.InlineKeyboardButton(
            text="üë®‚Äçüè´ –ú–û–ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø (–ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨)",
            callback_data="ignore"
        ))
        
        for booking in sorted(teacher_bookings, key=lambda x: (x.get("date"), x.get("start_time"))):
            date_str = booking.get('date', '')
            if isinstance(date_str, str) and len(date_str) == 10:  # YYYY-MM-DD format
                try:
                    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                    formatted_date = date_obj.strftime("%d.%m")
                except ValueError:
                    formatted_date = date_str
            else:
                formatted_date = date_str
            
            button_text = (
                f"üìÖ {formatted_date} "
                f"‚è∞ {booking.get('start_time', '?')}-{booking.get('end_time', '?')}"
            )
            
            builder.row(types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"booking_info_{booking.get('id')}"
            ))
    
    # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
    if student_bookings:
        builder.row(types.InlineKeyboardButton(
            text="üë®‚Äçüéì –ú–û–ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø (–£–ß–ï–ù–ò–ö)",
            callback_data="ignore"
        ))
        
        for booking in sorted(student_bookings, key=lambda x: (x.get("date"), x.get("start_time"))):
            date_str = booking.get('date', '')
            if isinstance(date_str, str) and len(date_str) == 10:
                try:
                    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                    formatted_date = date_obj.strftime("%d.%m")
                except ValueError:
                    formatted_date = date_str
            else:
                formatted_date = date_str
            
            subject = booking.get('subject', '')
            subject_short = get_subject_short_name(subject)
            
            button_text = (
                f"üìÖ {formatted_date} "
                f"‚è∞ {booking.get('start_time', '?')}-{booking.get('end_time', '?')} "
                f"üìö {subject_short}"
            )
            
            builder.row(types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"booking_info_{booking.get('id')}"
            ))
    
    # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ–π (–¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π)
    if children_bookings:
        builder.row(types.InlineKeyboardButton(
            text="üë∂ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –ú–û–ò–• –î–ï–¢–ï–ô",
            callback_data="ignore"
        ))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–µ—Ç—è–º
        children_bookings_by_child = {}
        for booking in children_bookings:
            child_id = booking.get('user_id')
            if child_id not in children_bookings_by_child:
                children_bookings_by_child[child_id] = []
            children_bookings_by_child[child_id].append(booking)
        
        for child_id, child_bookings in children_bookings_by_child.items():
            child_info = storage.get_child_info(child_id)
            child_name = child_info.get('user_name', f'–†–µ–±–µ–Ω–æ–∫ {child_id}')
            
            builder.row(types.InlineKeyboardButton(
                text=f"üë∂ {child_name}",
                callback_data="ignore"
            ))
            
            for booking in sorted(child_bookings, key=lambda x: (x.get("date"), x.get("start_time"))):
                date_str = booking.get('date', '')
                if isinstance(date_str, str) and len(date_str) == 10:
                    try:
                        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                        formatted_date = date_obj.strftime("%d.%m")
                    except ValueError:
                        formatted_date = date_str
                else:
                    formatted_date = date_str
                
                subject = booking.get('subject', '')
                subject_short = get_subject_short_name(subject)
                
                button_text = (
                    f"   üìÖ {formatted_date} "
                    f"‚è∞ {booking.get('start_time', '?')}-{booking.get('end_time', '?')} "
                    f"üìö {subject_short}"
                )
                
                builder.row(types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"booking_info_{booking.get('id')}"
                ))
    
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
        callback_data="back_to_menu"
    ))
    
    return builder.as_markup()


def get_subject_short_name(subject_id: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 3 –±—É–∫–≤—ã)"""
    subject_names = {
        "1": "üìê –ú–∞—Ç",
        "2": "‚öõÔ∏è –§–∏–∑",
        "3": "üíª –ò–Ω—Ñ",
        "4": "üìñ –†—É—Å"
    }
    return subject_names.get(subject_id, subject_id[:3] if subject_id else "???")


def generate_booking_actions(booking_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"cancel_booking_{booking_id}"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_bookings"),
    )
    return builder.as_markup()


def generate_subjects_keyboard(selected_subjects=None, is_teacher=False):
    builder = InlineKeyboardBuilder()
    selected_subjects = selected_subjects or []

    for subject_id, subject_name in SUBJECTS.items():
        emoji = "‚úÖ" if subject_id in selected_subjects else "‚¨úÔ∏è"
        builder.button(
            text=f"{emoji} {subject_name}",
            callback_data=f"subject_{subject_id}"
        )

    if is_teacher:
        builder.button(text="–ì–æ—Ç–æ–≤–æ", callback_data="subjects_done")
        builder.adjust(2, 2, 1)
    else:
        builder.adjust(2)

    return builder.as_markup()

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–æ–µ)
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è")],
        [KeyboardButton(text="üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")],
        [KeyboardButton(text="üë§ –ú–æ—è —Ä–æ–ª—å")]
    ],
    resize_keyboard=True
)

# –ú–µ–Ω—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ (–≤ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º–æ–º –º–µ–Ω—é)
additional_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùì –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")],
        [KeyboardButton(text="üë§ –ú–æ—è —Ä–æ–ª—å")]
    ],
    resize_keyboard=True
)

# –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π
no_roles_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùì –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")]
    ],
    resize_keyboard=True
)


async def generate_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–µ–π"""
    roles = storage.get_user_roles(user_id)
    
    if not roles:
        return no_roles_menu
    
    keyboard_buttons = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
    can_book = any(role in roles for role in ['teacher', 'student', 'parent'])
    
    if can_book:
        keyboard_buttons.append([KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è")])
    
    keyboard_buttons.append([KeyboardButton(text="üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")])
    keyboard_buttons.append([KeyboardButton(text="üë§ –ú–æ—è —Ä–æ–ª—å")])
    
    return ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True)


@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = storage.get_user_name(user_id)
    
    menu = await generate_main_menu(user_id)
    
    if user_name:
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=menu
        )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(BookingStates.INPUT_NAME)

@dp.message(F.text == "üë§ –ú–æ—è —Ä–æ–ª—å")
async def show_my_role(message: types.Message):
    roles = storage.get_user_roles(message.from_user.id)
    if roles:
        role_translations = {
            "teacher": "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
            "student": "—É—á–µ–Ω–∏–∫", 
            "parent": "—Ä–æ–¥–∏—Ç–µ–ª—å"
        }
        role_text = ", ".join([role_translations.get(role, role) for role in roles])
        await message.answer(f"–í–∞—à–∏ —Ä–æ–ª–∏: {role_text}")
    else:
        await message.answer("–í–∞—à–∏ —Ä–æ–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# @dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
# async def show_help(message: types.Message):
#     await cmd_help(message)


# @dp.message(Command("help"))
# async def cmd_help(message: types.Message):
#     await message.answer(
#         "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
#         "/book - –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
#         " 1. –í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å (—É—á–µ–Ω–∏–∫/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)\n"
#         " 2. –í–≤–µ—Å—Ç–∏ –≤–∞—à–µ –§–ò–û\n"
#         " 3. –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç(—ã)\n"
#         " 4. –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
#         " 5. –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è\n"
#         " 6. –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è\n"
#         " 7. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
#         "/my_bookings - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
#         "/my_role - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Ä–æ–ª—å\n"
#         "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
#     )


@dp.message(F.text == "‚ùì –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
async def contact_admin(message: types.Message):
    await message.answer(
        "üìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
        "–ü–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞."
    )


@dp.message(F.text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è")
@dp.message(Command("book"))
async def start_booking(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –§–ò–û
    user_name = storage.get_user_name(user_id)
    if not user_name:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:")
        await state.set_state(BookingStates.INPUT_NAME)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_roles = storage.get_user_roles(user_id)
    if not user_roles:
        await message.answer(
            "‚è≥ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π",
            reply_markup=await generate_main_menu(user_id)
        )
        return
    
    await state.update_data(user_name=user_name)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    
    # –†–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    available_booking_roles = []
    
    if 'teacher' in user_roles:
        available_booking_roles.append('teacher')
        builder.button(text="üë®‚Äçüè´ –Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_teacher")
    
    if 'student' in user_roles:
        available_booking_roles.append('student') 
        builder.button(text="üë®‚Äçüéì –Ø —É—á–µ–Ω–∏–∫", callback_data="role_student")
    
    if 'parent' in user_roles:
        available_booking_roles.append('parent')
        builder.button(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –Ø —Ä–æ–¥–∏—Ç–µ–ª—å", callback_data="role_parent")
    
    if not available_booking_roles:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–µ–π –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=await generate_main_menu(user_id)
        )
        return
    
    await state.update_data(available_roles=available_booking_roles)
    
    if len(available_booking_roles) == 1:
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ä–æ–ª—å, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –µ–µ
        role = available_booking_roles[0]

        await state.update_data(user_role=role)
        
        if role == 'teacher':
            # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
            teacher_subjects = storage.get_teacher_subjects(user_id)
            if not teacher_subjects:
                await message.answer(
                    "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=await generate_main_menu(user_id)
                )
                return
            
            await state.update_data(subjects=teacher_subjects)
            subject_names = [SUBJECTS.get(subj_id, f"–ü—Ä–µ–¥–º–µ—Ç {subj_id}") for subj_id in teacher_subjects]
            
            await message.answer(
                f"–í—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å\n"
                f"–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã: {', '.join(subject_names)}\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                reply_markup=generate_calendar()
            )
            await state.set_state(BookingStates.SELECT_DATE)
            
        elif role == 'student':
            await message.answer(
                "–í—ã —É—á–µ–Ω–∏–∫\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:",
                reply_markup=generate_subjects_keyboard()
            )
            await state.set_state(BookingStates.SELECT_SUBJECT)
            
        elif role == 'parent':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
            children_ids = storage.get_parent_children(user_id)
            if not children_ids:
                await message.answer(
                    "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=await generate_main_menu(user_id)
                )
                return
            
            builder = InlineKeyboardBuilder()
            for child_id in children_ids:
                child_info = storage.get_child_info(child_id)
                child_name = child_info.get('user_name', f'–£—á–µ–Ω–∏–∫ {child_id}')
                builder.button(
                    text=f"üë∂ {child_name}",
                    callback_data=f"select_child_{child_id}"
                )
            
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_child_selection")
            builder.adjust(1)
            
            await message.answer(
                "–í—ã —Ä–æ–¥–∏—Ç–µ–ª—å\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:",
                reply_markup=builder.as_markup()
            )
            await state.set_state(BookingStates.PARENT_SELECT_CHILD)
    
    else:
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(BookingStates.SELECT_ROLE)


@dp.message(BookingStates.INPUT_NAME)
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.text.strip()
    
    if len(user_name.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é)")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    storage.save_user_name(user_id, user_name)
    await state.update_data(user_name=user_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª–∏
    if storage.has_user_roles(user_id):
        user_roles = storage.get_user_roles(user_id)
        builder = InlineKeyboardBuilder()
        if 'teacher' in user_roles:
            builder.button(text="üë®‚Äçüè´ –ö–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_teacher")
        if 'student' in user_roles:
            builder.button(text="üë®‚Äçüéì –ö–∞–∫ —É—á–µ–Ω–∏–∫", callback_data="role_student")
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(BookingStates.SELECT_ROLE)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
    else:
        await message.answer(
            "‚úÖ –í–∞—à–µ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
            "‚è≥ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π.",
            reply_markup=await generate_main_menu(user_id)
        )
        await state.clear()


@dp.callback_query(F.data.startswith("role_"))
async def process_role_selection(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data.split("_")[1]
    user_id = callback.from_user.id

    await state.update_data(user_role=role)

    if role == 'teacher':
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ Google Sheets
        teacher_subjects = storage.get_teacher_subjects(user_id)

        # –î–ï–ë–ê–ì: –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        logger.info(f"Teacher {user_id} subjects: {teacher_subjects} (type: {type(teacher_subjects)})")

        # –í–†–ï–ú–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Å–ø–∏—Å–æ–∫ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º '1234'
        if (teacher_subjects and
                isinstance(teacher_subjects, list) and
                len(teacher_subjects) == 1 and
                teacher_subjects[0].isdigit() and
                len(teacher_subjects[0]) > 1):
            # –†–∞–∑–±–∏–≤–∞–µ–º '1234' –Ω–∞ ['1', '2', '3', '4']
            combined_subject = teacher_subjects[0]
            teacher_subjects = [digit for digit in combined_subject]
            logger.info(f"Fixed combined subjects: {teacher_subjects}")

        if not teacher_subjects:
            await callback.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                show_alert=True
            )
            return

        await state.update_data(subjects=teacher_subjects)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        subject_names = []
        for subj_id in teacher_subjects:
            subject_names.append(SUBJECTS.get(subj_id, f"–ü—Ä–µ–¥–º–µ—Ç {subj_id}"))

        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
            f"–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã: {', '.join(subject_names)}\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=generate_calendar()
        )
        await state.set_state(BookingStates.SELECT_DATE)

    elif role == 'student':
        # –î–ª—è —É—á–µ–Ω–∏–∫–∞ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
        await callback.message.edit_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å —É—á–µ–Ω–∏–∫–∞\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:",
            reply_markup=generate_subjects_keyboard()
        )
        await state.set_state(BookingStates.SELECT_SUBJECT)
        
    elif role == 'parent':
        # –î–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–µ–π
        children_ids = storage.get_parent_children(user_id)
        
        if not children_ids:
            await callback.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                show_alert=True
            )
            return
        
        builder = InlineKeyboardBuilder()
        for child_id in children_ids:
            child_info = storage.get_child_info(child_id)
            child_name = child_info.get('user_name', f'–£—á–µ–Ω–∏–∫ {child_id}')
            builder.button(
                text=f"üë∂ {child_name}",
                callback_data=f"select_child_{child_id}"
            )
        
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_child_selection")
        builder.adjust(1)
        
        await callback.message.edit_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å —Ä–æ–¥–∏—Ç–µ–ª—è\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(BookingStates.PARENT_SELECT_CHILD)

    await callback.answer()

# @dp.callback_query(BookingStates.TEACHER_SUBJECTS, F.data.startswith("subject_"))
# async def process_teacher_subjects(callback: types.CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     selected_subjects = data.get("subjects", [])

#     subject_id = callback.data.split("_")[1]
#     if subject_id in selected_subjects:
#         selected_subjects.remove(subject_id)
#     else:
#         selected_subjects.append(subject_id)

#     await state.update_data(subjects=selected_subjects)
#     await callback.message.edit_reply_markup(
#         reply_markup=generate_subjects_keyboard(selected_subjects, is_teacher=True)
#     )
#     await callback.answer()


# @dp.callback_query(BookingStates.TEACHER_SUBJECTS, F.data == "subjects_done")
# async def process_subjects_done(callback: types.CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     if not data.get("subjects"):
#         await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç!", show_alert=True)
#         return

#     storage.update_user_subjects(callback.from_user.id, data["subjects"])
#     await state.update_data(booking_type="–¢–∏–ø1")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
#     await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=generate_calendar())  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞
#     await state.set_state(BookingStates.SELECT_DATE)
#     await callback.answer()


@dp.callback_query(BookingStates.SELECT_SUBJECT, F.data.startswith("subject_"))
async def process_student_subject(callback: types.CallbackQuery, state: FSMContext):
    subject_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(subject=subject_id, booking_type="–¢–∏–ø1")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–Ω–æ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
    data = await state.get_data()
    user_name = data.get('user_name', '')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–ø—Ä–µ–¥–º–µ—Ç –≤ Google Sheets
    if gsheets:
        gsheets.save_user_subject(user_id, user_name, subject_id)
    
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {SUBJECTS[subject_id]}\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=generate_calendar()
    )
    await state.set_state(BookingStates.SELECT_DATE)
    await callback.answer()


@dp.callback_query(BookingStates.SELECT_DATE, F.data.startswith("calendar_day_"))
async def process_calendar(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    user_id = callback.from_user.id

    if data.startswith("calendar_day_"):
        date_str = data.replace("calendar_day_", "")
        year, month, day = map(int, date_str.split("-"))
        selected_date = datetime(year, month, day).date()
        formatted_date = selected_date.strftime("%Y.%m.%d")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        role = state_data.get('user_role')
        subject = state_data.get('subject') if role == 'student' else None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–æ–Ω–∏
        

        # –î–ª—è —É—á–µ–Ω–∏–∫–æ–≤: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        availability_map = None
        if role == 'student' and subject:
            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                temp_student = Student(
                    name="temp_check",
                    start_of_study_time="09:00",
                    end_of_study_time="20:00",
                    subject_id=subject,
                    need_for_attention=state_data.get('need_for_attention', 1)
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ Google Sheets
                loader = GoogleSheetsDataLoader(CREDENTIALS_PATH, SPREADSHEET_ID, formatted_date)
                all_teachers, all_students = loader.load_data()
                
                # # –í–†–ï–ú–ï–ù–ù–û: –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                # if not all_teachers:
                #     logger.warning("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google Sheets, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                #
                #     # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ —Å 9:00 –¥–æ 18:00)
                #     all_teachers = [
                #         Teacher(
                #             name="–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞",
                #             start_of_study_time="09:00",
                #             end_of_study_time="18:00",
                #             subjects_id=[1, 2],  # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –§–∏–∑–∏–∫–∞
                #             priority=1,
                #             maximum_attention=20  # –£–≤–µ–ª–∏—á–∏–º –µ–º–∫–æ—Å—Ç—å
                #         ),
                #         Teacher(
                #             name="–ü–µ—Ç—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á",
                #             start_of_study_time="10:00",
                #             end_of_study_time="19:00",
                #             subjects_id=[1, 3],  # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞
                #             priority=2,
                #             maximum_attention=15  # –£–≤–µ–ª–∏—á–∏–º –µ–º–∫–æ—Å—Ç—å
                #         )
                #     ]
                #
                #     # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å –º–µ–Ω—å—à–µ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é –≤–æ –≤–Ω–∏–º–∞–Ω–∏–∏
                #     all_students = [
                #         Student(
                #             name="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                #             start_of_study_time="10:00",
                #             end_of_study_time="12:00",
                #             subject_id=1,  # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
                #             need_for_attention=2  # –£–º–µ–Ω—å—à–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å
                #         ),
                #         Student(
                #             name="–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
                #             start_of_study_time="14:00",
                #             end_of_study_time="16:00",
                #             subject_id=2,  # –§–∏–∑–∏–∫–∞
                #             need_for_attention=2  # –£–º–µ–Ω—å—à–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å
                #         )
                #     ]
                #
                # if not all_students:
                #     logger.warning("–°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google Sheets, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                #
                #     # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                #     all_students = [
                #         Student(
                #             name="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                #             start_of_study_time="10:00",
                #             end_of_study_time="12:00",
                #             subject_id=1,  # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
                #             need_for_attention=5
                #         ),
                #         Student(
                #             name="–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
                #             start_of_study_time="14:00",
                #             end_of_study_time="16:00",
                #             subject_id=2,  # –§–∏–∑–∏–∫–∞
                #             need_for_attention=3
                #         ),
                #         Student(
                #             name="–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤",
                #             start_of_study_time="11:00",
                #             end_of_study_time="13:00",
                #             subject_id=1,  # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
                #             need_for_attention=4
                #         )
                #     ]
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {len(all_teachers)} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, {len(all_students)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                await callback.message.edit_text(
                    f"‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ {day}.{month}.{year}...\n"
                    "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
                )
                
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                availability_map = await asyncio.to_thread(
                    check_student_availability_for_slots,
                    student=temp_student,
                    all_students=all_students,
                    teachers=all_teachers,
                    target_date=selected_date,
                    start_time=time(9, 0),
                    end_time=time(20, 0),
                    interval_minutes=30
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
                await callback.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏",
                    show_alert=True
                )
                return

        await state.update_data(
            selected_date=selected_date,
            time_start=None,
            time_end=None,
            selecting_mode='start',
            availability_map=availability_map
        )

        message_text = f"üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {day}.{month}.{year}\n"
        
        if role == 'student' and availability_map:
            available_count = sum(1 for available in availability_map.values() if available)
            total_count = len(availability_map)
            message_text += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: {available_count}/{total_count}\n"
            message_text += "üîí - –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            message_text += "üü¢ - –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏—è\n"
            message_text += "üî¥ - –≤—ã–±–µ—Ä–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è\n\n"

        message_text += "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è:\n"
        message_text += "1. –ù–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –Ω–∞—á–∞–ª–æ üü¢'\n"
        message_text += "2. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞\n"
        message_text += "3. –ù–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–µ—Ü üî¥'\n"
        message_text += "4. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è\n"
        message_text += "5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä"

        await callback.message.edit_text(
            message_text,
            reply_markup=generate_time_range_keyboard_with_availability(
                selected_date=selected_date,
                availability_map=availability_map
            )
        )
        await state.set_state(BookingStates.SELECT_TIME_RANGE)
        await callback.answer()

@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data == "time_slot_unavailable")
async def handle_unavailable_slot(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç"""
    await callback.answer(
        "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (–±–µ–∑ üîí)",
        show_alert=True
    )

@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data == "interval_unavailable")
async def handle_unavailable_interval(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    data = await state.get_data()
    availability_map = data.get('availability_map', {})
    
    start_time = data.get('time_start')
    end_time = data.get('time_end')
    
    if start_time and end_time:
        start_obj = datetime.strptime(start_time, "%H:%M").time()
        end_obj = datetime.strptime(end_time, "%H:%M").time()
        
        start_available = start_obj in availability_map and availability_map[start_obj]
        end_available = end_obj in availability_map and availability_map[end_obj]
        
        if not start_available:
            message = f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ {start_time} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        elif not end_available:
            message = f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è {end_time} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        else:
            message = "–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    else:
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª"
    
    await callback.answer(
        f"‚ùå {message}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤",
        show_alert=True
    )

@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data == "availability_info")
async def show_availability_info(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    data = await state.get_data()
    availability_map = data.get('availability_map', {})
    
    if availability_map:
        available_count = sum(1 for available in availability_map.values() if available)
        total_count = len(availability_map)
        percentage = (available_count / total_count * 100) if total_count > 0 else 0
        
        message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:\n"
            f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: {available_count}/{total_count}\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {percentage:.1f}%\n"
            f"‚Ä¢ üîí - –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            f"‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã"
        )
    else:
        message = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    
    await callback.answer(message, show_alert=True)


@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data == "cancel_time_selection")
async def cancel_time_selection_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω")
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_id = callback.from_user.id
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await generate_main_menu(user_id)
    )
    await callback.answer()


@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data.startswith("time_point_"))
async def process_time_point(callback: types.CallbackQuery, state: FSMContext):
    time_str = callback.data.replace("time_point_", "")
    data = await state.get_data()
    selecting_mode = data.get('selecting_mode', 'start')
    availability_map = data.get('availability_map')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
    if availability_map:
        time_obj = datetime.strptime(time_str, "%H:%M").time()
        if time_obj in availability_map and not availability_map[time_obj]:
            await callback.answer(
                "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (–±–µ–∑ üîí)",
                show_alert=True
            )
            return

    if selecting_mode == 'start':
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª–æ
        await state.update_data(time_start=time_str)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –æ–Ω —Ä–∞–Ω—å—à–µ –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª–∞
        if data.get('time_end'):
            end_obj = datetime.strptime(data['time_end'], "%H:%M")
            start_obj = datetime.strptime(time_str, "%H:%M")
            if end_obj <= start_obj:
                await state.update_data(time_end=None)

        await callback.message.edit_text(
            f"üü¢ –í—ã–±—Ä–∞–Ω–æ –Ω–∞—á–∞–ª–æ: {time_str}\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–µ—Ü üî¥' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è\n"
            "–í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ (–±–µ–∑ üîí)",
            reply_markup=generate_time_range_keyboard_with_availability(
                selected_date=data.get('selected_date'),
                start_time=time_str,
                end_time=data.get('time_end'),
                availability_map=availability_map
            )
        )
    else:
        # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–µ—Ü
        if not data.get('time_start'):
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞!", show_alert=True)
            return

        start_obj = datetime.strptime(data['time_start'], "%H:%M")
        end_obj = datetime.strptime(time_str, "%H:%M")
        
        if end_obj <= start_obj:
            await callback.answer("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!", show_alert=True)
            return

        await state.update_data(time_end=time_str)

        await callback.message.edit_text(
            f"üìã –¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä:\n"
            f"üü¢ –ù–∞—á–∞–ª–æ: {data['time_start']}\n"
            f"üî¥ –ö–æ–Ω–µ—Ü: {time_str}\n\n"
            "–ï—Å–ª–∏ –≤—ã–±–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä–µ–º—è'\n"
            "–ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ",
            reply_markup=generate_time_range_keyboard_with_availability(
                selected_date=data.get('selected_date'),
                start_time=data['time_start'],
                end_time=time_str,
                availability_map=availability_map
            )
        )

    await callback.answer()

@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data.in_(["select_start_mode", "select_end_mode"]))
async def switch_selection_mode(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    availability_map = data.get('availability_map')

    if callback.data == "select_start_mode":
        await state.update_data(selecting_mode='start')
        message_text = "–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ù–ê–ß–ê–õ–ê –≤—Ä–µ–º–µ–Ω–∏ (–∑–µ–ª–µ–Ω—ã–π –º–∞—Ä–∫–µ—Ä)\n"
    else:
        await state.update_data(selecting_mode='end')
        message_text = "–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –û–ö–û–ù–ß–ê–ù–ò–Ø –≤—Ä–µ–º–µ–Ω–∏ (–∫—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä)\n"

    time_start = data.get('time_start')
    time_end = data.get('time_end')

    if time_start:
        message_text += f"–¢–µ–∫—É—â–µ–µ –Ω–∞—á–∞–ª–æ: {time_start}\n"
    if time_end:
        message_text += f"–¢–µ–∫—É—â–∏–π –∫–æ–Ω–µ—Ü: {time_end}\n"

    if availability_map:
        available_count = sum(1 for available in availability_map.values() if available)
        total_count = len(availability_map)
        message_text += f"–î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: {available_count}/{total_count}\n"
        message_text += "üîí - –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"

    if callback.data == "select_start_mode":
        message_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Ä–µ–º—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª–∞:"
    else:
        message_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Ä–µ–º—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è:"

    await callback.message.edit_text(
        message_text,
        reply_markup=generate_time_range_keyboard_with_availability(
            selected_date=data.get('selected_date'),
            start_time=time_start,
            end_time=time_end,
            availability_map=availability_map
        )
    )
    await callback.answer()


@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data == "confirm_time_range")
async def confirm_time_range(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ booking_type = "–¢–∏–ø1"
    data['booking_type'] = "–¢–∏–ø1"
    await state.update_data(booking_type="–¢–∏–ø1")

    subject = data.get('subject') if data.get('user_role') == 'student' else None
    user_id = callback.from_user.id
    date_str = data['selected_date'].strftime("%Y-%m-%d")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ - –Ω–µ—Ç –ª–∏ —É–∂–µ –±—Ä–æ–Ω–∏ –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
    if data.get('user_role') == 'student' and subject:
        if storage.has_booking_on_date(user_id, date_str, 'student', subject):
            await callback.answer(
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–æ–Ω—å –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {SUBJECTS.get(subject, subject)}!",
                show_alert=True
            )
            return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
    if data.get('user_role') == 'student':
        if storage.has_time_conflict(
            user_id=user_id,
            date=date_str,
            time_start=data['time_start'],
            time_end=data['time_end']
        ):
            await callback.answer(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–æ–Ω—å –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è! –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è.",
                show_alert=True
            )
            return
    else:
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö –∂–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        if has_teacher_booking_conflict(
            user_id=user_id,
            date=date_str,
            time_start=data['time_start'],
            time_end=data['time_end']
        ):
            await callback.answer(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–æ–Ω—å –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è!",
                show_alert=True
            )
            return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    required_fields = ['user_name', 'user_role', 'selected_date', 'time_start', 'time_end']
    for field in required_fields:
        if field not in data:
            await callback.answer(f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {field}", show_alert=True)
            return

    role_text = "—É—á–µ–Ω–∏–∫" if data['user_role'] == 'student' else "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
    
    if data['user_role'] == 'teacher':
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        subject_names = []
        for subj in data.get('subjects', []):
            subject_names.append(SUBJECTS.get(subj, f"–ü—Ä–µ–¥–º–µ—Ç {subj}"))
        subjects_text = ", ".join(subject_names)
    else:
        subjects_text = SUBJECTS.get(data.get('subject', ''), "–ù–µ —É–∫–∞–∑–∞–Ω")

    await callback.message.edit_text(
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
        f"–†–æ–ª—å: {role_text}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç(—ã): {subjects_text}\n"
        f"–¢–∏–ø: –¢–ò–ü1 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n"
        f"–î–∞—Ç–∞: {data['selected_date'].strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è: {data['time_start']} - {data['time_end']}",
        reply_markup=generate_confirmation()
    )
    await state.set_state(BookingStates.CONFIRMATION)
    await callback.answer()


@dp.callback_query(BookingStates.CONFIRMATION, F.data == "booking_confirm")
async def process_confirmation(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    data['booking_type'] = "–¢–∏–ø1"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –¥–µ–ª–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    is_parent = 'child_id' in data
    target_user_id = data['child_id'] if is_parent else callback.from_user.id
    target_user_name = data['child_name'] if is_parent else data['user_name']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏
    booking_data = {
        "user_id": target_user_id,
        "user_name": target_user_name,
        "user_role": data['user_role'],
        "booking_type": "–¢–∏–ø1",
        "date": data['selected_date'].strftime("%Y-%m-%d"),
        "start_time": data['time_start'],
        "end_time": data['time_end'],
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    if is_parent:
        booking_data["parent_id"] = callback.from_user.id
        booking_data["parent_name"] = storage.get_user_name(callback.from_user.id)
    
    if data['user_role'] == 'teacher':
        booking_data["subjects"] = data.get('subjects', [])
    else:
        booking_data["subject"] = data.get('subject', '')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω—å
    try:
        booking = storage.add_booking(booking_data)
        role_text = "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" if data['user_role'] == 'teacher' else "—É—á–µ–Ω–∏–∫–∞"
        
        if is_parent:
            role_text = f"—Ä–µ–±–µ–Ω–∫–∞ ({target_user_name})"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if data['user_role'] == 'teacher':
            subject_names = []
            for subj in data.get('subjects', []):
                subject_names.append(SUBJECTS.get(subj, f"–ü—Ä–µ–¥–º–µ—Ç {subj}"))
            subjects_text = f"–ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(subject_names)}"
        else:
            subjects_text = f"–ü—Ä–µ–¥–º–µ—Ç: {SUBJECTS.get(data.get('subject', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')}"
        
        message_text = (
            f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {role_text} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n"
            f"üìÖ –î–∞—Ç–∞: {data['selected_date'].strftime('%d.%m.%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {data['time_start']}-{data['time_end']}\n"
            f"{subjects_text}\n"
        )
        
        if is_parent:
            message_text += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ó–∞–ø–∏—Å–∞–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–º: {booking_data['parent_name']}"
        
        await callback.message.edit_text(message_text)
        
    except Exception as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏!")
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    await state.clear()


@dp.message(F.text == "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
@dp.message(Command("my_bookings"))
async def show_bookings(message: types.Message):
    keyboard = generate_booking_list(message.from_user.id)
    if not keyboard:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        return

    await message.answer("–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏):", reply_markup=keyboard)


@dp.message(Command("my_role"))
async def show_role(message: types.Message):
    roles = storage.get_user_roles(message.from_user.id)
    if roles:
        role_text = ", ".join(["–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" if role == "teacher" else "—É—á–µ–Ω–∏–∫" for role in roles])
        await message.answer(f"–í–∞—à–∏ —Ä–æ–ª–∏: {role_text}")
    else:
        await message.answer("–í–∞—à–∏ —Ä–æ–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å")
async def start_cancel_booking(message: types.Message):
    keyboard = generate_booking_list(message.from_user.id)
    if not keyboard:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω–∞:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("booking_info_"))
async def show_booking_info(callback: types.CallbackQuery):
    try:
        booking_id_str = callback.data.replace("booking_info_", "")
        if not booking_id_str:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
            return

        booking_id = int(booking_id_str)
        bookings = load_bookings()
        booking = next((b for b in bookings if b.get("id") == booking_id), None)

        if not booking:
            await callback.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        role_text = "üë®üéì –£—á–µ–Ω–∏–∫" if booking.get('user_role') == 'student' else "üë®üè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É
        booking_date = booking.get('date')
        if isinstance(booking_date, str):
            try:
                booking_date = datetime.strptime(booking_date, "%Y-%m-%d").strftime("%d.%m.%Y")
            except ValueError:
                booking_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        message_text = (
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:\n\n"
            f"üîπ {role_text}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ, –µ—Å–ª–∏ —ç—Ç–æ –±—Ä–æ–Ω—å —Ä–µ–±–µ–Ω–∫–∞
        if booking.get('parent_id'):
            parent_name = booking.get('parent_name', '–†–æ–¥–∏—Ç–µ–ª—å')
            message_text += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ó–∞–ø–∏—Å–∞–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–º: {parent_name}\n"
        
        message_text += (
            f"üë§ –ò–º—è: {booking.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {booking.get('start_time', '?')} - {booking.get('end_time', '?')}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
        if booking.get('user_role') == 'teacher':
            subjects = booking.get('subjects', [])
            subjects_text = ", ".join([SUBJECTS.get(subj, subj) for subj in subjects])
            message_text += f"üìö –ü—Ä–µ–¥–º–µ—Ç—ã: {subjects_text}\n"
        else:
            subject = booking.get('subject', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message_text += f"üìö –ü—Ä–µ–¥–º–µ—Ç: {SUBJECTS.get(subject, subject)}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        message_text += f"üè∑ –¢–∏–ø: {booking.get('booking_type', '–¢–∏–ø1')}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        await callback.message.edit_text(
            message_text,
            reply_markup=generate_booking_actions(booking_id)
        )
        await callback.answer()

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_booking_info: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith("cancel_booking_"))
async def cancel_booking(callback: types.CallbackQuery):
    booking_id = int(callback.data.replace("cancel_booking_", ""))
    if storage.cancel_booking(booking_id):
        await callback.message.edit_text(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID {booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    await callback.answer()

@dp.callback_query(BookingStates.SELECT_ROLE, F.data == "role_parent")
async def process_role_parent_selection(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–µ–π —Ä–æ–¥–∏—Ç–µ–ª—è
    children_ids = storage.get_parent_children(user_id)
    
    if not children_ids:
        await callback.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            show_alert=True
        )
        return
    
    await state.update_data(user_role='parent')
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞
    builder = InlineKeyboardBuilder()
    for child_id in children_ids:
        child_info = storage.get_child_info(child_id)
        child_name = child_info.get('user_name', f'–£—á–µ–Ω–∏–∫ {child_id}')
        builder.button(
            text=f"üë∂ {child_name}",
            callback_data=f"select_child_{child_id}"
        )
    
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_child_selection")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å —Ä–æ–¥–∏—Ç–µ–ª—è\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(BookingStates.PARENT_SELECT_CHILD)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞
@dp.callback_query(BookingStates.PARENT_SELECT_CHILD, F.data.startswith("select_child_"))
async def process_child_selection(callback: types.CallbackQuery, state: FSMContext):
    child_id = int(callback.data.replace("select_child_", ""))
    child_info = storage.get_child_info(child_id)
    
    if not child_info:
        await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–±–µ–Ω–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    await state.update_data(
        child_id=child_id,
        child_name=child_info.get('user_name', ''),
        user_role='student'  # –î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª—å —É—á–µ–Ω–∏–∫–∞
    )
    
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω —Ä–µ–±–µ–Ω–æ–∫: {child_info.get('user_name', '')}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:",
        reply_markup=generate_subjects_keyboard()
    )
    await state.set_state(BookingStates.SELECT_SUBJECT)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞
@dp.callback_query(BookingStates.PARENT_SELECT_CHILD, F.data == "cancel_child_selection")
async def cancel_child_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –í—ã–±–æ—Ä —Ä–µ–±–µ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω")
    await state.clear()
    
    user_id = callback.from_user.id
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await generate_main_menu(user_id)
    )
    await callback.answer()


@dp.callback_query(F.data.in_(["back_to_menu", "back_to_bookings"]))
async def back_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    menu = await generate_main_menu(user_id)
    
    if callback.data == "back_to_menu":
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=None
        )
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=menu
        )
    else:
        keyboard = generate_booking_list(user_id)
        await callback.message.edit_text(
            "–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
    await callback.answer()


async def cleanup_old_bookings():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    while True:
        try:
            bookings = storage.load()
            storage.save(bookings)  # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            logger.info("Cleanup of old bookings completed")
            await asyncio.sleep(6 * 60 * 60)  # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        except Exception as e:
            logger.error(f"Error in cleanup_old_bookings: {e}")
            await asyncio.sleep(60)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ


async def sync_with_gsheets():
    """–§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets"""
    while True:
        try:
            if hasattr(storage, 'gsheets') and storage.gsheets:
                bookings = storage.load()
                success = storage.gsheets.update_all_sheets(bookings)
                if success:
                    logger.info("–§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google Sheets")
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            await asyncio.sleep(600)  # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ


async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if gsheets:
        try:
            worksheet = gsheets._get_or_create_users_worksheet()
            records = worksheet.get_all_records()
            
            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ user_id
            unique_users = {}
            duplicates = []
            
            for i, record in enumerate(records, start=2):
                user_id = str(record.get("user_id"))
                if user_id in unique_users:
                    duplicates.append(i)
                else:
                    unique_users[user_id] = record
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (—Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞–ª–∏—Å—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫)
            for row_num in sorted(duplicates, reverse=True):
                worksheet.delete_rows(row_num)
            
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(duplicates)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")


async def sync_from_gsheets_background(storage):
    """–§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Google Sheets –≤ JSON"""
    while True:
        try:
            if hasattr(storage, 'gsheets') and storage.gsheets:
                success = storage.gsheets.sync_from_gsheets_to_json(storage)
                if success:
                    logger.info("–§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Google Sheets –≤ JSON –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏–∑ Google Sheets")
            await asyncio.sleep(60)  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ Google Sheets: {e}")
            await asyncio.sleep(300)


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await on_startup()

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    asyncio.create_task(cleanup_old_bookings())
    asyncio.create_task(sync_with_gsheets())
    asyncio.create_task(sync_from_gsheets_background(storage))  # –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    logger.info("Starting bot...")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")