import asyncio
import json
import os
from datetime import datetime, timedelta, date
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8413883420:AAGL9-27CcgEUsaCbP-PJ8ukuh1u1x3YPbQ"
BOOKINGS_FILE = "bookings.json"
BOOKING_TYPES = ["–¢–∏–ø1", "–¢–∏–ø2", "–¢–∏–ø3", "–¢–∏–ø4"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_data = {}
booking_id_counter = 1

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è")],
        [KeyboardButton(text="üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å")]
    ],
    resize_keyboard=True
)

def generate_booking_types():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    builder = InlineKeyboardBuilder()
    for booking_type in BOOKING_TYPES:
        builder.add(types.InlineKeyboardButton(
            text=booking_type,
            callback_data=f"booking_type_{booking_type}"
        ))
    builder.adjust(2)
    return builder.as_markup()

def merge_adjacent_bookings(bookings):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–º–µ–∂–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    if not bookings:
        return bookings
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É, –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    sorted_bookings = sorted(bookings, key=lambda x: (
        x['booking_type'],
        x['date'],
        x['time_start']
    ))
    
    merged = []
    current = sorted_bookings[0]
    
    for next_booking in sorted_bookings[1:]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:
        # 1. –û–¥–∏–Ω —Ç–∏–ø
        # 2. –û–¥–Ω–∞ –¥–∞—Ç–∞
        # 3. –í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ = –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ
        if (current['booking_type'] == next_booking['booking_type'] and
            current['date'] == next_booking['date'] and
            current['time_end'] == next_booking['time_start']):
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            current = {
                **current,
                'time_end': next_booking['time_end'],
                'id': min(current['id'], next_booking['id']),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID
                'merged': True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ
            }
        else:
            merged.append(current)
            current = next_booking
    
    merged.append(current)
    return merged

def load_bookings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–º–µ–∂–Ω—ã–µ –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏–µ"""
    if not os.path.exists(BOOKINGS_FILE):
        return []
    
    with open(BOOKINGS_FILE, "r", encoding="utf-8") as f:
        try:
            data = json.load(f)
            valid_bookings = []
            current_time = datetime.now()
            
            for booking in data:
                if 'date' not in booking:
                    continue
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    if isinstance(booking['date'], str):
                        booking_date = datetime.strptime(booking['date'], "%Y-%m-%d").date()
                    else:
                        continue
                    
                    time_end = datetime.strptime(booking['time_end'], "%H:%M").time()
                    booking_datetime = datetime.combine(booking_date, time_end)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    if booking_datetime < current_time:
                        continue
                        
                    booking['date'] = booking_date
                    valid_bookings.append(booking)
                    
                except ValueError:
                    continue
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–º–µ–∂–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            valid_bookings = merge_adjacent_bookings(valid_bookings)
            
            # –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            if len(valid_bookings) != len(data):
                save_bookings(valid_bookings)
                
            return valid_bookings
            
        except (json.JSONDecodeError, KeyError, ValueError):
            return []

def save_bookings(bookings_list):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª, —Ñ–∏–ª—å—Ç—Ä—É—è –ø—Ä–æ—à–µ–¥—à–∏–µ"""
    current_time = datetime.now()
    bookings_to_save = []
    
    for booking in bookings_list:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if isinstance(booking['date'], date):
                booking_date = booking['date']
            elif isinstance(booking['date'], str):
                booking_date = datetime.strptime(booking['date'], "%Y-%m-%d").date()
            else:
                continue
                
            time_end = datetime.strptime(booking['time_end'], "%H:%M").time()
            booking_datetime = datetime.combine(booking_date, time_end)
            
            if booking_datetime >= current_time:
                booking_copy = booking.copy()
                if isinstance(booking_copy['date'], date):
                    booking_copy['date'] = booking_copy['date'].strftime("%Y-%m-%d")
                bookings_to_save.append(booking_copy)
                
        except (ValueError, KeyError):
            continue
    
    with open(BOOKINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(bookings_to_save, f, ensure_ascii=False, indent=2)

def get_next_booking_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π ID –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global booking_id_counter
    bookings = load_bookings()
    if bookings:
        booking_id_counter = max(b["id"] for b in bookings) + 1
    else:
        booking_id_counter = 1
    return booking_id_counter

def has_booking_conflict(user_id, booking_type, date, time_start, time_end, exclude_id=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞"""
    bookings = load_bookings()
    for booking in bookings:
        if (booking['user_id'] == user_id and 
            booking['booking_type'] == booking_type and 
            booking['date'] == date):
            
            if exclude_id and booking['id'] == exclude_id:
                continue
            
            def time_to_minutes(t):
                h, m = map(int, t.split(':'))
                return h * 60 + m
            
            new_start = time_to_minutes(time_start)
            new_end = time_to_minutes(time_end)
            existing_start = time_to_minutes(booking['time_start'])
            existing_end = time_to_minutes(booking['time_end'])
            
            if not (new_end <= existing_start or new_start >= existing_end):
                return True
    return False

def generate_calendar(year=None, month=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
    now = datetime.now()
    year = year or now.year
    month = month or now.month

    builder = InlineKeyboardBuilder()
    
    month_name = datetime(year, month, 1).strftime("%B %Y")
    builder.row(types.InlineKeyboardButton(text=month_name, callback_data="ignore"))

    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    builder.row(*[types.InlineKeyboardButton(text=day, callback_data="ignore") for day in week_days])

    first_day = datetime(year, month, 1)
    start_weekday = first_day.weekday()
    days_in_month = (datetime(year, month + 1, 1) - first_day).days

    buttons = []
    for _ in range(start_weekday):
        buttons.append(types.InlineKeyboardButton(text=" ", callback_data="ignore"))

    for day in range(1, days_in_month + 1):
        date = datetime(year, month, day)
        if date.date() < datetime.now().date():
            buttons.append(types.InlineKeyboardButton(text=" ", callback_data="ignore"))
        else:
            buttons.append(types.InlineKeyboardButton(
                text=str(day), 
                callback_data=f"calendar_day_{year}-{month}-{day}"
            ))
        if (day + start_weekday) % 7 == 0 or day == days_in_month:
            builder.row(*buttons)
            buttons = []

    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1

    builder.row(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"calendar_change_{prev_year}-{prev_month}"),
        types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"calendar_change_{next_year}-{next_month}"),
    )

    return builder.as_markup()

def generate_time_slots(selected_date):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()
    
    start_time = datetime.strptime("09:00", "%H:%M")
    end_time = datetime.strptime("20:00", "%H:%M")
    current_time = start_time
    
    while current_time <= end_time:
        time_str = current_time.strftime("%H:%M")
        builder.add(types.InlineKeyboardButton(
            text=time_str,
            callback_data=f"time_slot_{time_str}"
        ))
        current_time += timedelta(minutes=30)
    
    builder.adjust(4)
    builder.row(types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏",
        callback_data="cancel_time_selection"
    ))
    return builder.as_markup()

def generate_confirmation():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="booking_confirm"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="booking_cancel"),
    )
    return builder.as_markup()

def generate_booking_list(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    bookings = load_bookings()
    user_bookings = [b for b in bookings if b["user_id"] == user_id]
    
    if not user_bookings:
        return None
    
    def get_sort_key(booking):
        booking_date = booking['date']
        if isinstance(booking_date, str):
            booking_date = datetime.strptime(booking_date, "%Y-%m-%d").date()
        time_obj = datetime.strptime(booking['time_start'], "%H:%M").time()
        return (booking_date, time_obj)
    
    user_bookings.sort(key=get_sort_key)
    
    builder = InlineKeyboardBuilder()
    for booking in user_bookings:
        booking_date = booking['date']
        if isinstance(booking_date, str):
            booking_date = datetime.strptime(booking_date, "%Y-%m-%d").date()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É, –µ—Å–ª–∏ –±—Ä–æ–Ω—å –±—ã–ª–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞
        merged_note = " (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ)" if booking.get('merged', False) else ""
        builder.row(types.InlineKeyboardButton(
            text=f"{booking['booking_type']}{merged_note} {booking_date.strftime('%d.%m.%Y')} {booking['time_start']}-{booking['time_end']} (ID: {booking['id']})",
            callback_data=f"booking_info_{booking['id']}"
        ))
    
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_menu"
    ))
    return builder.as_markup()

def generate_booking_actions(booking_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"cancel_booking_{booking_id}"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_bookings"),
    )
    return builder.as_markup()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=main_menu
    )

@dp.message(lambda message: message.text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è")
async def start_booking(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=generate_booking_types())

@dp.message(lambda message: message.text == "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
async def show_bookings(message: types.Message):
    keyboard = generate_booking_list(message.from_user.id)
    if not keyboard:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        return
    
    await message.answer("–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏):", reply_markup=keyboard)

@dp.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å")
async def start_cancel_booking(message: types.Message):
    keyboard = generate_booking_list(message.from_user.id)
    if not keyboard:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("booking_type_"))
async def process_booking_type(callback: types.CallbackQuery):
    booking_type = callback.data.replace("booking_type_", "")
    user_data[callback.from_user.id] = {
        "booking_type": booking_type,
        "state": "selecting_date"
    }
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø: {booking_type}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=generate_calendar()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("calendar_"))
async def process_calendar(callback: types.CallbackQuery):
    data = callback.data
    
    if data.startswith("calendar_day_"):
        date_str = data.replace("calendar_day_", "")
        year, month, day = map(int, date_str.split("-"))
        selected_date = datetime(year, month, day).date()
        
        user_data[callback.from_user.id].update({
            "selected_date": selected_date,
            "state": "selecting_start_time"
        })
        
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {day}.{month}.{year}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
            reply_markup=generate_time_slots(selected_date)
        )
        await callback.answer()
        
    elif data.startswith("calendar_change_"):
        date_str = data.replace("calendar_change_", "")
        year, month = map(int, date_str.split("-"))
        await callback.message.edit_reply_markup(reply_markup=generate_calendar(year, month))
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("time_slot_"))
async def process_time_slot(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    time_str = callback.data.replace("time_slot_", "")
    
    if user_data.get(user_id, {}).get("state") == "selecting_start_time":
        user_data[user_id].update({
            "time_start": time_str,
            "state": "selecting_end_time"
        })
        await callback.message.edit_text(
            f"–ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=generate_time_slots(user_data[user_id]["selected_date"])
        )
    else:
        time_start = datetime.strptime(user_data[user_id]["time_start"], "%H:%M")
        time_end = datetime.strptime(time_str, "%H:%M")
        
        if time_end <= time_start:
            await callback.answer("–ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if has_booking_conflict(
            user_id=user_id,
            booking_type=user_data[user_id]["booking_type"],
            date=user_data[user_id]["selected_date"],
            time_start=user_data[user_id]["time_start"],
            time_end=time_str
        ):
            await callback.answer(
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–æ–Ω—å —Ç–∏–ø–∞ '{user_data[user_id]['booking_type']}' –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è!",
                show_alert=True
            )
            return
        
        user_data[user_id].update({
            "time_end": time_str,
            "state": "confirmation"
        })
        
        await callback.message.edit_text(
            f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
            f"–¢–∏–ø: {user_data[user_id]['booking_type']}\n"
            f"–î–∞—Ç–∞: {user_data[user_id]['selected_date'].strftime('%d.%m.%Y')}\n"
            f"–í—Ä–µ–º—è: {user_data[user_id]['time_start']} - {time_str}",
            reply_markup=generate_confirmation()
        )
    
    await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel_time_selection")
async def cancel_time_selection(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id in user_data:
        del user_data[user_id]
    
    await callback.message.edit_text(
        "–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω—ë–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=None
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data in ["booking_confirm", "booking_cancel"])
async def process_confirmation(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    if callback.data == "booking_confirm":
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if has_booking_conflict(
            user_id=user_id,
            booking_type=user_data[user_id]["booking_type"],
            date=user_data[user_id]["selected_date"],
            time_start=user_data[user_id]["time_start"],
            time_end=user_data[user_id]["time_end"]
        ):
            await callback.message.edit_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —Å—Ç–∞–ª–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
            )
            user_data.pop(user_id, None)
            await callback.answer()
            return
        
        booking_id = get_next_booking_id()
        booking = {
            "id": booking_id,
            "booking_type": user_data[user_id]["booking_type"],
            "date": user_data[user_id]["selected_date"],
            "time_start": user_data[user_id]["time_start"],
            "time_end": user_data[user_id]["time_end"],
            "user_id": user_id,
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        bookings = load_bookings()
        bookings.append(booking)
        save_bookings(bookings)
        
        await callback.message.edit_text(
            "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n"
            f"–¢–∏–ø: {booking['booking_type']}\n"
            f"ID: {booking['id']}\n"
            f"–î–∞—Ç–∞: {booking['date'].strftime('%d.%m.%Y')}\n"
            f"–í—Ä–µ–º—è: {booking['time_start']} - {booking['time_end']}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é",
        )
    else:
        await callback.message.edit_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    user_data.pop(user_id, None)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("booking_info_"))
async def show_booking_info(callback: types.CallbackQuery):
    booking_id = int(callback.data.replace("booking_info_", ""))
    bookings = load_bookings()
    booking = next((b for b in bookings if b["id"] == booking_id), None)
    
    if not booking:
        await callback.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    booking_date = booking['date']
    if isinstance(booking_date, str):
        booking_date = datetime.strptime(booking_date, "%Y-%m-%d").date()
    
    await callback.message.edit_text(
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:\n\n"
        f"–¢–∏–ø: {booking['booking_type']}\n"
        f"ID: {booking['id']}\n"
        f"–î–∞—Ç–∞: {booking_date.strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è: {booking['time_start']} - {booking['time_end']}\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {booking.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
        reply_markup=generate_booking_actions(booking['id'])
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("cancel_booking_"))
async def cancel_booking(callback: types.CallbackQuery):
    booking_id = int(callback.data.replace("cancel_booking_", ""))
    bookings = load_bookings()
    booking = next((b for b in bookings if b["id"] == booking_id), None)
    
    if not booking:
        await callback.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    if booking["user_id"] != callback.from_user.id:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —á—É–∂–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    updated_bookings = [b for b in bookings if b["id"] != booking_id]
    save_bookings(updated_bookings)
    
    booking_date = booking['date']
    if isinstance(booking_date, str):
        booking_date = datetime.strptime(booking_date, "%Y-%m-%d").date()
    
    await callback.message.edit_text(
        f"‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n"
        f"–¢–∏–ø: {booking['booking_type']}\n"
        f"ID: {booking['id']}\n"
        f"–î–∞—Ç–∞: {booking_date.strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è: {booking['time_start']} - {booking['time_end']}"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data in ["back_to_menu", "back_to_bookings"])
async def back_handler(callback: types.CallbackQuery):
    if callback.data == "back_to_menu":
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=None
        )
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu
        )
    else:
        keyboard = generate_booking_list(callback.from_user.id)
        await callback.message.edit_text(
            "–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
    await callback.answer()

async def cleanup_old_bookings():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    while True:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º - —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        bookings = load_bookings()
        save_bookings(bookings)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        await asyncio.sleep(6 * 60 * 60)

async def main():
    asyncio.create_task(cleanup_old_bookings())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())