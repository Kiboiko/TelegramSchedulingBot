import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from storage import JSONStorage

load_dotenv()
bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
dp = Dispatcher()
storage = JSONStorage()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
user_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã"), KeyboardButton(text="üóì –ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
        [KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç")],
        [KeyboardButton(text="üìä –í—Å–µ –∑–∞–ø–∏—Å–∏")]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è.",
        reply_markup=user_keyboard
    )

@dp.message(Command("help"))
@dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def help(message: types.Message):
    text = (
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/slots - –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã\n"
        "/book <ID> - –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å\n"
        "/cancel <ID> - –û—Ç–º–µ–Ω–∏—Ç—å\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!"
    )
    await message.answer(text)

@dp.message(Command("slots"))
@dp.message(F.text == "üìÖ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã")
async def show_slots(message: types.Message):
    slots = storage.get_available_slots()
    if not slots:
        await message.answer("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        return
    text = "–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:\n" + "\n".join(
        f"{slot_id}: {info['date']} {info['time']}"
        for slot_id, info in slots.items()
    )
    await message.answer(text)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
@dp.message(Command("add_slot"))
async def add_slot_command(message: types.Message):
    if message.from_user.id != YOUR_ADMIN_ID:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
        return
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú",
        reply_markup=admin_keyboard
    )

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç")
async def add_slot_button(message: types.Message):
    if message.from_user.id != YOUR_ADMIN_ID:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ (–∞–¥–º–∏–Ω)
@dp.message(F.text.regexp(r"\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}"))
async def process_add_slot(message: types.Message):
    if message.from_user.id != YOUR_ADMIN_ID:
        return
    date, time = message.text.split()
    slot_id = storage.add_slot(date, time)
    await message.answer(f"‚úÖ –°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω (ID: {slot_id})")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())