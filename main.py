import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

bot = Bot(token="7807559906:AAFA0bsnb_Y6m3JHKIeWk2hZ3_ytMvnC-as")
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}
bookings = []  # –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
booking_id_counter = 1  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è")],
        [KeyboardButton(text="üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å")]
    ],
    resize_keyboard=True
)

def generate_calendar(year=None, month=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
    now = datetime.now()
    year = year or now.year
    month = month or now.month

    builder = InlineKeyboardBuilder()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    month_name = datetime(year, month, 1).strftime("%B %Y")
    builder.row(types.InlineKeyboardButton(text=month_name, callback_data="ignore"))

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    builder.row(*[types.InlineKeyboardButton(text=day, callback_data="ignore") for day in week_days])

    # –î–∞—Ç—ã
    first_day = datetime(year, month, 1)
    start_weekday = first_day.weekday()
    days_in_month = (datetime(year, month + 1, 1) - first_day).days

    buttons = []
    for _ in range(start_weekday):
        buttons.append(types.InlineKeyboardButton(text=" ", callback_data="ignore"))

    for day in range(1, days_in_month + 1):
        date = datetime(year, month, day)
        if date.date() < datetime.now().date():
            buttons.append(types.InlineKeyboardButton(text=" ", callback_data="ignore"))
        else:
            buttons.append(types.InlineKeyboardButton(
                text=str(day), 
                callback_data=f"calendar_day_{year}-{month}-{day}"
            ))
        if (day + start_weekday) % 7 == 0 or day == days_in_month:
            builder.row(*buttons)
            buttons = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1

    builder.row(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"calendar_change_{prev_year}-{prev_month}"),
        types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"calendar_change_{next_year}-{next_month}"),
    )

    return builder.as_markup()

def generate_time_slots(selected_date):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    builder = InlineKeyboardBuilder()
    
    start_time = datetime.strptime("09:00", "%H:%M")
    end_time = datetime.strptime("20:00", "%H:%M")
    current_time = start_time
    
    while current_time <= end_time:
        time_str = current_time.strftime("%H:%M")
        builder.add(types.InlineKeyboardButton(
            text=time_str,
            callback_data=f"time_slot_{time_str}"
        ))
        current_time += timedelta(minutes=30)
    
    builder.adjust(4)
    return builder.as_markup()

def generate_confirmation():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="booking_confirm"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="booking_cancel"),
    )
    return builder.as_markup()

def generate_booking_list(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_bookings = [b for b in bookings if b["user_id"] == user_id]
    if not user_bookings:
        return None
    
    builder = InlineKeyboardBuilder()
    for booking in user_bookings:
        builder.row(types.InlineKeyboardButton(
            text=f"{booking['date'].strftime('%d.%m.%Y')} {booking['time_start']}-{booking['time_end']} (ID: {booking['id']})",
            callback_data=f"booking_info_{booking['id']}"
        ))
    
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_menu"
    ))
    return builder.as_markup()

def generate_booking_actions(booking_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"cancel_booking_{booking_id}"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_bookings"),
    )
    return builder.as_markup()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=main_menu
    )

@dp.message(lambda message: message.text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è")
async def start_booking(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=generate_calendar())

@dp.message(lambda message: message.text == "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
async def show_bookings(message: types.Message):
    keyboard = generate_booking_list(message.from_user.id)
    if not keyboard:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        return
    
    await message.answer("–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

@dp.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å")
async def start_cancel_booking(message: types.Message):
    keyboard = generate_booking_list(message.from_user.id)
    if not keyboard:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("calendar_"))
async def process_calendar(callback: types.CallbackQuery):
    data = callback.data
    
    if data.startswith("calendar_day_"):
        date_str = data.replace("calendar_day_", "")
        year, month, day = map(int, date_str.split("-"))
        selected_date = datetime(year, month, day).date()
        
        user_data[callback.from_user.id] = {
            "selected_date": selected_date,
            "state": "selecting_start_time"
        }
        
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {day}.{month}.{year}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
            reply_markup=generate_time_slots(selected_date)
        )
        await callback.answer()
        
    elif data.startswith("calendar_change_"):
        date_str = data.replace("calendar_change_", "")
        year, month = map(int, date_str.split("-"))
        await callback.message.edit_reply_markup(reply_markup=generate_calendar(year, month))
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("time_slot_"))
async def process_time_slot(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    time_str = callback.data.replace("time_slot_", "")
    
    if user_data.get(user_id, {}).get("state") == "selecting_start_time":
        user_data[user_id].update({
            "time_start": time_str,
            "state": "selecting_end_time"
        })
        await callback.message.edit_text(
            f"–ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=generate_time_slots(user_data[user_id]["selected_date"])
        )
    else:
        time_start = datetime.strptime(user_data[user_id]["time_start"], "%H:%M")
        time_end = datetime.strptime(time_str, "%H:%M")
        
        if time_end <= time_start:
            await callback.answer("–ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ!", show_alert=True)
            return
        
        user_data[user_id].update({
            "time_end": time_str,
            "state": "confirmation"
        })
        
        await callback.message.edit_text(
            f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
            f"–î–∞—Ç–∞: {user_data[user_id]['selected_date'].strftime('%d.%m.%Y')}\n"
            f"–í—Ä–µ–º—è: {user_data[user_id]['time_start']} - {time_str}",
            reply_markup=generate_confirmation()
        )
    
    await callback.answer()

@dp.callback_query(lambda c: c.data in ["booking_confirm", "booking_cancel"])
async def process_confirmation(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    if callback.data == "booking_confirm":
        global booking_id_counter
        booking = {
            "id": booking_id_counter,
            "date": user_data[user_id]["selected_date"],
            "time_start": user_data[user_id]["time_start"],
            "time_end": user_data[user_id]["time_end"],
            "user_id": user_id
        }
        bookings.append(booking)
        booking_id_counter += 1
        
        await callback.message.edit_text(
            "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n"
            f"ID: {booking['id']}\n"
            f"–î–∞—Ç–∞: {booking['date'].strftime('%d.%m.%Y')}\n"
            f"–í—Ä–µ–º—è: {booking['time_start']} - {booking['time_end']}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é",
        )
    else:
        await callback.message.edit_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    user_data.pop(user_id, None)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("booking_info_"))
async def show_booking_info(callback: types.CallbackQuery):
    booking_id = int(callback.data.replace("booking_info_", ""))
    booking = next((b for b in bookings if b["id"] == booking_id), None)
    
    if not booking:
        await callback.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:\n\n"
        f"ID: {booking['id']}\n"
        f"–î–∞—Ç–∞: {booking['date'].strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è: {booking['time_start']} - {booking['time_end']}",
        reply_markup=generate_booking_actions(booking['id'])
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("cancel_booking_"))
async def cancel_booking(callback: types.CallbackQuery):
    booking_id = int(callback.data.replace("cancel_booking_", ""))
    booking = next((b for b in bookings if b["id"] == booking_id), None)
    
    if not booking:
        await callback.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    if booking["user_id"] != callback.from_user.id:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —á—É–∂–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", show_alert=True)
        return
    
    bookings.remove(booking)
    await callback.message.edit_text(
        f"‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID {booking_id} –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n"
        f"–î–∞—Ç–∞: {booking['date'].strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è: {booking['time_start']} - {booking['time_end']}"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data in ["back_to_menu", "back_to_bookings"])
async def back_handler(callback: types.CallbackQuery):
    if callback.data == "back_to_menu":
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=None
        )
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu
        )
    else:
        keyboard = generate_booking_list(callback.from_user.id)
        await callback.message.edit_text(
            "–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


# import os
# from aiogram import Bot, Dispatcher, types, F
# from aiogram.filters import Command
# from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
# from dotenv import load_dotenv
# from storage import JSONStorage
#
# load_dotenv()
# bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
# dp = Dispatcher()
# storage = JSONStorage()
#
# # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# user_keyboard = ReplyKeyboardMarkup(
#     keyboard=[
#         [KeyboardButton(text="üìÖ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã"), KeyboardButton(text="üóì –ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
#         [KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")]
#     ],
#     resize_keyboard=True
# )
#
# admin_keyboard = ReplyKeyboardMarkup(
#     keyboard=[
#         [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç")],
#         [KeyboardButton(text="üìä –í—Å–µ –∑–∞–ø–∏—Å–∏")]
#     ],
#     resize_keyboard=True
# )
#
# # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
# @dp.message(Command("start"))
# async def start(message: types.Message):
#     await message.answer(
#         "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è.",
#         reply_markup=user_keyboard
#     )
#
# @dp.message(Command("help"))
# @dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
# async def help(message: types.Message):
#     text = (
#         "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
#         "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
#         "/help - –°–ø—Ä–∞–≤–∫–∞\n"
#         "/slots - –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã\n"
#         "/book <ID> - –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å\n"
#         "/cancel <ID> - –û—Ç–º–µ–Ω–∏—Ç—å\n\n"
#         "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!"
#     )
#     await message.answer(text)
#
# @dp.message(Command("slots"))
# @dp.message(F.text == "üìÖ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã")
# async def show_slots(message: types.Message):
#     slots = storage.get_available_slots()
#     if not slots:
#         await message.answer("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
#         return
#     text = "–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:\n" + "\n".join(
#         f"{slot_id}: {info['date']} {info['time']}"
#         for slot_id, info in slots.items()
#     )
#     await message.answer(text)
#
# # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
# @dp.message(Command("add_slot"))
# async def add_slot_command(message: types.Message):
#     if message.from_user.id != YOUR_ADMIN_ID:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
#         return
#     await message.answer(
#         "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú",
#         reply_markup=admin_keyboard
#     )
#
# @dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç")
# async def add_slot_button(message: types.Message):
#     if message.from_user.id != YOUR_ADMIN_ID:
#         return
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ (–∞–¥–º–∏–Ω)
# @dp.message(F.text.regexp(r"\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}"))
# async def process_add_slot(message: types.Message):
#     if message.from_user.id != YOUR_ADMIN_ID:
#         return
#     date, time = message.text.split()
#     slot_id = storage.add_slot(date, time)
#     await message.answer(f"‚úÖ –°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω (ID: {slot_id})")
#
# # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# async def main():
#     await dp.start_polling(bot)
#
# if __name__ == "__main__":
#     import asyncio
#     asyncio.run(main())

