import asyncio
import json
import os
import logging
from datetime import datetime, timedelta, date
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import threading
from gsheets_manager import GoogleSheetsManager
from storage import JSONStorage
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
BOOKINGS_FILE = "bookings.json"

BOOKING_TYPES = ["–¢–∏–ø1"]
SUBJECTS = {
    "1": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    "2": "–§–∏–∑–∏–∫–∞",
    "3": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "4": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"
}
ADMIN_IDS = [973231400, 1180878673]
USER_COMMANDS = [
    types.BotCommand(command="book", description="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è"),
    types.BotCommand(command="my_bookings", description="üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"),
    types.BotCommand(command="my_role", description="üë§ –ú–æ—è —Ä–æ–ª—å"),
    types.BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å")
]

ADMIN_COMMANDS = USER_COMMANDS + [
    types.BotCommand(command="schedule", description="üìä –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
]


class BookingStates(StatesGroup):
    SELECT_ROLE = State()
    INPUT_NAME = State()
    TEACHER_SUBJECTS = State()
    SELECT_SUBJECT = State()
    SELECT_DATE = State()
    SELECT_TIME_RANGE = State()  # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    CONFIRMATION = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
storage = JSONStorage(file_path=BOOKINGS_FILE)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
try:
    gsheets = GoogleSheetsManager(
        credentials_file='credentials.json',
        spreadsheet_id='1r1MU8k8umwHx_E4Z-jFHRJ-kdwC43Jw0nwpVeH7T1GU'
    )
    gsheets.connect()
    storage.set_gsheets_manager(gsheets)
    logger.info("Google Sheets integration initialized successfully")
except Exception as e:
    logger.error(f"Google Sheets initialization error: {e}")
    gsheets = None


def generate_booking_types():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    builder = InlineKeyboardBuilder()
    for booking_type in BOOKING_TYPES:
        builder.add(types.InlineKeyboardButton(
            text=booking_type,
            callback_data=f"booking_type_{booking_type}"
        ))
    builder.adjust(2)
    return builder.as_markup()


def merge_adjacent_bookings(bookings):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–º–µ–∂–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    if not bookings:
        return bookings

    sorted_bookings = sorted(bookings, key=lambda x: (
        x.get('booking_type', ''),
        x.get('date', ''),
        x.get('start_time', '')
    ))

    merged = []
    current = sorted_bookings[0]

    for next_booking in sorted_bookings[1:]:
        if (current.get('booking_type') == next_booking.get('booking_type') and
                current.get('date') == next_booking.get('date') and
                current.get('end_time') == next_booking.get('start_time')):

            current = {
                **current,
                'end_time': next_booking.get('end_time'),
                'id': min(current.get('id', 0), next_booking.get('id', 0)),
                'merged': True
            }
        else:
            merged.append(current)
            current = next_booking

    merged.append(current)
    return merged


def load_bookings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–º–µ–∂–Ω—ã–µ –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏–µ"""
    data = storage.load()
    valid_bookings = []
    current_time = datetime.now()

    for booking in data:
        if 'date' not in booking:
            continue

        try:
            if isinstance(booking['date'], str):
                booking_date = datetime.strptime(booking['date'], "%Y-%m-%d").date()
            else:
                continue

            time_end = datetime.strptime(booking.get('end_time', "00:00"), "%H:%M").time()
            booking_datetime = datetime.combine(booking_date, time_end)

            if booking_datetime < current_time:
                continue

            booking['date'] = booking_date
            valid_bookings.append(booking)

        except ValueError:
            continue

    valid_bookings = merge_adjacent_bookings(valid_bookings)
    return valid_bookings


def has_booking_conflict(user_id, date, time_start, time_end, subject=None, exclude_id=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤"""
    bookings = load_bookings()
    for booking in bookings:
        if (booking.get('user_id') == user_id and
            booking.get('date') == date):
            
            # –î–ª—è —É—á–µ–Ω–∏–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ –∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            if booking.get('user_role') == 'student' and subject:
                if booking.get('subject') != subject:
                    continue
                    
            if exclude_id and booking.get('id') == exclude_id:
                continue

            def time_to_minutes(t):
                h, m = map(int, t.split(':'))
                return h * 60 + m

            new_start = time_to_minutes(time_start)
            new_end = time_to_minutes(time_end)
            existing_start = time_to_minutes(booking.get('start_time', '00:00'))
            existing_end = time_to_minutes(booking.get('end_time', '00:00'))

            if not (new_end <= existing_start or new_start >= existing_end):
                return True
    return False


def generate_calendar(year=None, month=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤"""
    now = datetime.now()
    if year is None:
        year = now.year
    if month is None:
        month = now.month

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É (1 —Å–µ–Ω—Ç—è–±—Ä—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞)
    min_date = datetime(year=now.year, month=9, day=1).date()
    if now.date() > min_date:
        min_date = now.date()

    builder = InlineKeyboardBuilder()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    month_name = datetime(year, month, 1).strftime("%B %Y")
    builder.row(types.InlineKeyboardButton(
        text=month_name, 
        callback_data="ignore_month_header"
    ))

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    builder.row(*[
        types.InlineKeyboardButton(text=day, callback_data="ignore_weekday") 
        for day in week_days
    ])

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
    first_day = datetime(year, month, 1)
    start_weekday = first_day.weekday()  # 0-6 (–ø–Ω-–≤—Å)
    days_in_month = (datetime(year, month + 1, 1) - first_day).days if month < 12 else 31

    buttons = []
    # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for _ in range(start_weekday):
        buttons.append(types.InlineKeyboardButton(
            text=" ", 
            callback_data="ignore_empty_day"
        ))

    # –ö–Ω–æ–ø–∫–∏ –¥–Ω–µ–π —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for day in range(1, days_in_month + 1):
        current_date = datetime(year, month, day).date()
        if current_date < min_date:
            buttons.append(types.InlineKeyboardButton(
                text=" ", 
                callback_data="ignore_past_day"
            ))
        else:
            buttons.append(types.InlineKeyboardButton(
                text=str(day),
                callback_data=f"calendar_day_{year}-{month}-{day}"
            ))

        # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
        if (day + start_weekday) % 7 == 0 or day == days_in_month:
            builder.row(*buttons)
            buttons = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    show_prev = datetime(prev_year, prev_month, 1).date() >= min_date

    nav_buttons = []
    if show_prev:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è", 
            callback_data=f"calendar_change_{prev_year}-{prev_month}"
        ))
    else:
        nav_buttons.append(types.InlineKeyboardButton(
            text=" ", 
            callback_data="ignore_prev_disabled"
        ))

    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–≤–ø–µ—Ä–µ–¥"
    nav_buttons.append(types.InlineKeyboardButton(
        text="‚û°Ô∏è", 
        callback_data=f"calendar_change_{next_year}-{next_month}"
    ))

    builder.row(*nav_buttons)

    return builder.as_markup()

@dp.callback_query(
    BookingStates.SELECT_DATE, 
    F.data.startswith("calendar_change_")
)
async def process_calendar_change(callback: types.CallbackQuery):
    try:
        date_str = callback.data.replace("calendar_change_", "")
        year, month = map(int, date_str.split("-"))
        
        await callback.message.edit_reply_markup(
            reply_markup=generate_calendar(year, month)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error changing calendar month: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—è—Ü", show_alert=True)

@dp.callback_query(F.data.startswith("ignore_"))
async def ignore_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback'–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"""
    await callback.answer()


def generate_time_range_keyboard(selected_date=None, start_time=None, end_time=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞"""
    builder = InlineKeyboardBuilder()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (9:00 - 20:00)
    start = datetime.strptime("09:00", "%H:%M")
    end = datetime.strptime("20:00", "%H:%M")
    current = start

    while current <= end:
        time_str = current.strftime("%H:%M")
        time_obj = current.time()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
        if start_time and time_str == start_time:
            button_text = "üü¢ " + time_str  # –ù–∞—á–∞–ª–æ - –∑–µ–ª–µ–Ω—ã–π
        elif end_time and time_str == end_time:
            button_text = "üî¥ " + time_str  # –ö–æ–Ω–µ—Ü - –∫—Ä–∞—Å–Ω—ã–π
        elif (start_time and end_time and
              datetime.strptime(start_time, "%H:%M").time() < time_obj <
              datetime.strptime(end_time, "%H:%M").time()):
            button_text = "üîµ " + time_str  # –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ - —Å–∏–Ω–∏–π
        else:
            button_text = time_str  # –û–±—ã—á–Ω—ã–π –≤–∏–¥

        builder.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"time_point_{time_str}"
        ))
        current += timedelta(minutes=30)

    builder.adjust(4)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = [
        types.InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –Ω–∞—á–∞–ª–æ üü¢",
            callback_data="select_start_mode"
        ),
        types.InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–µ—Ü üî¥",
            callback_data="select_end_mode"
        )
    ]

    builder.row(*control_buttons)

    if start_time and end_time:
        builder.row(
            types.InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä–µ–º—è",
                callback_data="confirm_time_range"
            )
        )

    builder.row(
        types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="cancel_time_selection"
        )
    )

    return builder.as_markup()


@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data == "select_end_mode")
async def select_end_mode_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    if not data.get('time_start'):
        await callback.answer(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞!",
            show_alert=True
        )
        return

    await state.update_data(selecting_mode='end')

    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞—á–∞–ª–æ: {data['time_start']}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–∫—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä):",
        reply_markup=generate_time_range_keyboard(
            selected_date=data.get('selected_date'),
            start_time=data['time_start'],
            end_time=data.get('time_end')
        )
    )
    await callback.answer()


def generate_confirmation():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="booking_confirm"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="booking_cancel"),
    )
    return builder.as_markup()


def generate_booking_list(user_id: int):
    bookings = load_bookings()
    user_bookings = [b for b in bookings if b.get("user_id") == user_id]
    
    if not user_bookings:
        return None
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    bookings_by_role = {}
    for booking in user_bookings:
        role = booking.get("user_role", "unknown")
        if role not in bookings_by_role:
            bookings_by_role[role] = []
        bookings_by_role[role].append(booking)
    
    builder = InlineKeyboardBuilder()
    
    for role, role_bookings in bookings_by_role.items():
        role_name = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" if role == "teacher" else "–£—á–µ–Ω–∏–∫"
        builder.row(types.InlineKeyboardButton(
            text=f"--- {role_name} ---",
            callback_data="ignore"
        ))
        
        for booking in sorted(role_bookings, key=lambda x: (x.get("date"), x.get("start_time"))):
            builder.row(types.InlineKeyboardButton(
                text=f"{booking.get('date')} {booking.get('start_time')}-{booking.get('end_time')}",
                callback_data=f"booking_info_{booking.get('id')}"
            ))
    
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_menu"
    ))
    
    return builder.as_markup()


def generate_booking_actions(booking_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"cancel_booking_{booking_id}"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_bookings"),
    )
    return builder.as_markup()


def generate_subjects_keyboard(selected_subjects=None, is_teacher=False):
    builder = InlineKeyboardBuilder()
    selected_subjects = selected_subjects or []

    for subject_id, subject_name in SUBJECTS.items():
        emoji = "‚úÖ" if subject_id in selected_subjects else "‚¨úÔ∏è"
        builder.button(
            text=f"{emoji} {subject_name}",
            callback_data=f"subject_{subject_id}"
        )

    if is_teacher:
        builder.button(text="–ì–æ—Ç–æ–≤–æ", callback_data="subjects_done")
        builder.adjust(2, 2, 1)
    else:
        builder.adjust(2)

    return builder.as_markup()

# main_menu = ReplyKeyboardMarkup(
#     keyboard=[
#         [KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è")],
#         [KeyboardButton(text="üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å")]
#     ],
#     resize_keyboard=True
# )


async def set_user_commands(user_id: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in ADMIN_IDS:
        await bot.set_my_commands(ADMIN_COMMANDS, scope=types.BotCommandScopeChat(chat_id=user_id))
    else:
        await bot.set_my_commands(USER_COMMANDS, scope=types.BotCommandScopeChat(chat_id=user_id))


def generate_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è")],
        [KeyboardButton(text="üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å")]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö ID
    if user_id in ADMIN_IDS:
        keyboard.append([KeyboardButton(text="üìä –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")])

    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


@dp.message.middleware()
async def update_menu_middleware(handler, event, data):
    user_id = event.from_user.id
    await set_user_commands(user_id)
    return await handler(event, data)


@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_name = storage.get_user_name(user_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
    await set_user_commands(user_id)

    if user_name:
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=generate_main_menu(user_id)
        )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=generate_main_menu(user_id)
        )


@dp.message(Command("schedule"))
@dp.message(F.text == "üìä –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def handle_schedule_button(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    # –ó–∞–≥–ª—É—à–∫–∞ - –∫–Ω–æ–ø–∫–∞ –µ—Å—Ç—å, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ–∫–∞ –Ω–µ—Ç
    await message.answer(
        "–§—É–Ω–∫—Ü–∏—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†Ô∏è\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏–π.",
        reply_markup=generate_main_menu(user_id)
    )
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "/book - –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        " 1. –í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å (—É—á–µ–Ω–∏–∫/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)\n"
        " 2. –í–≤–µ—Å—Ç–∏ –≤–∞—à–µ –§–ò–û\n"
        " 3. –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç(—ã)\n"
        " 4. –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        " 5. –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è\n"
        " 6. –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è\n"
        " 7. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
        "/my_bookings - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "/my_role - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Ä–æ–ª—å\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )


async def check_user_profile(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å"""
    name = storage.get_user_name(user_id)
    role = storage.get_user_role(user_id)
    return bool(name) and bool(role)

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /book
async def ensure_user_name(user_id: int) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –§–ò–û"""
    return storage.get_user_name(user_id)

@dp.message(F.text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è")
@dp.message(Command("book"))
async def start_booking(message: types.Message, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await state.update_data(booking_type="–¢–∏–ø1")
    
    user_id = message.from_user.id
    user_name = storage.get_user_name(user_id)
    
    if user_name:
        await state.update_data(user_name=user_name)
        builder = InlineKeyboardBuilder()
        builder.button(text="üë®‚Äçüéì –Ø —É—á–µ–Ω–∏–∫", callback_data="role_student")
        builder.button(text="üë®‚Äçüè´ –Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_teacher")
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(BookingStates.SELECT_ROLE)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:")
        await state.set_state(BookingStates.INPUT_NAME)


@dp.callback_query(F.data.startswith("role_"))
async def process_role_selection(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    await state.update_data(user_role=role)
    
    if role == 'teacher':
        await callback.message.edit_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–µ–ø–æ–¥–∞–µ—Ç–µ:",
            reply_markup=generate_subjects_keyboard(is_teacher=True)
        )
        await state.set_state(BookingStates.TEACHER_SUBJECTS)
    else:
        # –î–ª—è —É—á–µ–Ω–∏–∫–∞ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
        await callback.message.edit_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å —É—á–µ–Ω–∏–∫–∞\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:",
            reply_markup=generate_subjects_keyboard()
        )
        await state.set_state(BookingStates.SELECT_SUBJECT)
    await callback.answer()

async def ensure_user_data(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_data = storage.get_user_data(user_id)
    
    # –ï—Å–ª–∏ –§–ò–û —É–∂–µ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if user_data.get("user_name"):
        await state.update_data(user_name=user_data["user_name"])
        return True
    
    # –ï—Å–ª–∏ –§–ò–û –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:")
    await state.set_state(BookingStates.INPUT_NAME)
    return False


@dp.message(BookingStates.INPUT_NAME)
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.text.strip()
    
    if len(user_name.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é)")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –±–µ–∑ —Ä–æ–ª–∏
    storage.save_user_info(user_id, user_name)
    await state.update_data(user_name=user_name)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–æ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(text="üë®‚Äçüéì –ö–∞–∫ —É—á–µ–Ω–∏–∫", callback_data="role_student")
    builder.button(text="üë®‚Äçüè´ –ö–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_teacher")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(BookingStates.SELECT_ROLE)


@dp.callback_query(BookingStates.TEACHER_SUBJECTS, F.data.startswith("subject_"))
async def process_teacher_subjects(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_subjects = data.get("subjects", [])

    subject_id = callback.data.split("_")[1]
    if subject_id in selected_subjects:
        selected_subjects.remove(subject_id)
    else:
        selected_subjects.append(subject_id)

    await state.update_data(subjects=selected_subjects)
    await callback.message.edit_reply_markup(
        reply_markup=generate_subjects_keyboard(selected_subjects, is_teacher=True)
    )
    await callback.answer()


@dp.callback_query(BookingStates.TEACHER_SUBJECTS, F.data == "subjects_done")
async def process_subjects_done(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get("subjects"):
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç!", show_alert=True)
        return

    storage.update_user_subjects(callback.from_user.id, data["subjects"])
    await state.update_data(booking_type="–¢–∏–ø1")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=generate_calendar())  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞
    await state.set_state(BookingStates.SELECT_DATE)
    await callback.answer()


@dp.callback_query(BookingStates.SELECT_SUBJECT, F.data.startswith("subject_"))
async def process_student_subject(callback: types.CallbackQuery, state: FSMContext):
    subject_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(subject=subject_id, booking_type="–¢–∏–ø1")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–Ω–æ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
    data = await state.get_data()
    user_name = data.get('user_name', '')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–ø—Ä–µ–¥–º–µ—Ç –≤ Google Sheets
    if gsheets:
        gsheets.save_user_subject(user_id, user_name, subject_id)
    
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {SUBJECTS[subject_id]}\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=generate_calendar()
    )
    await state.set_state(BookingStates.SELECT_DATE)
    await callback.answer()


# @dp.callback_query(BookingStates.SELECT_BOOKING_TYPE, F.data.startswith("booking_type_"))
# async def process_booking_type(callback: types.CallbackQuery, state: FSMContext):
#     booking_type = callback.data.replace("booking_type_", "")
#     await state.update_data(booking_type=booking_type)
#     await callback.message.edit_text(
#         f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø: {booking_type}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
#         reply_markup=generate_calendar()
#     )
#     await state.set_state(BookingStates.SELECT_DATE)
#     await callback.answer()

@dp.callback_query(BookingStates.SELECT_DATE, F.data.startswith("calendar_day_"))
async def process_calendar(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    user_id = callback.from_user.id

    if data.startswith("calendar_day_"):
        date_str = data.replace("calendar_day_", "")
        year, month, day = map(int, date_str.split("-"))
        selected_date = datetime(year, month, day).date()
        formatted_date = selected_date.strftime("%Y-%m-%d")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        role = state_data.get('user_role')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–æ–Ω–∏
        if storage.has_booking_on_date(user_id, formatted_date, role):
            await callback.answer(
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–æ–Ω—å –Ω–∞ {day}.{month}.{year} –≤ —Ä–æ–ª–∏ {'–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è' if role == 'teacher' else '—É—á–µ–Ω–∏–∫–∞'}",
                show_alert=True
            )
            return

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(
            selected_date=selected_date,
            time_start=None,
            time_end=None,
            selecting_mode='start'
        )

        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {day}.{month}.{year}\n"
            "–ù–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –Ω–∞—á–∞–ª–æ üü¢' –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞\n"
            "–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–µ—Ü üî¥' –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è",
            reply_markup=generate_time_range_keyboard(
                selected_date=selected_date
            )
        )
        await state.set_state(BookingStates.SELECT_TIME_RANGE)
        await callback.answer()


@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data == "cancel_time_selection")
async def cancel_time_selection_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω")
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=generate_main_menu(callback.from_user.id)
    )
    await callback.answer()


@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data.startswith("time_point_"))
async def process_time_point(callback: types.CallbackQuery, state: FSMContext):
    time_str = callback.data.replace("time_point_", "")
    data = await state.get_data()
    selecting_mode = data.get('selecting_mode', 'start')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª–æ

    if selecting_mode == 'start':
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª–æ
        await state.update_data(time_start=time_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∫–æ–Ω–µ—Ü –∏ –æ–Ω —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞
        if data.get('time_end') and datetime.strptime(time_str, "%H:%M") >= datetime.strptime(data['time_end'],
                                                                                              "%H:%M"):
            await state.update_data(time_end=None)

        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–æ –Ω–∞—á–∞–ª–æ: {time_str}\n"
            "–ù–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–µ—Ü üî¥' –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è\n"
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
            reply_markup=generate_time_range_keyboard(
                selected_date=data.get('selected_date'),
                start_time=time_str,
                end_time=data.get('time_end')
            )
        )
    else:
        # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–µ—Ü
        if not data.get('time_start'):
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞!", show_alert=True)
            return

        if datetime.strptime(time_str, "%H:%M") <= datetime.strptime(data['time_start'], "%H:%M"):
            await callback.answer("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!", show_alert=True)
            return

        await state.update_data(time_end=time_str)

        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä:\n"
            f"–ù–∞—á–∞–ª–æ: {data['time_start']} (–∑–µ–ª–µ–Ω—ã–π)\n"
            f"–ö–æ–Ω–µ—Ü: {time_str} (–∫—Ä–∞—Å–Ω—ã–π)\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä\n"
            "2. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü\n"
            "3. –û—Ç–º–µ–Ω–∏—Ç—å",
            reply_markup=generate_time_range_keyboard(
                selected_date=data.get('selected_date'),
                start_time=data['time_start'],
                end_time=time_str
            )
        )

    await callback.answer()


@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data.in_(["select_start_mode", "select_end_mode"]))
async def switch_selection_mode(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if callback.data == "select_start_mode":
        await state.update_data(selecting_mode='start')
        message_text = "–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ù–ê–ß–ê–õ–ê –≤—Ä–µ–º–µ–Ω–∏ (–∑–µ–ª–µ–Ω—ã–π –º–∞—Ä–∫–µ—Ä)\n"
    else:
        await state.update_data(selecting_mode='end')
        message_text = "–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –û–ö–û–ù–ß–ê–ù–ò–Ø –≤—Ä–µ–º–µ–Ω–∏ (–∫—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä)\n"

    time_start = data.get('time_start')
    time_end = data.get('time_end')

    if time_start:
        message_text += f"–¢–µ–∫—É—â–µ–µ –Ω–∞—á–∞–ª–æ: {time_start}\n"
    if time_end:
        message_text += f"–¢–µ–∫—É—â–∏–π –∫–æ–Ω–µ—Ü: {time_end}\n"

    if callback.data == "select_start_mode":
        message_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Ä–µ–º—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª–∞:"
    else:
        message_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Ä–µ–º—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è:"

    await callback.message.edit_text(
        message_text,
        reply_markup=generate_time_range_keyboard(
            selected_date=data.get('selected_date'),
            start_time=time_start,
            end_time=time_end
        )
    )
    await callback.answer()


@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data == "confirm_time_range")
async def confirm_time_range(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ booking_type = "–¢–∏–ø1"
    data['booking_type'] = "–¢–∏–ø1"
    await state.update_data(booking_type="–¢–∏–ø1")

    subject = data.get('subject') if data.get('user_role') == 'student' else None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–∞
    if has_booking_conflict(
        user_id=callback.from_user.id,
        date=data['selected_date'].strftime("%Y-%m-%d"),
        time_start=data['time_start'],
        time_end=data['time_end'],
        subject=subject
    ):
        await callback.answer(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–æ–Ω—å –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è!",
            show_alert=True
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    required_fields = ['user_name', 'user_role', 'selected_date', 'time_start', 'time_end']
    for field in required_fields:
        if field not in data:
            await callback.answer(f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {field}", show_alert=True)
            return

    role_text = "—É—á–µ–Ω–∏–∫" if data['user_role'] == 'student' else "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
    
    if data['user_role'] == 'teacher':
        subjects_text = ", ".join(SUBJECTS[subj] for subj in data.get('subjects', []))
    else:
        subjects_text = SUBJECTS.get(data.get('subject', ''), "–ù–µ —É–∫–∞–∑–∞–Ω")

    await callback.message.edit_text(
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
        f"–†–æ–ª—å: {role_text}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç(—ã): {subjects_text}\n"
        f"–¢–∏–ø: –¢–ò–ü1 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n"
        f"–î–∞—Ç–∞: {data['selected_date'].strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è: {data['time_start']} - {data['time_end']}",
        reply_markup=generate_confirmation()
    )
    await state.set_state(BookingStates.CONFIRMATION)
    await callback.answer()


@dp.callback_query(BookingStates.CONFIRMATION, F.data == "booking_confirm")
async def process_confirmation(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    data['booking_type'] = "–¢–∏–ø1"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏
    booking_data = {
        "user_id": callback.from_user.id,
        "user_name": data['user_name'],
        "user_role": data['user_role'],
        "booking_type": "–¢–∏–ø1",  # –í—Å–µ–≥–¥–∞ –¢–∏–ø1
        "date": data['selected_date'].strftime("%Y-%m-%d"),
        "start_time": data['time_start'],
        "end_time": data['time_end'],
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    if data['user_role'] == 'teacher':
        booking_data["subjects"] = data.get('subjects', [])
    else:
        booking_data["subject"] = data.get('subject', '')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω—å
    try:
        booking = storage.add_booking(booking_data)
        await callback.message.edit_text(
            "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n"
            f"üìÖ –î–∞—Ç–∞: {data['selected_date'].strftime('%d.%m.%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {data['time_start']}-{data['time_end']}\n"
            f"üìå –¢–∏–ø: –¢–ò–ü1"
        )
    except Exception as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏!")
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    await state.clear()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=generate_main_menu(callback.from_user.id)
    )


@dp.message(F.text == "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
@dp.message(Command("my_bookings"))
async def show_bookings(message: types.Message):
    keyboard = generate_booking_list(message.from_user.id)
    if not keyboard:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        return

    await message.answer("–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏):", reply_markup=keyboard)


@dp.message(Command("my_role"))
async def show_role(message: types.Message):
    role = storage.get_user_role(message.from_user.id)
    if role:
        await message.answer(f"–í–∞—à–∞ —Ä–æ–ª—å: {'—É—á–µ–Ω–∏–∫' if role == 'student' else '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'}")
    else:
        await message.answer("–í–∞—à–∞ —Ä–æ–ª—å –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /book —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å.")


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å")
async def start_cancel_booking(message: types.Message):
    keyboard = generate_booking_list(message.from_user.id)
    if not keyboard:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("booking_info_"))
async def show_booking_info(callback: types.CallbackQuery):
    try:
        booking_id_str = callback.data.replace("booking_info_", "")
        if not booking_id_str:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
            return

        booking_id = int(booking_id_str)
        bookings = load_bookings()
        booking = next((b for b in bookings if b.get("id") == booking_id), None)

        if not booking:
            await callback.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        role_text = "üë®üéì –£—á–µ–Ω–∏–∫" if booking.get('user_role') == 'student' else "üë®üè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É
        booking_date = booking.get('date')
        if isinstance(booking_date, str):
            try:
                booking_date = datetime.strptime(booking_date, "%Y-%m-%d").strftime("%d.%m.%Y")
            except ValueError:
                booking_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        message_text = (
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:\n\n"
            f"üîπ {role_text}\n"
            f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {booking.get('start_time', '?')} - {booking.get('end_time', '?')}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
        if booking.get('user_role') == 'teacher':
            subjects = booking.get('subjects', [])
            subjects_text = ", ".join([SUBJECTS.get(subj, subj) for subj in subjects])
            message_text += f"üìö –ü—Ä–µ–¥–º–µ—Ç—ã: {subjects_text}\n"
        else:
            subject = booking.get('subject', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message_text += f"üìö –ü—Ä–µ–¥–º–µ—Ç: {SUBJECTS.get(subject, subject)}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        message_text += f"üè∑ –¢–∏–ø: {booking.get('booking_type', '–¢–∏–ø1')}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        await callback.message.edit_text(
            message_text,
            reply_markup=generate_booking_actions(booking_id)
        )
        await callback.answer()

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_booking_info: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data.startswith("cancel_booking_"))
async def cancel_booking(callback: types.CallbackQuery):
    booking_id = int(callback.data.replace("cancel_booking_", ""))
    if storage.cancel_booking(booking_id):
        await callback.message.edit_text(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID {booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    await callback.answer()


@dp.callback_query(F.data.in_(["back_to_menu", "back_to_bookings"]))
async def back_handler(callback: types.CallbackQuery):
    if callback.data == "back_to_menu":
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=None
        )
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=generate_main_menu(callback.from_user.id)
        )
    else:
        keyboard = generate_booking_list(callback.from_user.id)
        await callback.message.edit_text(
            "–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
    await callback.answer()


async def cleanup_old_bookings():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    while True:
        try:
            bookings = storage.load()
            storage.save(bookings)  # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            logger.info("Cleanup of old bookings completed")
            await asyncio.sleep(6 * 60 * 60)  # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        except Exception as e:
            logger.error(f"Error in cleanup_old_bookings: {e}")
            await asyncio.sleep(60)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ


async def sync_with_gsheets():
    """–§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets"""
    while True:
        try:
            if hasattr(storage, 'gsheets') and storage.gsheets:
                bookings = storage.load()
                success = storage.gsheets.update_all_sheets(bookings)
                if success:
                    logger.info("–§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google Sheets")
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            await asyncio.sleep(600)  # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ


async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if gsheets:
        try:
            worksheet = gsheets._get_or_create_users_worksheet()
            records = worksheet.get_all_records()
            
            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ user_id
            unique_users = {}
            duplicates = []
            
            for i, record in enumerate(records, start=2):
                user_id = str(record.get("user_id"))
                if user_id in unique_users:
                    duplicates.append(i)
                else:
                    unique_users[user_id] = record
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (—Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞–ª–∏—Å—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫)
            for row_num in sorted(duplicates, reverse=True):
                worksheet.delete_rows(row_num)
            
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(duplicates)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")


async def sync_from_gsheets_background(storage):
    """–§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Google Sheets –≤ JSON"""
    while True:
        try:
            if hasattr(storage, 'gsheets') and storage.gsheets:
                success = storage.gsheets.sync_from_gsheets_to_json(storage)
                if success:
                    logger.info("–§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Google Sheets –≤ JSON –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏–∑ Google Sheets")
            await asyncio.sleep(60)  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ Google Sheets: {e}")
            await asyncio.sleep(300)


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await on_startup()
    await bot.set_my_commands(USER_COMMANDS)
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    asyncio.create_task(cleanup_old_bookings())
    asyncio.create_task(sync_with_gsheets())
    asyncio.create_task(sync_from_gsheets_background(storage))  # –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    logger.info("Starting bot...")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")