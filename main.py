import asyncio
import json
import os
import logging
from datetime import datetime, timedelta, date
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import threading
from gsheets_manager import GoogleSheetsManager
from storage import JSONStorage
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
BOOKINGS_FILE = "bookings.json"

BOOKING_TYPES = ["–¢–∏–ø1", "–¢–∏–ø2", "–¢–∏–ø3", "–¢–∏–ø4"]
SUBJECTS = {
    "math": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    "inf": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "rus": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    "phys": "–§–∏–∑–∏–∫–∞"
}

class BookingStates(StatesGroup):
    SELECT_ROLE = State()
    INPUT_NAME = State()
    TEACHER_SUBJECTS = State()
    SELECT_SUBJECT = State()
    SELECT_BOOKING_TYPE = State()
    SELECT_DATE = State()
    SELECT_TIME_RANGE = State()  # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    CONFIRMATION = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
storage = JSONStorage(file_path=BOOKINGS_FILE)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
try:
    gsheets = GoogleSheetsManager(
        credentials_file='credentials.json',
        spreadsheet_id='1r1MU8k8umwHx_E4Z-jFHRJ-kdwC43Jw0nwpVeH7T1GU'
    )
    gsheets.connect()
    storage.set_gsheets_manager(gsheets)
    print("Google Sheets integration initialized successfully")
    initial_data = storage.load()
    gsheets.update_all_sheets(initial_data)
except Exception as e:
    print(f"Google Sheets initialization error: {e}")

def generate_booking_types():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    builder = InlineKeyboardBuilder()
    for booking_type in BOOKING_TYPES:
        builder.add(types.InlineKeyboardButton(
            text=booking_type,
            callback_data=f"booking_type_{booking_type}"
        ))
    builder.adjust(2)
    return builder.as_markup()

def merge_adjacent_bookings(bookings):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–º–µ–∂–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    if not bookings:
        return bookings

    sorted_bookings = sorted(bookings, key=lambda x: (
        x.get('booking_type', ''),
        x.get('date', ''),
        x.get('start_time', '')
    ))

    merged = []
    current = sorted_bookings[0]

    for next_booking in sorted_bookings[1:]:
        if (current.get('booking_type') == next_booking.get('booking_type') and
                current.get('date') == next_booking.get('date') and
                current.get('end_time') == next_booking.get('start_time')):

            current = {
                **current,
                'end_time': next_booking.get('end_time'),
                'id': min(current.get('id', 0), next_booking.get('id', 0)),
                'merged': True
            }
        else:
            merged.append(current)
            current = next_booking

    merged.append(current)
    return merged

def load_bookings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–º–µ–∂–Ω—ã–µ –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏–µ"""
    data = storage.load()
    valid_bookings = []
    current_time = datetime.now()

    for booking in data:
        if 'date' not in booking:
            continue

        try:
            if isinstance(booking['date'], str):
                booking_date = datetime.strptime(booking['date'], "%Y-%m-%d").date()
            else:
                continue

            time_end = datetime.strptime(booking.get('end_time', "00:00"), "%H:%M").time()
            booking_datetime = datetime.combine(booking_date, time_end)

            if booking_datetime < current_time:
                continue

            booking['date'] = booking_date
            valid_bookings.append(booking)

        except ValueError:
            continue

    valid_bookings = merge_adjacent_bookings(valid_bookings)
    return valid_bookings

def has_booking_conflict(user_id, booking_type, date, time_start, time_end, exclude_id=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞"""
    bookings = load_bookings()
    for booking in bookings:
        if (booking.get('user_id') == user_id and
                booking.get('booking_type') == booking_type and
                booking.get('date') == date):

            if exclude_id and booking.get('id') == exclude_id:
                continue

            def time_to_minutes(t):
                h, m = map(int, t.split(':'))
                return h * 60 + m

            new_start = time_to_minutes(time_start)
            new_end = time_to_minutes(time_end)
            existing_start = time_to_minutes(booking.get('start_time', '00:00'))
            existing_end = time_to_minutes(booking.get('end_time', '00:00'))

            if not (new_end <= existing_start or new_start >= existing_end):
                return True
    return False

def generate_calendar(year=None, month=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
    now = datetime.now()
    year = year or now.year
    month = month or now.month

    builder = InlineKeyboardBuilder()

    month_name = datetime(year, month, 1).strftime("%B %Y")
    builder.row(types.InlineKeyboardButton(text=month_name, callback_data="ignore"))

    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°—Ä", "–í—Å"]
    builder.row(*[types.InlineKeyboardButton(text=day, callback_data="ignore") for day in week_days])

    first_day = datetime(year, month, 1)
    start_weekday = first_day.weekday()
    days_in_month = (datetime(year, month + 1, 1) - first_day).days

    buttons = []
    for _ in range(start_weekday):
        buttons.append(types.InlineKeyboardButton(text=" ", callback_data="ignore"))

    for day in range(1, days_in_month + 1):
        date = datetime(year, month, day)
        if date.date() < datetime.now().date():
            buttons.append(types.InlineKeyboardButton(text=" ", callback_data="ignore"))
        else:
            buttons.append(types.InlineKeyboardButton(
                text=str(day),
                callback_data=f"calendar_day_{year}-{month}-{day}"
            ))
        if (day + start_weekday) % 7 == 0 or day == days_in_month:
            builder.row(*buttons)
            buttons = []

    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1

    builder.row(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"calendar_change_{prev_year}-{prev_month}"),
        types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"calendar_change_{next_year}-{next_month}"),
    )

    return builder.as_markup()

def generate_time_range_keyboard(selected_date=None, start_time=None, end_time=None, selecting_start=True):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    builder = InlineKeyboardBuilder()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (9:00 - 20:00)
    start = datetime.strptime("09:00", "%H:%M")
    end = datetime.strptime("20:00", "%H:%M")
    current = start

    while current <= end:
        time_str = current.strftime("%H:%M")
        time_obj = current.time()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
        if start_time and time_str == start_time:
            button_text = "üü¢ " + time_str  # –ù–∞—á–∞–ª–æ - –∑–µ–ª–µ–Ω—ã–π
        elif end_time and time_str == end_time:
            button_text = "üî¥ " + time_str  # –ö–æ–Ω–µ—Ü - –∫—Ä–∞—Å–Ω—ã–π
        elif (start_time and end_time and 
              datetime.strptime(start_time, "%H:%M").time() < time_obj < 
              datetime.strptime(end_time, "%H:%M").time()):
            button_text = "üîµ " + time_str  # –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ - —Å–∏–Ω–∏–π
        else:
            button_text = time_str  # –û–±—ã—á–Ω—ã–π –≤–∏–¥

        builder.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"time_point_{time_str}"
        ))
        current += timedelta(minutes=30)

    builder.adjust(4)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons = []
    if start_time and end_time:
        buttons.append(types.InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data="confirm_time_range"
        ))
    
    buttons.append(types.InlineKeyboardButton(
        text=f"{'üîÑ –í—ã–±—Ä–∞—Ç—å –Ω–∞—á–∞–ª–æ' if not selecting_start else 'üîÑ –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–µ—Ü'}",
        callback_data="switch_selection_mode"
    ))
    
    builder.row(*buttons)
    
    builder.row(types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        callback_data="cancel_time_selection"
    ))
    
    return builder.as_markup()

def generate_confirmation():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="booking_confirm"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="booking_cancel"),
    )
    return builder.as_markup()

def generate_booking_list(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    bookings = load_bookings()
    user_bookings = [b for b in bookings if b.get("user_id") == user_id]

    if not user_bookings:
        return None

    def get_sort_key(booking):
        booking_date = booking.get('date')
        if isinstance(booking_date, str):
            booking_date = datetime.strptime(booking_date, "%Y-%m-%d").date()
        time_obj = datetime.strptime(booking.get('start_time', '00:00'), "%H:%M").time()
        return (booking_date, time_obj)

    user_bookings.sort(key=get_sort_key)

    builder = InlineKeyboardBuilder()
    for booking in user_bookings:
        booking_date = booking.get('date')
        if isinstance(booking_date, str):
            booking_date = datetime.strptime(booking_date, "%Y-%m-%d").date()

        merged_note = " (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ)" if booking.get('merged', False) else ""
        builder.row(types.InlineKeyboardButton(
            text=f"{booking.get('booking_type', '')}{merged_note} {booking_date.strftime('%d.%m.%Y')} {booking.get('start_time', '')}-{booking.get('end_time', '')} (ID: {booking.get('id', '')})",
            callback_data=f"booking_info_{booking.get('id', '')}"
        ))

    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_menu"
    ))
    return builder.as_markup()

def generate_booking_actions(booking_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data=f"cancel_booking_{booking_id}"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_bookings"),
    )
    return builder.as_markup()

def generate_subjects_keyboard(selected_subjects=None, is_teacher=False):
    builder = InlineKeyboardBuilder()
    selected_subjects = selected_subjects or []

    for subject_id, subject_name in SUBJECTS.items():
        emoji = "‚úÖ" if subject_id in selected_subjects else "‚¨úÔ∏è"
        builder.button(
            text=f"{emoji} {subject_name}",
            callback_data=f"subject_{subject_id}"
        )

    if is_teacher:
        builder.button(text="–ì–æ—Ç–æ–≤–æ", callback_data="subjects_done")
        builder.adjust(2, 2, 1)
    else:
        builder.adjust(2)

    return builder.as_markup()

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è")],
        [KeyboardButton(text="üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å")]
    ],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=main_menu
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "/book - –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        " 1. –í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å (—É—á–µ–Ω–∏–∫/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)\n"
        " 2. –í–≤–µ—Å—Ç–∏ –≤–∞—à–µ –§–ò–û\n"
        " 3. –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç(—ã)\n"
        " 4. –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        " 5. –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è\n"
        " 6. –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è\n"
        " 7. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
        "/my_bookings - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "/my_role - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Ä–æ–ª—å\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )

@dp.message(F.text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è")
@dp.message(Command("book"))
async def start_booking(message: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="üë®‚Äçüéì –Ø —É—á–µ–Ω–∏–∫", callback_data="role_student")
    builder.button(text="üë®‚Äçüè´ –Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_teacher")

    await message.answer(
        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(BookingStates.SELECT_ROLE)

@dp.callback_query(F.data.startswith("role_"))
async def process_role_selection(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data.split("_")[1]
    await state.update_data(user_role=role)

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:")
    await state.set_state(BookingStates.INPUT_NAME)
    await callback.answer()

@dp.message(BookingStates.INPUT_NAME)
async def process_name(message: types.Message, state: FSMContext):
    if len(message.text.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é)")
        return

    await state.update_data(user_name=message.text)
    data = await state.get_data()

    if data['user_role'] == 'teacher':
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–µ–ø–æ–¥–∞–µ—Ç–µ:",
            reply_markup=generate_subjects_keyboard(is_teacher=True)
        )
        await state.set_state(BookingStates.TEACHER_SUBJECTS)
    else:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:",
            reply_markup=generate_subjects_keyboard()
        )
        await state.set_state(BookingStates.SELECT_SUBJECT)

@dp.callback_query(BookingStates.TEACHER_SUBJECTS, F.data.startswith("subject_"))
async def process_teacher_subjects(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_subjects = data.get("subjects", [])

    subject_id = callback.data.split("_")[1]
    if subject_id in selected_subjects:
        selected_subjects.remove(subject_id)
    else:
        selected_subjects.append(subject_id)

    await state.update_data(subjects=selected_subjects)
    await callback.message.edit_reply_markup(
        reply_markup=generate_subjects_keyboard(selected_subjects, is_teacher=True)
    )
    await callback.answer()

@dp.callback_query(BookingStates.TEACHER_SUBJECTS, F.data == "subjects_done")
async def process_subjects_done(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get("subjects"):
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç!", show_alert=True)
        return

    storage.update_user_subjects(callback.from_user.id, data["subjects"])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=generate_booking_types())
    await state.set_state(BookingStates.SELECT_BOOKING_TYPE)
    await callback.answer()

@dp.callback_query(BookingStates.SELECT_SUBJECT, F.data.startswith("subject_"))
async def process_student_subject(callback: types.CallbackQuery, state: FSMContext):
    subject_id = callback.data.split("_")[1]
    await state.update_data(subject=subject_id)

    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {SUBJECTS[subject_id]}")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=generate_booking_types())
    await state.set_state(BookingStates.SELECT_BOOKING_TYPE)
    await callback.answer()

@dp.callback_query(BookingStates.SELECT_BOOKING_TYPE, F.data.startswith("booking_type_"))
async def process_booking_type(callback: types.CallbackQuery, state: FSMContext):
    booking_type = callback.data.replace("booking_type_", "")
    await state.update_data(booking_type=booking_type)
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø: {booking_type}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=generate_calendar()
    )
    await state.set_state(BookingStates.SELECT_DATE)
    await callback.answer()

@dp.callback_query(BookingStates.SELECT_DATE, F.data.startswith("calendar_"))
async def process_calendar(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data

    if data.startswith("calendar_day_"):
        date_str = data.replace("calendar_day_", "")
        year, month, day = map(int, date_str.split("-"))
        selected_date = datetime(year, month, day).date()

        await state.update_data(
            selected_date=selected_date,
            time_start=None,
            time_end=None,
            selecting_start=True
        )
        
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {day}.{month}.{year}\n"
            "–°–µ–π—á–∞—Å –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –≤—Ä–µ–º—è –ù–ê–ß–ê–õ–ê (–∑–µ–ª–µ–Ω—ã–π –º–∞—Ä–∫–µ—Ä)\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
            reply_markup=generate_time_range_keyboard(
                selected_date=selected_date,
                selecting_start=True
            )
        )
        await state.set_state(BookingStates.SELECT_TIME_RANGE)
        await callback.answer()

    elif data.startswith("calendar_change_"):
        date_str = data.replace("calendar_change_", "")
        year, month = map(int, date_str.split("-"))
        await callback.message.edit_reply_markup(reply_markup=generate_calendar(year, month))
        await callback.answer()

@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data.startswith("time_point_"))
async def process_time_point(callback: types.CallbackQuery, state: FSMContext):
    time_str = callback.data.replace("time_point_", "")
    data = await state.get_data()
    selecting_start = data.get('selecting_start', True)
    
    if selecting_start:
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª–æ
        await state.update_data(time_start=time_str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∫–æ–Ω–µ—Ü –∏ –æ–Ω —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞
        if data.get('time_end') and datetime.strptime(time_str, "%H:%M") >= datetime.strptime(data['time_end'], "%H:%M"):
            await state.update_data(time_end=None)
            
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–æ –Ω–∞—á–∞–ª–æ: {time_str}\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –û–ö–û–ù–ß–ê–ù–ò–Ø (–∫—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä)\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
            reply_markup=generate_time_range_keyboard(
                selected_date=data.get('selected_date'),
                start_time=time_str,
                end_time=data.get('time_end'),
                selecting_start=False
            )
        )
    else:
        # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–µ—Ü
        if not data.get('time_start'):
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞!", show_alert=True)
            return
            
        if datetime.strptime(time_str, "%H:%M") <= datetime.strptime(data['time_start'], "%H:%M"):
            await callback.answer("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!", show_alert=True)
            return
            
        await state.update_data(time_end=time_str)
        
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–æ:\n"
            f"–ù–∞—á–∞–ª–æ: {data['time_start']} (–∑–µ–ª–µ–Ω—ã–π)\n"
            f"–ö–æ–Ω–µ—Ü: {time_str} (–∫—Ä–∞—Å–Ω—ã–π)\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä\n"
            "2. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü\n"
            "3. –û—Ç–º–µ–Ω–∏—Ç—å",
            reply_markup=generate_time_range_keyboard(
                selected_date=data.get('selected_date'),
                start_time=data['time_start'],
                end_time=time_str,
                selecting_start=False
            )
        )
    
    await callback.answer()

@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data == "switch_selection_mode")
async def switch_selection_mode(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_mode = data.get('selecting_start', True)
    new_mode = not current_mode
    
    await state.update_data(selecting_start=new_mode)
    
    time_start = data.get('time_start')
    time_end = data.get('time_end')
    
    if new_mode:
        message_text = "–°–µ–π—á–∞—Å –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –≤—Ä–µ–º—è –ù–ê–ß–ê–õ–ê (–∑–µ–ª–µ–Ω—ã–π –º–∞—Ä–∫–µ—Ä)\n"
        if time_start:
            message_text += f"–¢–µ–∫—É—â–µ–µ –Ω–∞—á–∞–ª–æ: {time_start}\n"
        if time_end:
            message_text += f"–¢–µ–∫—É—â–∏–π –∫–æ–Ω–µ—Ü: {time_end}\n"
        message_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:"
    else:
        message_text = "–°–µ–π—á–∞—Å –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –≤—Ä–µ–º—è –û–ö–û–ù–ß–ê–ù–ò–Ø (–∫—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä)\n"
        if time_start:
            message_text += f"–¢–µ–∫—É—â–µ–µ –Ω–∞—á–∞–ª–æ: {time_start}\n"
        if time_end:
            message_text += f"–¢–µ–∫—É—â–∏–π –∫–æ–Ω–µ—Ü: {time_end}\n"
        message_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:"
    
    await callback.message.edit_text(
        message_text,
        reply_markup=generate_time_range_keyboard(
            selected_date=data.get('selected_date'),
            start_time=time_start,
            end_time=time_end,
            selecting_start=new_mode
        )
    )
    await callback.answer()

@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data == "confirm_time_range")
async def confirm_time_range(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    if has_booking_conflict(
            user_id=callback.from_user.id,
            booking_type=data['booking_type'],
            date=data['selected_date'],
            time_start=data['time_start'],
            time_end=data['time_end']
    ):
        await callback.answer(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–æ–Ω—å —Ç–∏–ø–∞ '{data['booking_type']}' –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è!",
            show_alert=True
        )
        return

    role_text = "—É—á–µ–Ω–∏–∫" if data['user_role'] == 'student' else "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

    if data['user_role'] == 'teacher':
        subjects_text = ", ".join(SUBJECTS[subj] for subj in data.get('subjects', []))
    else:
        subjects_text = SUBJECTS.get(data.get('subject', ''), "–ù–µ —É–∫–∞–∑–∞–Ω")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await callback.message.edit_text(
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
        f"–¢–∏–ø: {data['booking_type']}\n"
        f"–†–æ–ª—å: {role_text}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç(—ã): {subjects_text}\n"
        f"–î–∞—Ç–∞: {data['selected_date'].strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è: {data['time_start']} - {data['time_end']}",
        reply_markup=generate_confirmation()
    )
    await state.set_state(BookingStates.CONFIRMATION)
    await callback.answer()

@dp.callback_query(BookingStates.SELECT_TIME_RANGE, F.data == "cancel_time_selection")
async def cancel_time_selection(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    booking_type = data.get('booking_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
    selected_date = data.get('selected_date')

    await callback.message.edit_text(
        f"‚ùå –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è '{booking_type}' "
        f"–Ω–∞ {selected_date.strftime('%d.%m.%Y')} –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=None
    )

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

    await state.clear()
    await callback.answer()

@dp.callback_query(BookingStates.CONFIRMATION, F.data.in_(["booking_confirm", "booking_cancel"]))
async def process_confirmation(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "booking_confirm":
        data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        if has_booking_conflict(
                user_id=callback.from_user.id,
                booking_type=data['booking_type'],
                date=data['selected_date'],
                time_start=data['time_start'],
                time_end=data['time_end']
        ):
            await callback.message.edit_text("‚ùå –í—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏
        booking_data = {
            "user_name": data['user_name'],
            "user_role": data['user_role'],
            "booking_type": data['booking_type'],
            "date": data['selected_date'].strftime("%Y-%m-%d"),
            "start_time": data['time_start'],
            "end_time": data['time_end'],
            "user_id": callback.from_user.id,
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

        if data['user_role'] == 'teacher':
            booking_data["subjects"] = data.get('subjects', [])
        else:
            booking_data["subject"] = data.get('subject', '')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω—å
        try:
            booking = storage.add_booking(booking_data)
            print(f"–ë—Ä–æ–Ω—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ JSON. ID: {booking.get('id')}")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Sheets
            all_bookings = storage.load()
            if gsheets.update_all_sheets(all_bookings):
                print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Google Sheets!")
            else:
                print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Google Sheets")

            await callback.message.edit_text(
                "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n"
                f"üìÖ –î–∞—Ç–∞: {data['selected_date'].strftime('%d.%m.%Y')}\n"
                f"‚è∞ –í—Ä–µ–º—è: {data['time_start']}-{data['time_end']}\n"
                f"üìå –¢–∏–ø: {data['booking_type']}"
            )
        except Exception as e:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏!")
            print(f"–û—à–∏–±–∫–∞: {e}")
    else:
        await callback.message.edit_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    await state.clear()
    await callback.answer()

@dp.message(F.text == "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
@dp.message(Command("my_bookings"))
async def show_bookings(message: types.Message):
    keyboard = generate_booking_list(message.from_user.id)
    if not keyboard:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        return

    await message.answer("–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏):", reply_markup=keyboard)

@dp.message(Command("my_role"))
async def show_role(message: types.Message):
    role = storage.get_user_role(message.from_user.id)
    if role:
        await message.answer(f"–í–∞—à–∞ —Ä–æ–ª—å: {'—É—á–µ–Ω–∏–∫' if role == 'student' else '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'}")
    else:
        await message.answer("–í–∞—à–∞ —Ä–æ–ª—å –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /book —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å.")

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å")
async def start_cancel_booking(message: types.Message):
    keyboard = generate_booking_list(message.from_user.id)
    if not keyboard:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("booking_info_"))
async def show_booking_info(callback: types.CallbackQuery):
    booking_id = int(callback.data.replace("booking_info_", ""))
    bookings = load_bookings()
    booking = next((b for b in bookings if b.get("id") == booking_id), None)

    if not booking:
        await callback.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    booking_date = booking.get('date')
    if isinstance(booking_date, str):
        booking_date = datetime.strptime(booking_date, "%Y-%m-%d").date()

    role_text = "—É—á–µ–Ω–∏–∫" if booking.get('user_role') == 'student' else "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

    if booking.get('user_role') == 'teacher':
        subjects_text = ", ".join(SUBJECTS[subj] for subj in booking.get('subjects', []))
    else:
        subjects_text = SUBJECTS.get(booking.get('subject', ''), "–ù–µ —É–∫–∞–∑–∞–Ω")

    await callback.message.edit_text(
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:\n\n"
        f"–¢–∏–ø: {booking.get('booking_type', '')}\n"
        f"–†–æ–ª—å: {role_text}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç(—ã): {subjects_text}\n"
        f"–î–∞—Ç–∞: {booking_date.strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è: {booking.get('start_time', '')} - {booking.get('end_time', '')}\n"
        f"ID: {booking.get('id', '')}",
        reply_markup=generate_booking_actions(booking.get('id'))
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("cancel_booking_"))
async def cancel_booking(callback: types.CallbackQuery):
    booking_id = int(callback.data.replace("cancel_booking_", ""))
    if storage.cancel_booking(booking_id):
        await callback.message.edit_text(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID {booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    await callback.answer()

@dp.callback_query(F.data.in_(["back_to_menu", "back_to_bookings"]))
async def back_handler(callback: types.CallbackQuery):
    if callback.data == "back_to_menu":
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=None
        )
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu
        )
    else:
        keyboard = generate_booking_list(callback.from_user.id)
        await callback.message.edit_text(
            "–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
    await callback.answer()

async def cleanup_old_bookings():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    while True:
        bookings = load_bookings()
        storage.save(bookings)
        await asyncio.sleep(6 * 60 * 60)

async def main():
    asyncio.create_task(cleanup_old_bookings())
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
    print("–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:", os.path.abspath(BOOKINGS_FILE))
    asyncio.run(main())