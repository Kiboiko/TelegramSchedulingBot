# payment_handlers.py
import os
import sqlite3
import uuid
from aiogram import types
from aiogram.fsm.context import FSMContext
from yookassa import Configuration, Payment
from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
def init_payments_db():
    conn = sqlite3.connect('payments.db', check_same_thread=False)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (user_id INTEGER, payment_id TEXT UNIQUE, status TEXT)''')
    conn.commit()
    conn.close()

init_payments_db()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É
def save_payment(user_id, payment_id):
    conn = sqlite3.connect('payments.db', check_same_thread=False)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO payments (user_id, payment_id, status) VALUES (?, ?, 'pending')",
                  (user_id, payment_id))
        conn.commit()
    except Exception as e:
        print(f"Error saving payment: {e}")
    finally:
        conn.close()

# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
def update_payment_status(payment_id, status):
    conn = sqlite3.connect('payments.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("UPDATE payments SET status = ? WHERE payment_id = ?", (status, payment_id))
    conn.commit()
    conn.close()

class PaymentHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    @staticmethod
    async def handle_payment_start(message: types.Message):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã"""
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1 —Ä—É–±–ª—å", callback_data="pay_1")]
        ])

        await message.answer(
            "ü§ñ –¢–µ—Å—Ç–æ–≤–∞—è –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
            "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –ÆKassa\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 1 —Ä—É–±–ª—å\n\n"
            "üí≥ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã:\n"
            "‚Ä¢ 5555 5555 5555 4477 - —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂\n"
            "‚Ä¢ 5555 5555 5555 4444 - –æ—Ç–∫–∞–∑",
            reply_markup=keyboard
        )

    @staticmethod
    async def handle_create_payment(callback: types.CallbackQuery):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa –Ω–∞ 1 —Ä—É–±–ª—å
            payment = Payment.create({
                "amount": {
                    "value": "1.00",
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": "https://t.me/your_bot_username"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
                },
                "capture": True,
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞ –∑–∞ 1 —Ä—É–±–ª—å",
                "metadata": {
                    "user_id": callback.from_user.id
                }
            }, str(uuid.uuid4()))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            save_payment(callback.from_user.id, payment.id)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1 —Ä—É–±–ª—å",
                    url=payment.confirmation.confirmation_url
                )],
                [types.InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_{payment.id}"
                )]
            ])

            await callback.message.edit_text(
                f"üí∏ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!\n"
                f"üí∞ –°—É–º–º–∞: 1 —Ä—É–±–ª—å\n"
                f"üÜî ID: {payment.id[:8]}...\n\n"
                f"1. –ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å 1 —Ä—É–±–ª—å'\n"
                f"2. –û–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ –ÆKassa\n"
                f"3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
                reply_markup=keyboard
            )

        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")

    @staticmethod
    async def handle_check_payment(callback: types.CallbackQuery):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        payment_id = callback.data.replace('check_', '')

        try:
            payment = Payment.find_one(payment_id)

            if payment.status == 'succeeded':
                update_payment_status(payment_id, 'succeeded')
                await callback.message.edit_text(
                    "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n"
                    "üí∞ –°—É–º–º–∞: 1 —Ä—É–±–ª—å\n"
                    "üéâ –¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                    "–î–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay"
                )

            elif payment.status == 'pending':
                await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", show_alert=True)

            elif payment.status == 'canceled':
                update_payment_status(payment_id, 'canceled')
                await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)

            else:
                await callback.answer(f"–°—Ç–∞—Ç—É—Å: {payment.status}", show_alert=True)

        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)