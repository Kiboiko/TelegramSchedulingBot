# payment_handlers.py
import os
import sqlite3
import uuid
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from yookassa import Configuration, Payment
from dotenv import load_dotenv

load_dotenv()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
Configuration.account_id = os.getenv("YOOKASSA_SHOP_ID")
Configuration.secret_key = os.getenv("YOOKASSA_SECRET_KEY")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
class PaymentStates(StatesGroup):
    WAITING_AMOUNT = State()
    CONFIRM_PAYMENT = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
def init_payments_db():
    conn = sqlite3.connect('payments.db', check_same_thread=False)
    c = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É amount –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (user_id INTEGER, payment_id TEXT UNIQUE, status TEXT)''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ amount
    c.execute("PRAGMA table_info(payments)")
    columns = [column[1] for column in c.fetchall()]
    
    if 'amount' not in columns:
        c.execute("ALTER TABLE payments ADD COLUMN amount REAL")
        print("Added amount column to payments table")
    
    conn.commit()
    conn.close()

init_payments_db()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É
def save_payment(user_id, payment_id, amount):
    conn = sqlite3.connect('payments.db', check_same_thread=False)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO payments (user_id, payment_id, amount, status) VALUES (?, ?, ?, 'pending')",
                  (user_id, payment_id, amount))
        conn.commit()
    except Exception as e:
        print(f"Error saving payment: {e}")
    finally:
        conn.close()

# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
def update_payment_status(payment_id, status):
    conn = sqlite3.connect('payments.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("UPDATE payments SET status = ? WHERE payment_id = ?", (status, payment_id))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –±–∞–∑—ã
def get_payment_amount(payment_id):
    conn = sqlite3.connect('payments.db', check_same_thread=False)
    c = conn.cursor()
    try:
        c.execute("SELECT amount FROM payments WHERE payment_id = ?", (payment_id,))
        result = c.fetchone()
        return result[0] if result else 0
    except Exception as e:
        print(f"Error getting payment amount: {e}")
        return 0
    finally:
        conn.close()

class PaymentHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    @staticmethod
    async def handle_payment_start(message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã - –∑–∞–ø—Ä–æ—Å —Å—É–º–º—ã"""
        await message.answer(
            "üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã (–≤ —Ä—É–±–ª—è—Ö):\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 100\n"
            "‚Ä¢ 500.50\n"
            "‚Ä¢ 1000\n\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 —Ä—É–±–ª—å\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 15000 —Ä—É–±–ª–µ–π"
        )
        await state.set_state(PaymentStates.WAITING_AMOUNT)

    @staticmethod
    async def handle_amount_input(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã"""
        try:
            amount = float(message.text.replace(',', '.'))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
            if amount < 1:
                await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã - 1 —Ä—É–±–ª—å")
                return
            if amount > 15000:
                await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã - 15000 —Ä—É–±–ª–µ–π")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(amount=amount)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="confirm_payment")],
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
            ])
            
            await message.answer(
                f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:\n\n"
                f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n\n"
                f"üí≥ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                f"‚Ä¢ 5555 5555 5555 4477 - —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂\n"
                f"‚Ä¢ 5555 5555 5555 4444 - –æ—Ç–∫–∞–∑ –≤ –æ–ø–ª–∞—Ç–µ",
                reply_markup=keyboard
            )
            await state.set_state(PaymentStates.CONFIRM_PAYMENT)
            
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É\n\n–ü—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 500.50")

    @staticmethod
    async def handle_confirm_payment(callback: types.CallbackQuery, state: FSMContext):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            data = await state.get_data()
            amount = data.get('amount')
            
            if not amount:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
            payment = Payment.create({
                "amount": {
                    "value": f"{amount:.2f}",
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": "https://t.me/testoviySchedile_bot"
                },
                "capture": True,
                "description": f"–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏ –Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±.",
                "metadata": {
                    "user_id": callback.from_user.id
                }
            }, str(uuid.uuid4()))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            save_payment(callback.from_user.id, payment.id, amount)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {amount:.2f} —Ä—É–±.",
                    url=payment.confirmation.confirmation_url
                )],
                [types.InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_{payment.id}"
                )],
                [types.InlineKeyboardButton(
                    text="üîÑ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂",
                    callback_data="new_payment"
                )]
            ])

            await callback.message.edit_text(
                f"üí∏ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!\n"
                f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n"
                f"üÜî ID: {payment.id[:8]}...\n\n"
                f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                f"1. –ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å {amount:.2f} —Ä—É–±.'\n"
                f"2. –û–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ –ÆKassa\n"
                f"3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n\n"
                f"üí≥ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã:\n"
                f"‚Ä¢ 5555 5555 5555 4477 - —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂\n"
                f"‚Ä¢ 5555 5555 5555 4444 - –æ—Ç–∫–∞–∑",
                reply_markup=keyboard
            )
            await state.clear()

        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
            await state.clear()

    @staticmethod
    async def handle_cancel_payment(callback: types.CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        await callback.message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.clear()

    @staticmethod
    async def handle_new_payment(callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"""
        await PaymentHandlers.handle_payment_start(callback.message, state)
        await callback.answer()

    @staticmethod
    async def handle_check_payment(callback: types.CallbackQuery):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        payment_id = callback.data.replace('check_', '')

        try:
            payment = Payment.find_one(payment_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ –±–∞–∑—ã
            amount = get_payment_amount(payment_id)

            if payment.status == 'succeeded':
                update_payment_status(payment_id, 'succeeded')
                await callback.message.edit_text(
                    f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n"
                    f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n"
                    f"üéâ –£—Å–ª—É–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                    f"–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(
                            text="üîÑ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂",
                            callback_data="new_payment"
                        )]
                    ])
                )

            elif payment.status == 'pending':
                await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", show_alert=True)

            elif payment.status == 'canceled':
                update_payment_status(payment_id, 'canceled')
                await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)

            else:
                await callback.answer(f"–°—Ç–∞—Ç—É—Å: {payment.status}", show_alert=True)

        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)