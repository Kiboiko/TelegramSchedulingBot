# payment_handlers.py
import os
import sqlite3
import uuid
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from yookassa import Configuration, Payment
from dotenv import load_dotenv
import logging

logger = logging.getLogger(__name__)

load_dotenv()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
Configuration.account_id = os.getenv("YOOKASSA_SHOP_ID")
Configuration.secret_key = os.getenv("YOOKASSA_SECRET_KEY")


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
class PaymentStates(StatesGroup):
    WAITING_AMOUNT = State()
    CONFIRM_PAYMENT = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
def init_payments_db():
    conn = sqlite3.connect('payments.db', check_same_thread=False)
    c = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É amount –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (user_id INTEGER, payment_id TEXT UNIQUE, status TEXT)''')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ amount
    c.execute("PRAGMA table_info(payments)")
    columns = [column[1] for column in c.fetchall()]

    if 'amount' not in columns:
        c.execute("ALTER TABLE payments ADD COLUMN amount REAL")
        print("Added amount column to payments table")

    conn.commit()
    conn.close()


init_payments_db()


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É
def save_payment(user_id, payment_id, amount):
    conn = sqlite3.connect('payments.db', check_same_thread=False)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO payments (user_id, payment_id, amount, status) VALUES (?, ?, ?, 'pending')",
                  (user_id, payment_id, amount))
        conn.commit()
    except Exception as e:
        print(f"Error saving payment: {e}")
    finally:
        conn.close()


# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
def update_payment_status(payment_id, status):
    conn = sqlite3.connect('payments.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("UPDATE payments SET status = ? WHERE payment_id = ?", (status, payment_id))
    conn.commit()
    conn.close()


# –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –±–∞–∑—ã
def get_payment_amount(payment_id):
    conn = sqlite3.connect('payments.db', check_same_thread=False)
    c = conn.cursor()
    try:
        c.execute("SELECT amount FROM payments WHERE payment_id = ?", (payment_id,))
        result = c.fetchone()
        return result[0] if result else 0
    except Exception as e:
        print(f"Error getting payment amount: {e}")
        return 0
    finally:
        conn.close()


class PaymentHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""

    @staticmethod
    async def handle_payment_start(message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã - –≤—ã–±–æ—Ä —Ä–µ–±–µ–Ω–∫–∞/—É—á–µ–Ω–∏–∫–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from main import storage
        user_roles = storage.get_user_roles(user_id)

        if 'parent' in user_roles:
            # –î–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–±–µ–Ω–∫–∞
            children_ids = storage.get_parent_children(user_id)
            if not children_ids:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π")
                return

            builder = InlineKeyboardBuilder()
            for child_id in children_ids:
                child_info = storage.get_child_info(child_id)
                child_name = child_info.get('user_name', f'–£—á–µ–Ω–∏–∫ {child_id}')
                builder.add(types.InlineKeyboardButton(
                    text=f"üë∂ {child_name}",
                    callback_data=f"payment_child_{child_id}"
                ))

            builder.add(types.InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_payment"
            ))
            builder.adjust(1)

            await message.answer(
                "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                reply_markup=builder.as_markup()
            )

        elif 'student' in user_roles:
            # –î–ª—è —É—á–µ–Ω–∏–∫–∞ - —Å—Ä–∞–∑—É –≤—ã–±–∏—Ä–∞–µ–º —Å–µ–±—è
            await state.update_data(
                target_user_id=user_id,
                target_user_name=storage.get_user_name(user_id)
            )
            await PaymentHandlers._show_subjects(message, state)

        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–µ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã")

    @staticmethod
    async def _show_subjects(message: types.Message, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        try:
            data = await state.get_data()
            target_user_id = data.get('target_user_id')

            if not target_user_id:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                return

            from main import storage
            available_subjects = storage.get_available_subjects_for_student(target_user_id)

            if not available_subjects:
                await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã")
                return

            builder = InlineKeyboardBuilder()
            for subject_id in available_subjects:
                from config import SUBJECTS
                subject_name = SUBJECTS.get(subject_id, f"–ü—Ä–µ–¥–º–µ—Ç {subject_id}")
                builder.add(types.InlineKeyboardButton(
                    text=subject_name,
                    callback_data=f"payment_subject_{subject_id}"
                ))

            builder.add(types.InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_payment"
            ))
            builder.adjust(2)

            await message.answer(
                "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                reply_markup=builder.as_markup()
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _show_subjects: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")

    @staticmethod
    async def handle_child_selection(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–±–µ–Ω–∫–∞"""
        try:
            child_id = int(callback.data.replace("payment_child_", ""))

            from main import storage
            child_info = storage.get_child_info(child_id)

            if not child_info:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–±–µ–Ω–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            await state.update_data(
                target_user_id=child_id,
                target_user_name=child_info.get('user_name', '')
            )

            await PaymentHandlers._show_subjects(callback.message, state)
            await callback.answer()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_child_selection: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    @staticmethod
    async def handle_subject_selection(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞"""
        try:
            subject_id = callback.data.replace("payment_subject_", "")

            await state.update_data(subject_id=subject_id)

            data = await state.get_data()
            target_name = data.get('target_user_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

            from config import SUBJECTS
            subject_name = SUBJECTS.get(subject_id, f"–ü—Ä–µ–¥–º–µ—Ç {subject_id}")

            await callback.message.edit_text(
                f"üí≥ –û–ø–ª–∞—Ç–∞:\n"
                f"üë§ –î–ª—è: {target_name}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã (–≤ —Ä—É–±–ª—è—Ö):\n\n"
                f"–ü—Ä–∏–º–µ—Ä—ã:\n"
                f"‚Ä¢ 100\n"
                f"‚Ä¢ 500.50\n"
                f"‚Ä¢ 1000\n\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 —Ä—É–±–ª—å\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 15000 —Ä—É–±–ª–µ–π"
            )

            await state.set_state(PaymentStates.WAITING_AMOUNT)
            await callback.answer()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_subject_selection: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    @staticmethod
    async def handle_amount_input(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã"""
        try:
            amount = float(message.text.replace(',', '.'))

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
            if amount < 1:
                await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã - 1 —Ä—É–±–ª—å")
                return
            if amount > 15000:
                await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã - 15000 —Ä—É–±–ª–µ–π")
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            target_user_id = data.get('target_user_id')
            subject_id = data.get('subject_id')

            if not target_user_id or not subject_id:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                await state.clear()
                return

            # –ó–ê–ü–ò–°–´–í–ê–ï–ú –°–£–ú–ú–£ –í –¢–ê–ë–õ–ò–¶–£ –°–†–ê–ó–£ –ü–†–ò –í–í–û–î–ï
            success = await PaymentHandlers._write_payment_to_sheets(
                target_user_id, subject_id, amount
            )

            if success:
                logger.info(
                    f"–°—É–º–º–∞ {amount} —Ä—É–±. –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è user_id {target_user_id}, subject {subject_id}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—É–º–º—ã –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è user_id {target_user_id}, subject {subject_id}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–ø–ª–∞—Ç—ã
            await state.update_data(amount=amount)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="confirm_payment")],
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
            ])

            from main import storage
            target_name = storage.get_user_name(target_user_id)
            from config import SUBJECTS
            subject_name = SUBJECTS.get(subject_id, f"–ü—Ä–µ–¥–º–µ—Ç {subject_id}")

            await message.answer(
                f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:\n\n"
                f"üë§ –î–ª—è: {target_name}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
                f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n\n"
                f"üí≥ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                f"‚Ä¢ 5555 5555 5555 4477 - —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂\n"
                f"‚Ä¢ 5555 5555 5555 4444 - –æ—Ç–∫–∞–∑ –≤ –æ–ø–ª–∞—Ç–µ",
                reply_markup=keyboard
            )
            await state.set_state(PaymentStates.CONFIRM_PAYMENT)

        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É\n\n–ü—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 500.50")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_amount_input: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã")

    @staticmethod
    async def handle_confirm_payment(callback: types.CallbackQuery, state: FSMContext):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            data = await state.get_data()
            amount = data.get('amount')
            target_user_id = data.get('target_user_id')
            subject_id = data.get('subject_id')

            if not amount:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
            payment = Payment.create({
                "amount": {
                    "value": f"{amount:.2f}",
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": "https://t.me/testoviySchedile_bot"
                },
                "capture": True,
                "description": f"–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏ –Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±.",
                "metadata": {
                    "user_id": callback.from_user.id,
                    "target_user_id": target_user_id,
                    "subject_id": subject_id
                }
            }, str(uuid.uuid4()))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            save_payment(callback.from_user.id, payment.id, amount)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {amount:.2f} —Ä—É–±.",
                    url=payment.confirmation.confirmation_url
                )],
                [types.InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_{payment.id}"
                )],
                [types.InlineKeyboardButton(
                    text="üîÑ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂",
                    callback_data="new_payment"
                )]
            ])

            await callback.message.edit_text(
                f"üí∏ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!\n"
                f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n"
                f"üÜî ID: {payment.id[:8]}...\n\n"
                f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                f"1. –ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å {amount:.2f} —Ä—É–±.'\n"
                f"2. –û–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ –ÆKassa\n"
                f"3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n\n"
                f"üí≥ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã:\n"
                f"‚Ä¢ 5555 5555 5555 4477 - —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂\n"
                f"‚Ä¢ 5555 5555 5555 4444 - –æ—Ç–∫–∞–∑",
                reply_markup=keyboard
            )
            await state.clear()

        except Exception as e:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
            await state.clear()

    @staticmethod
    async def handle_cancel_payment(callback: types.CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        await callback.message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.clear()
        await callback.answer()

    @staticmethod
    async def handle_new_payment(callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"""
        await PaymentHandlers.handle_payment_start(callback.message, state)
        await callback.answer()

    @staticmethod
    async def handle_check_payment(callback: types.CallbackQuery):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        payment_id = callback.data.replace('check_', '')

        try:
            payment = Payment.find_one(payment_id)

            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ –±–∞–∑—ã
            amount = get_payment_amount(payment_id)

            if payment.status == 'succeeded':
                update_payment_status(payment_id, 'succeeded')

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                metadata = payment.metadata
                target_user_id = metadata.get('target_user_id')
                subject_id = metadata.get('subject_id')

                if target_user_id and subject_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –ø–æ–º–µ—Ç–∫–æ–π –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                    await PaymentHandlers._update_payment_status_in_sheets(
                        target_user_id, subject_id, amount, 'succeeded'
                    )

                await callback.message.edit_text(
                    f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n"
                    f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n"
                    f"üéâ –£—Å–ª—É–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                    f"–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(
                            text="üîÑ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂",
                            callback_data="new_payment"
                        )]
                    ])
                )

            elif payment.status == 'pending':
                await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", show_alert=True)

            elif payment.status == 'canceled':
                update_payment_status(payment_id, 'canceled')
                await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)

            else:
                await callback.answer(f"–°—Ç–∞—Ç—É—Å: {payment.status}", show_alert=True)

        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

    @staticmethod
    async def _write_payment_to_sheets(user_id: int, subject_id: str, amount: float) -> bool:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ Google Sheets (—Å—É–º–º–∞ –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é)"""
        try:
            from main import gsheets
            if not gsheets:
                logger.error("Google Sheets –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return False

            from datetime import datetime
            current_date = datetime.now().strftime("%Y-%m-%d")
            formatted_date = gsheets.format_date(current_date)

            worksheet = gsheets._get_or_create_worksheet("–£—á–µ–Ω–∏–∫–∏ –±–æ—Ç")
            data = worksheet.get_all_values()

            if len(data) < 1:
                logger.error("–¢–∞–±–ª–∏—Ü–∞ '–£—á–µ–Ω–∏–∫–∏ –±–æ—Ç' –ø—É—Å—Ç–∞—è")
                return False

            headers = [str(h).strip().lower() for h in data[0]]

            # –ò—â–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã (–ø–µ—Ä–≤—ã–π –∏–∑ –¥–≤—É—Ö)
            target_col = -1
            for i in range(245, len(headers)):
                header = headers[i]
                if formatted_date.lower() in header:
                    target_col = i
                    break

            if target_col == -1:
                logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –¥–∞—Ç—ã {formatted_date}")
                return False

            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º subject_id
            target_row = -1
            for row_idx, row in enumerate(data[1:], start=2):
                if (len(row) > 0 and str(row[0]).strip() == str(user_id) and
                        len(row) > 2 and str(row[2]).strip() == str(subject_id)):
                    target_row = row_idx
                    break

            if target_row == -1:
                logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è user_id {user_id} –∏ subject_id {subject_id}")
                return False

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏
            current_value = 0.0
            if len(data[target_row - 1]) > target_col:
                cell_value = data[target_row - 1][target_col].strip()
                if cell_value and cell_value.replace('.', '').replace(',', '').isdigit():
                    try:
                        current_value = float(cell_value.replace(',', '.'))
                    except ValueError:
                        current_value = 0.0

            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø—Ä–∏–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É)
            new_value = current_value + amount

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —è—á–µ–π–∫—É
            worksheet.update_cell(target_row, target_col + 1, f"{new_value:.2f}")

            logger.info(
                f"–ü–ª–∞—Ç–µ–∂ –∑–∞–ø–∏—Å–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü—É: user_id={user_id}, subject={subject_id}, "
                f"amount={amount}, current_value={current_value}, new_value={new_value}, date={formatted_date}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
            return False

    @staticmethod
    async def _update_payment_status_in_sheets(user_id: int, subject_id: str, amount: float, status: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ (–¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–ª–∞—Ç)"""
        try:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–ª–∞—Ç
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—Å—å –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü –¥–∞—Ç—ã –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—Ç–∫–∏
            logger.info(
                f"–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: user_id={user_id}, subject={subject_id}, amount={amount}, status={status}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False