# booking_management.py
import logging
from datetime import datetime, time
from typing import List, Dict, Optional
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

logger = logging.getLogger(__name__)

class BookingManager:
    def __init__(self, storage, gsheets=None):
        self.storage = storage
        self.gsheets = gsheets
    
    def load_bookings(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏–µ"""
        data = self.storage.load()
        valid_bookings = []
        current_time = datetime.now()

        for booking in data:
            if 'date' not in booking:
                continue

            try:
                if isinstance(booking['date'], str):
                    booking_date = datetime.strptime(booking['date'], "%Y-%m-%d").date()
                else:
                    continue

                time_end = datetime.strptime(booking.get('end_time', "00:00"), "%H:%M").time()
                booking_datetime = datetime.combine(booking_date, time_end)

                if booking_datetime < current_time:
                    continue
                
                booking['date'] = booking_date
                valid_bookings.append(booking)

            except ValueError:
                continue

        return valid_bookings
    
    def load_past_bookings(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            data = self.storage.load()
            past_bookings = []
            current_time = datetime.now()

            for booking in data:
                if 'date' not in booking or 'end_time' not in booking:
                    continue

                try:
                    if isinstance(booking['date'], str):
                        booking_date = datetime.strptime(booking['date'], "%Y-%m-%d").date()
                    else:
                        continue

                    time_end = datetime.strptime(booking.get('end_time', "00:00"), "%H:%M").time()
                    booking_datetime = datetime.combine(booking_date, time_end)

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    if booking_datetime < current_time:
                        booking['date'] = booking_date
                        past_bookings.append(booking)

                except ValueError:
                    continue

            return past_bookings
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—à–µ–¥—à–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            return []
    
    def generate_booking_list(self, user_id: int) -> Optional[InlineKeyboardBuilder]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏"""
        bookings = self.load_bookings()
        user_roles = self.storage.get_user_roles(user_id)

        # –î–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –µ–≥–æ –¥–µ—Ç–µ–π
        children_ids = []
        if 'parent' in user_roles:
            children_ids = self.storage.get_parent_children(user_id)

        # –†–∞–∑–¥–µ–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        teacher_bookings = []
        student_bookings = []
        children_bookings = []

        for booking in bookings:
            if booking.get('user_id') == user_id:
                if booking.get('user_role') == 'teacher':
                    teacher_bookings.append(booking)
                else:
                    student_bookings.append(booking)
            elif booking.get('user_id') in children_ids:
                children_bookings.append(booking)

        if not any([teacher_bookings, student_bookings, children_bookings]):
            return None

        builder = InlineKeyboardBuilder()

        # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        if teacher_bookings:
            builder.row(types.InlineKeyboardButton(
                text="üë®‚Äçüè´ –ú–û–ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø (–ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨)",
                callback_data="ignore"
            ))

            for booking in sorted(teacher_bookings, key=lambda x: (x.get("date"), x.get("start_time"))):
                date_str = self._format_booking_date(booking.get('date', ''))
                
                button_text = (
                    f"üìÖ {date_str} "
                    f"‚è∞ {booking.get('start_time', '?')}-{booking.get('end_time', '?')}"
                )

                builder.row(types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"booking_info_{booking.get('id')}"
                ))

        # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
        if student_bookings:
            builder.row(types.InlineKeyboardButton(
                text="üë®‚Äçüéì –ú–û–ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø (–£–ß–ï–ù–ò–ö)",
                callback_data="ignore"
            ))

            for booking in sorted(student_bookings, key=lambda x: (x.get("date"), x.get("start_time"))):
                date_str = self._format_booking_date(booking.get('date', ''))
                subject = booking.get('subject', '')
                subject_short = self._get_subject_short_name(subject)

                button_text = (
                    f"üìÖ {date_str} "
                    f"‚è∞ {booking.get('start_time', '?')}-{booking.get('end_time', '?')} "
                    f"üìö {subject_short}"
                )

                builder.row(types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"booking_info_{booking.get('id')}"
                ))

        # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ–π (–¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π)
        if children_bookings:
            builder.row(types.InlineKeyboardButton(
                text="üë∂ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –ú–û–ò–• –î–ï–¢–ï–ô",
                callback_data="ignore"
            ))

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–µ—Ç—è–º
            children_bookings_by_child = {}
            for booking in children_bookings:
                child_id = booking.get('user_id')
                if child_id not in children_bookings_by_child:
                    children_bookings_by_child[child_id] = []
                children_bookings_by_child[child_id].append(booking)

            for child_id, child_bookings in children_bookings_by_child.items():
                child_info = self.storage.get_child_info(child_id)
                child_name = child_info.get('user_name', f'–†–µ–±–µ–Ω–æ–∫ {child_id}')

                builder.row(types.InlineKeyboardButton(
                    text=f"üë∂ {child_name}",
                    callback_data="ignore"
                ))

                for booking in sorted(child_bookings, key=lambda x: (x.get("date"), x.get("start_time"))):
                    date_str = self._format_booking_date(booking.get('date', ''))
                    subject = booking.get('subject', '')
                    subject_short = self._get_subject_short_name(subject)

                    button_text = (
                        f"   üìÖ {date_str} "
                        f"‚è∞ {booking.get('start_time', '?')}-{booking.get('end_time', '?')} "
                        f"üìö {subject_short}"
                    )

                    builder.row(types.InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"booking_info_{booking.get('id')}"
                    ))

        builder.row(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        ))

        return builder
    
    def generate_past_bookings_list(self, user_id: int) -> Optional[InlineKeyboardBuilder]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ—à–µ–¥—à–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏"""
        bookings = self.load_past_bookings()
        user_roles = self.storage.get_user_roles(user_id)

        # –î–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –µ–≥–æ –¥–µ—Ç–µ–π
        children_ids = []
        if 'parent' in user_roles:
            children_ids = self.storage.get_parent_children(user_id)

        # –†–∞–∑–¥–µ–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        teacher_bookings = []
        student_bookings = []
        children_bookings = []

        for booking in bookings:
            if booking.get('user_id') == user_id:
                if booking.get('user_role') == 'teacher':
                    teacher_bookings.append(booking)
                else:
                    student_bookings.append(booking)
            elif booking.get('user_id') in children_ids:
                children_bookings.append(booking)

        if not any([teacher_bookings, student_bookings, children_bookings]):
            return None

        builder = InlineKeyboardBuilder()

        # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        if teacher_bookings:
            builder.row(types.InlineKeyboardButton(
                text="üë®‚Äçüè´ –ü–†–û–®–ï–î–®–ò–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø (–ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨)",
                callback_data="ignore"
            ))

            for booking in sorted(teacher_bookings, key=lambda x: (x.get("date"), x.get("start_time")), reverse=True):
                date_str = self._format_booking_date(booking.get('date', ''), full_year=True)
                
                button_text = (
                    f"üìÖ {date_str} "
                    f"‚è∞ {booking.get('start_time', '?')}-{booking.get('end_time', '?')}"
                )

                builder.row(types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"past_booking_info_{booking.get('id')}"
                ))

        # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
        if student_bookings:
            builder.row(types.InlineKeyboardButton(
                text="üë®‚Äçüéì –ü–†–û–®–ï–î–®–ò–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø (–£–ß–ï–ù–ò–ö)",
                callback_data="ignore"
            ))

            for booking in sorted(student_bookings, key=lambda x: (x.get("date"), x.get("start_time")), reverse=True):
                date_str = self._format_booking_date(booking.get('date', ''), full_year=True)
                subject = booking.get('subject', '')
                subject_short = self._get_subject_short_name(subject)

                button_text = (
                    f"üìÖ {date_str} "
                    f"‚è∞ {booking.get('start_time', '?')}-{booking.get('end_time', '?')} "
                    f"üìö {subject_short}"
                )

                builder.row(types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"past_booking_info_{booking.get('id')}"
                ))

        # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ–π (–¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π)
        if children_bookings:
            builder.row(types.InlineKeyboardButton(
                text="üë∂ –ü–†–û–®–ï–î–®–ò–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –î–ï–¢–ï–ô",
                callback_data="ignore"
            ))

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–µ—Ç—è–º
            children_bookings_by_child = {}
            for booking in children_bookings:
                child_id = booking.get('user_id')
                if child_id not in children_bookings_by_child:
                    children_bookings_by_child[child_id] = []
                children_bookings_by_child[child_id].append(booking)

            for child_id, child_bookings in children_bookings_by_child.items():
                child_info = self.storage.get_child_info(child_id)
                child_name = child_info.get('user_name', f'–†–µ–±–µ–Ω–æ–∫ {child_id}')

                builder.row(types.InlineKeyboardButton(
                    text=f"üë∂ {child_name}",
                    callback_data="ignore"
                ))

                for booking in sorted(child_bookings, key=lambda x: (x.get("date"), x.get("start_time")), reverse=True):
                    date_str = self._format_booking_date(booking.get('date', ''), full_year=True)
                    subject = booking.get('subject', '')
                    subject_short = self._get_subject_short_name(subject)

                    button_text = (
                        f"   üìÖ {date_str} "
                        f"‚è∞ {booking.get('start_time', '?')}-{booking.get('end_time', '?')} "
                        f"üìö {subject_short}"
                    )

                    builder.row(types.InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"past_booking_info_{booking.get('id')}"
                    ))

        builder.row(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="back_to_menu_from_past"
        ))

        return builder
    
    def _format_booking_date(self, date_str: str, full_year: bool = False) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if isinstance(date_str, str) and len(date_str) == 10:  # YYYY-MM-DD format
            try:
                date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                if full_year:
                    return date_obj.strftime("%d.%m.%Y")
                else:
                    return date_obj.strftime("%d.%m")
            except ValueError:
                return date_str
        else:
            return date_str
    
    def _get_subject_short_name(self, subject: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        from config import SUBJECTS
        return SUBJECTS.get(subject, subject)[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    
    def get_booking_info_text(self, booking: Dict) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        role_text = "üë®üéì –£—á–µ–Ω–∏–∫" if booking.get('user_role') == 'student' else "üë®üè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É
        booking_date = booking.get('date')
        if isinstance(booking_date, str):
            try:
                booking_date = datetime.strptime(booking_date, "%Y-%m-%d").strftime("%d.%m.%Y")
            except ValueError:
                booking_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        message_text = (
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:\n\n"
            f"üîπ {role_text}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ, –µ—Å–ª–∏ —ç—Ç–æ –±—Ä–æ–Ω—å —Ä–µ–±–µ–Ω–∫–∞
        if booking.get('parent_id'):
            parent_name = booking.get('parent_name', '–†–æ–¥–∏—Ç–µ–ª—å')
            message_text += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ó–∞–ø–∏—Å–∞–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–º: {parent_name}\n"

        message_text += (
            f"üë§ –ò–º—è: {booking.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {booking.get('start_time', '?')} - {booking.get('end_time', '?')}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
        if booking.get('user_role') == 'teacher':
            subjects = booking.get('subjects', [])
            from config import SUBJECTS
            subjects_text = ", ".join([SUBJECTS.get(subj, subj) for subj in subjects])
            message_text += f"üìö –ü—Ä–µ–¥–º–µ—Ç—ã: {subjects_text}\n"
        else:
            subject = booking.get('subject', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            from config import SUBJECTS
            message_text += f"üìö –ü—Ä–µ–¥–º–µ—Ç: {SUBJECTS.get(subject, subject)}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        message_text += f"üè∑ –¢–∏–ø: {booking.get('booking_type', '–¢–∏–ø1')}\n"

        return message_text
    
    def get_past_booking_info_text(self, booking: Dict) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—à–µ–¥—à–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        text = self.get_booking_info_text(booking)
        text += f"\n‚úÖ –ó–∞–Ω—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        return text
    
    def cancel_booking_by_id(self, booking_id: int) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID"""
        return self.storage.cancel_booking(booking_id)
    
    def find_booking_by_id(self, booking_id: int) -> Optional[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID"""
        bookings = self.load_bookings()
        return next((b for b in bookings if b.get("id") == booking_id), None)
    
    def find_past_booking_by_id(self, booking_id: int) -> Optional[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ—à–µ–¥—à–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID"""
        bookings = self.load_past_bookings()
        return next((b for b in bookings if b.get("id") == booking_id), None)
    
    def get_subject_short_name(subject: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        from config import SUBJECTS
        return SUBJECTS.get(subject, subject)[:10]

    def is_admin(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        from config import ADMIN_IDS
        return user_id in ADMIN_IDS