import logging
from datetime import datetime, timedelta
from typing import List, Dict
from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

logger = logging.getLogger(__name__)


class StudentReminderManager:
    def __init__(self, storage, gsheets, bot: Bot):
        self.storage = storage
        self.gsheets = gsheets
        self.bot = bot
        self.sent_reminders = set()  # –ß—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

    def has_bookings_in_current_month(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É —É—á–µ–Ω–∏–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            now = datetime.now()
            current_month_start = datetime(now.year, now.month, 1)
            if now.month == 12:
                current_month_end = datetime(now.year + 1, 1, 1) - timedelta(days=1)
            else:
                current_month_end = datetime(now.year, now.month + 1, 1) - timedelta(days=1)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            bookings = self.storage.load_all_bookings()

            for booking in bookings:
                if (booking.get('user_id') == user_id and
                        booking.get('user_role') == 'student'):

                    try:
                        booking_date = datetime.strptime(booking['date'], "%Y-%m-%d")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –±—Ä–æ–Ω—å –≤ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                        if current_month_start <= booking_date <= current_month_end:
                            return True

                    except (ValueError, KeyError):
                        continue

            return False

        except Exception as e:
            logger.error(f"Error checking bookings for user {user_id}: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)

    def get_all_students(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ Google Sheets —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –§–ò–û"""
        try:
            if not self.gsheets:
                return []

            worksheet = self.gsheets._get_or_create_users_worksheet()
            records = worksheet.get_all_records()

            students = []
            for record in records:
                roles_str = record.get('roles', '')
                user_name = record.get('user_name', '').strip()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ò –∏–º–µ–µ—Ç –§–ò–û
                if (roles_str and 'student' in roles_str.lower() and user_name):
                    students.append({
                        'user_id': int(record.get('user_id', 0)),
                        'user_name': user_name,
                        'roles': [role.strip().lower() for role in roles_str.split(',')]
                    })
                else:
                    logger.warning(f"Student {record.get('user_id')} skipped: no name or roles")

            return students

        except Exception as e:
            logger.error(f"Error getting students: {e}")
            return []

    def generate_reminder_keyboard(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à–µ–º—Å—è!", callback_data="reminder_book_now")]
        ])
        return keyboard

    async def send_reminder(self, user_id: int, user_name: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫—É"""
        try:
            if user_id in self.sent_reminders:
                return

            keyboard = self.generate_reminder_keyboard()

            await self.bot.send_message(
                chat_id=user_id,
                text=f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
                     f"–¢–µ–±—è –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏, –¥–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º—Å—è!\n"
                     f"–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–Ω—è—Ç–∏—è üìö",
                reply_markup=keyboard
            )

            self.sent_reminders.add(user_id)
            logger.info(f"Reminder sent to user {user_id} ({user_name})")

        except Exception as e:
            logger.error(f"Error sending reminder to user {user_id}: {e}")

    async def check_and_send_reminders(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            logger.info("Starting student reminder check for current month...")

            students = self.get_all_students()
            logger.info(f"Found {len(students)} students to check")

            reminders_sent = 0

            for student in students:
                user_id = student['user_id']
                user_name = student['user_name']

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
                has_bookings = self.has_bookings_in_current_month(user_id)

                if not has_bookings:
                    logger.info(f"Student {user_name} ({user_id}) has no bookings this month, sending reminder")
                    await self.send_reminder(user_id, user_name)
                    reminders_sent += 1
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    import asyncio
                    await asyncio.sleep(0.1)
                else:
                    logger.info(f"Student {user_name} ({user_id}) has bookings this month, skipping")

            logger.info(f"Student reminder check completed. Sent {reminders_sent} reminders")

        except Exception as e:
            logger.error(f"Error in student reminder check: {e}")

    def should_run_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É (15 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞)"""
        now = datetime.now()
        # –ó–∞–ø—É—Å–∫–∞–µ–º 15 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
        return now.day == 15

    def clear_sent_reminders(self):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞)"""
        now = datetime.now()
        if now.day == 1:  # –í –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –æ—á–∏—â–∞–µ–º
            self.sent_reminders.clear()
            logger.info("Cleared sent reminders list for new month")