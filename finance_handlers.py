# finance_handlers.py
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
import logging
from datetime import datetime
from typing import List, Dict
from calendar_utils import generate_finance_calendar
from config import SUBJECTS

logger = logging.getLogger(__name__)


class FinanceStates(StatesGroup):
    SELECT_PERSON = State()  # –í—ã–±–æ—Ä —á–µ–ª–æ–≤–µ–∫–∞ (—Å–µ–±—è –∏–ª–∏ —Ä–µ–±–µ–Ω–∫–∞)
    SELECT_SUBJECT = State()  # –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
    SELECT_DATE = State()  # –í—ã–±–æ—Ä –¥–∞—Ç—ã
    SHOW_FINANCES = State()  # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é


class FinanceHandlers:
    def __init__(self, storage, gsheets, subjects_config, generate_subjects_keyboard_func):
        self.storage = storage
        self.gsheets = gsheets
        self.subjects_config = subjects_config
        self.generate_subjects_keyboard_func = generate_subjects_keyboard_func

    def register_handlers(self, dp):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–§–∏–Ω–∞–Ω—Å—ã" –≤ –º–µ–Ω—é
        dp.message.register(self.start_finances, F.text == "üí∞ –§–∏–Ω–∞–Ω—Å—ã")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —á–µ–ª–æ–≤–µ–∫–∞
        dp.callback_query.register(self.finance_select_person, F.data == "finance_start")
        dp.callback_query.register(self.finance_select_child, F.data.startswith("finance_child_"))
        dp.callback_query.register(self.finance_select_self, F.data == "finance_self")
        dp.callback_query.register(self.finance_back_to_person_selection, F.data == "finance_back_to_person")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        dp.callback_query.register(self.finance_select_subject, F.data.startswith("subject_"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤
        dp.callback_query.register(self.finance_select_date, F.data.startswith("finance_day_"))
        dp.callback_query.register(self.finance_change_month, F.data.startswith("finance_change_"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        dp.callback_query.register(self.finance_back_to_dates, F.data == "finance_back_to_dates")
        dp.callback_query.register(self.finance_back_to_subjects, F.data == "finance_back_to_subjects")
        dp.callback_query.register(self.finance_cancel, F.data == "finance_cancel")

    async def start_finances(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ - –≤—ã–±–æ—Ä —á–µ–ª–æ–≤–µ–∫–∞"""
        user_id = message.from_user.id
        user_roles = self.storage.get_user_roles(user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å—ã
        await state.update_data(finance_user_id=user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º
        is_student = 'student' in user_roles
        is_parent = 'parent' in user_roles

        if not (is_student or is_parent):
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
                "–§–∏–Ω–∞–Ω—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∞–º –∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º.",
                reply_markup=await self._generate_main_menu(user_id)
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç—è—Ö –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        children = []
        if is_parent:
            children_ids = self.storage.get_parent_children(user_id)
            for child_id in children_ids:
                child_info = self.storage.get_child_info(child_id)
                if child_info:
                    children.append({
                        'id': child_id,
                        'name': child_info.get('user_name', f'–£—á–µ–Ω–∏–∫ {child_id}')
                    })

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —á–µ–ª–æ–≤–µ–∫–∞
        builder = InlineKeyboardBuilder()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–µ–Ω–∏–∫ - –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–µ–±—è
        if is_student:
            user_name = self.storage.get_user_name(user_id)
            builder.button(
                text=f"üë§ {user_name} (–Ø)",
                callback_data="finance_self"
            )

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–æ–¥–∏—Ç–µ–ª—å - –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–µ—Ç–µ–π
        if is_parent and children:
            for child in children:
                builder.button(
                    text=f"üë∂ {child['name']}",
                    callback_data=f"finance_child_{child['id']}"
                )

        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="finance_cancel")
        builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

        message_text = "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ, —á—å–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:"

        await message.answer(message_text, reply_markup=builder.as_markup())
        await state.set_state(FinanceStates.SELECT_PERSON)

    async def finance_select_person(self, callback: types.CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        try:
            user_id = callback.from_user.id

            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                user_roles = self.storage.get_user_roles(user_id)
            except Exception as e:
                logger.error(f"Error getting user roles: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                return

            logger.info(f"User {user_id} roles: {user_roles}")

            # –ï—Å–ª–∏ —Ä–æ–ª–µ–π –Ω–µ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
            if not user_roles or (len(user_roles) == 1 and 'teacher' in user_roles):
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º", show_alert=True)
                return

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            await state.set_state(FinanceStates.SELECT_PERSON)

            builder = InlineKeyboardBuilder()

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–µ–Ω–∏–∫ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è
            if 'student' in user_roles:
                user_name = self.storage.get_user_name(user_id)
                builder.button(
                    text=f"üë§ {user_name} (–Ø)",
                    callback_data="finance_self"
                )

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–æ–¥–∏—Ç–µ–ª—å - –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–π
            if 'parent' in user_roles:
                try:
                    children_ids = self.storage.get_parent_children(user_id)
                    for child_id in children_ids:
                        child_info = self.storage.get_child_info(child_id)
                        if child_info:
                            child_name = child_info.get('user_name', f'–£—á–µ–Ω–∏–∫ {child_id}')
                            builder.button(
                                text=f"üë∂ {child_name}",
                                callback_data=f"finance_child_{child_id}"
                            )
                except Exception as e:
                    logger.error(f"Error getting children: {e}")

            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="finance_cancel")
            builder.adjust(1)

            await callback.message.edit_text(
                "üë• –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤:",
                reply_markup=builder.as_markup()
            )

        except Exception as e:
            logger.error(f"Error in finance_select_person: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def finance_select_child(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞"""
        child_id = int(callback.data.replace("finance_child_", ""))

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ
        child_info = self.storage.get_child_info(child_id)
        if not child_info:
            await callback.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–±–µ–Ω–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        child_name = child_info.get('user_name', f'–£—á–µ–Ω–∏–∫ {child_id}')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–µ–ª–æ–≤–µ–∫–µ
        await state.update_data(
            finance_target_id=child_id,
            finance_target_name=child_name,
            finance_target_type='child'
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
        available_subjects = self.storage.get_available_subjects_for_student(child_id)

        if not available_subjects:
            await callback.answer(
                f"‚ùå –£ {child_name} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
                show_alert=True
            )
            return

        await callback.message.edit_text(
            f"üë∂ –í—ã–±—Ä–∞–Ω: {child_name}\n"
            "üìö –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
            reply_markup=self.generate_subjects_keyboard_func(
                available_subjects=available_subjects
            )
        )
        await state.set_state(FinanceStates.SELECT_SUBJECT)
        await callback.answer()

    async def finance_select_self(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–±—è"""
        data = await state.get_data()
        user_id = data.get('finance_user_id')

        user_name = self.storage.get_user_name(user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–µ–ª–æ–≤–µ–∫–µ
        await state.update_data(
            finance_target_id=user_id,
            finance_target_name=user_name,
            finance_target_type='self'
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É—á–µ–Ω–∏–∫–∞
        available_subjects = self.storage.get_available_subjects_for_student(user_id)

        if not available_subjects:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤", show_alert=True)
            return

        await callback.message.edit_text(
            f"üë§ –í—ã–±—Ä–∞–Ω: {user_name}\n"
            "üìö –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
            reply_markup=self.generate_subjects_keyboard_func(
                available_subjects=available_subjects
            )
        )
        await state.set_state(FinanceStates.SELECT_SUBJECT)
        await callback.answer()

    async def finance_select_subject(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        subject_id = callback.data.replace("subject_", "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if subject_id not in self.subjects_config:
            await callback.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        subject_name = self.subjects_config[subject_id]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        await state.update_data(
            finance_subject_id=subject_id,
            finance_subject_name=subject_name
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        target_id = data.get('finance_target_id')
        target_name = data.get('finance_target_name')

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤
        available_dates = self.gsheets.get_available_finance_dates(target_id, subject_id)

        if not available_dates:
            await callback.message.edit_text(
                f"üí∞ –§–∏–Ω–∞–Ω—Å—ã –¥–ª—è {target_name}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
                "‚ùå –ù–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
            )
            await state.clear()
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        await callback.message.edit_text(
            f"üí∞ –§–∏–Ω–∞–Ω—Å—ã –¥–ª—è: {target_name}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤:",
            reply_markup=generate_finance_calendar()
        )
        await state.set_state(FinanceStates.SELECT_DATE)
        await callback.answer()

    async def finance_select_date(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        date_str = callback.data.replace("finance_day_", "")
        year, month, day = map(int, date_str.split("-"))
        selected_date = datetime(year, month, day).date()
        formatted_date = selected_date.strftime("%Y-%m-%d")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        await state.update_data(finance_selected_date=formatted_date)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        target_id = data.get('finance_target_id')
        target_name = data.get('finance_target_name')
        subject_id = data.get('finance_subject_id')
        subject_name = data.get('finance_subject_name')

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        finance_data = self.gsheets.get_student_finances(
            target_id, subject_id, formatted_date
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        message_text = self._format_finance_message(
            target_name, subject_name, formatted_date, finance_data
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = self._generate_finance_navigation_keyboard()

        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        await state.set_state(FinanceStates.SHOW_FINANCES)
        await callback.answer()

    async def finance_change_month(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –º–µ—Å—è—Ü–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
        try:
            date_str = callback.data.replace("finance_change_", "")
            year, month = map(int, date_str.split("-"))

            await callback.message.edit_reply_markup(
                reply_markup=generate_finance_calendar(year, month)
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"Error changing finance calendar month: {e}")
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—è—Ü", show_alert=True)

    async def finance_back_to_dates(self, callback: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
        data = await state.get_data()
        target_name = data.get('finance_target_name')
        subject_name = data.get('finance_subject_name')

        await callback.message.edit_text(
            f"üí∞ –§–∏–Ω–∞–Ω—Å—ã –¥–ª—è: {target_name}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤:",
            reply_markup=generate_finance_calendar()
        )
        await state.set_state(FinanceStates.SELECT_DATE)
        await callback.answer()

    async def finance_back_to_subjects(self, callback: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞"""
        data = await state.get_data()
        target_name = data.get('finance_target_name')

        target_id = data.get('finance_target_id')
        available_subjects = self.storage.get_available_subjects_for_student(target_id)

        await callback.message.edit_text(
            f"üí∞ –§–∏–Ω–∞–Ω—Å—ã –¥–ª—è: {target_name}\n"
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
            reply_markup=self.generate_subjects_keyboard_func(
                available_subjects=available_subjects
            )
        )
        await state.set_state(FinanceStates.SELECT_SUBJECT)
        await callback.answer()

    async def finance_back_to_person_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —á–µ–ª–æ–≤–µ–∫–∞"""
        await self.start_finances(callback.message, state)
        await callback.answer()

    async def finance_cancel(self, callback: types.CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        try:
            user_id = callback.from_user.id

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            main_menu = await self._generate_main_menu(user_id)

            # –í–º–µ—Å—Ç–æ edit_text –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_reply_markup —Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=None  # –£–±–∏—Ä–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu
            )

            await callback.answer()

        except Exception as e:
            logger.error(f"Error in finance_cancel: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    def _format_finance_message(self, target_name: str, subject_name: str,
                                date: str, finance_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        replenished = finance_data.get("replenished", 0.0)
        withdrawn = finance_data.get("withdrawn", 0.0)
        tariff = finance_data.get("tariff", 0.0)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
        except:
            display_date = date

        message = (
            f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            f"üë§ –î–ª—è: {target_name}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
            f"üìÖ –î–∞—Ç–∞: {display_date}\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
        if withdrawn > 0:
            message += f"‚úÖ –ó–∞–Ω—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: -{withdrawn} —Ä—É–±.\n"
        else:
            message += "‚ùå –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
        if replenished > 0:
            message += f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: +{replenished} —Ä—É–±.\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
        message += f"üìã –¢–∞—Ä–∏—Ñ: {tariff} —Ä—É–±./–∑–∞–Ω—è—Ç–∏–µ\n\n"

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance_change = replenished - withdrawn
        if balance_change > 0:
            message += f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: +{balance_change} —Ä—É–±."
        elif balance_change < 0:
            message += f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {balance_change} —Ä—É–±."
        else:
            message += "‚ûñ –ë–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è"

        return message

    def _generate_finance_navigation_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º"""
        builder = InlineKeyboardBuilder()

        builder.button(
            text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
            callback_data="finance_back_to_dates"
        )
        builder.button(
            text="üìö –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç",
            callback_data="finance_back_to_subjects"
        )
        builder.button(
            text="üë§ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
            callback_data="finance_back_to_person"
        )
        builder.button(
            text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å",
            callback_data="finance_cancel"
        )

        builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
        return builder.as_markup()

    async def _generate_main_menu(self, user_id: int):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        from menu_handlers import generate_main_menu
        return await generate_main_menu(user_id, self.storage)