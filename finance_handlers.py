from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
from datetime import datetime
from states import FinanceStates
from calendar_utils import generate_finance_calendar
from menu_handlers import generate_main_menu

logger = logging.getLogger(__name__)

class FinanceHandlers:
    def __init__(self, storage, gsheets, subjects_config, generate_subjects_keyboard_func):
        self.storage = storage
        self.gsheets = gsheets
        self.subjects_config = subjects_config
        self.generate_subjects_keyboard_func = generate_subjects_keyboard_func

    def register_handlers(self, dp):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–§–∏–Ω–∞–Ω—Å—ã"
        dp.message.register(
            self.start_finance_flow,
            F.text == "üí∞ –§–∏–Ω–∞–Ω—Å—ã"
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        dp.callback_query.register(
            self.process_finance_subject_selection,
            F.data.startswith("subject_"),
            FinanceStates.SELECT_SUBJECT
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤
        dp.callback_query.register(
            self.process_finance_calendar_change,
            F.data.startswith("finance_change_")
        )

        dp.callback_query.register(
            self.process_finance_date_selection,
            F.data.startswith("finance_day_"),
            FinanceStates.SELECT_DATE
        )

        # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö callback'–æ–≤
        dp.callback_query.register(
            self.ignore_finance_callback,
            F.data.startswith("ignore_"),
            FinanceStates.SELECT_DATE
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        dp.callback_query.register(
            self.finance_back_to_subjects,
            F.data == "back_to_finance_subjects"
        )

        dp.callback_query.register(
            self.finance_back_to_dates,
            F.data == "back_to_finance_calendar"
        )

        dp.callback_query.register(
            self.back_to_menu_from_finance,
            F.data == "back_to_menu_from_finance"
        )

    async def start_finance_flow(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–µ–Ω–∏–∫–æ–º
        roles = self.storage.get_user_roles(user_id)
        if 'student' not in roles:
            await message.answer(
                "‚ùå –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤",
                reply_markup=await generate_main_menu(user_id, self.storage)
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É—á–µ–Ω–∏–∫–∞
        available_subjects = self.storage.get_available_subjects_for_student(user_id)
        if not available_subjects:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤",
                reply_markup=await generate_main_menu(user_id, self.storage)
            )
            return

        await state.update_data(available_subjects=available_subjects)

        await message.answer(
            "üí∞ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
            reply_markup=self.generate_subjects_keyboard_func(available_subjects=available_subjects)
        )
        await state.set_state(FinanceStates.SELECT_SUBJECT)

    async def process_finance_subject_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        subject_id = callback.data.split("_")[1]
        user_id = callback.from_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        await state.update_data(selected_subject=subject_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        available_dates = self.gsheets.get_available_finance_dates(user_id, subject_id)

        if not available_dates:
            await callback.message.edit_text(
                f"‚ùå –î–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {self.subjects_config.get(subject_id, '')} –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞",
                        callback_data="back_to_finance_subjects"
                    )
                ]])
            )
            return

        await state.update_data(available_dates=available_dates)

        await callback.message.edit_text(
            f"üìä –§–∏–Ω–∞–Ω—Å—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: {self.subjects_config.get(subject_id, '')}\n"
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤:",
            reply_markup=generate_finance_calendar()
        )
        await state.set_state(FinanceStates.SELECT_DATE)
        await callback.answer()

    async def process_finance_calendar_change(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
        try:
            date_str = callback.data.replace("finance_change_", "")
            year, month = map(int, date_str.split("-"))

            await callback.message.edit_reply_markup(
                reply_markup=generate_finance_calendar(year, month)
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"Error changing finance calendar month: {e}")
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—è—Ü", show_alert=True)

    async def process_finance_date_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
        try:
            data = callback.data
            date_str = data.replace("finance_day_", "")
            year, month, day = map(int, date_str.split("-"))
            selected_date = datetime(year, month, day).date()
            formatted_date = selected_date.strftime("%Y-%m-%d")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_data = await state.get_data()
            subject_id = state_data.get('selected_subject')
            available_dates = state_data.get('available_dates', [])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            if formatted_date not in available_dates:
                await callback.answer(
                    "‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                    show_alert=True
                )
                return

            user_id = callback.from_user.id

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            finance_data = self.gsheets.get_student_finances(
                user_id, subject_id, formatted_date
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_date = selected_date.strftime("%d.%m.%Y")
            subject_name = self.subjects_config.get(subject_id, '')

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            message_text = (
                f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
                f"üìÖ –î–∞—Ç–∞: {display_date}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
                f"üí≥ –¢–∞—Ä–∏—Ñ: {finance_data.get('tariff', 0):.2f} —Ä—É–±.\n"
                f"üíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {finance_data.get('replenished', 0):.2f} —Ä—É–±.\n"
                f"üìâ –°–ø–∏—Å–∞–Ω–∏–µ: {finance_data.get('withdrawn', 0):.2f} —Ä—É–±.\n"
            )

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance = finance_data.get('replenished', 0) - finance_data.get('withdrawn', 0)
            message_text += f"üìä –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
            if finance_data.get('withdrawn', 0) > 0:
                message_text += f"‚úÖ –ó–∞–Ω—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ\n"
            else:
                message_text += f"‚ùå –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ\n"

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = InlineKeyboardBuilder()
            keyboard.row(
                types.InlineKeyboardButton(
                    text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
                    callback_data="back_to_finance_calendar"
                ),
                types.InlineKeyboardButton(
                    text="üìö –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç",
                    callback_data="back_to_finance_subjects"
                )
            )
            keyboard.row(
                types.InlineKeyboardButton(
                    text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_menu_from_finance"
                )
            )

            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard.as_markup()
            )
            await state.set_state(FinanceStates.SHOW_FINANCES)
            await callback.answer()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã", show_alert=True)

    async def ignore_finance_callback(self, callback: types.CallbackQuery):
        """–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö callback'–æ–≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        await callback.answer()

    async def finance_back_to_subjects(self, callback: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞"""
        data = await state.get_data()
        available_subjects = data.get('available_subjects', [])

        await callback.message.edit_text(
            "üí∞ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
            reply_markup=self.generate_subjects_keyboard_func(available_subjects=available_subjects)
        )
        await state.set_state(FinanceStates.SELECT_SUBJECT)
        await callback.answer()

    async def finance_back_to_dates(self, callback: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        await callback.message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤:",
            reply_markup=generate_finance_calendar()
        )
        await state.set_state(FinanceStates.SELECT_DATE)
        await callback.answer()

    async def back_to_menu_from_finance(self, callback: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        user_id = callback.from_user.id
        menu = await generate_main_menu(user_id, self.storage)

        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=None
        )
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=menu
        )
        await state.clear()
        await callback.answer()