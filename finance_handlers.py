# finance_handlers.py
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
import logging
from datetime import datetime
from typing import List, Dict
from calendar_utils import generate_finance_calendar
from config import SUBJECTS

logger = logging.getLogger(__name__)


class FinanceStates(StatesGroup):
    SELECT_PERSON = State()
    SELECT_SUBJECT = State()
    SELECT_DATE = State()
    SHOW_FINANCES = State()
    SHOW_BALANCE = State()


class FinanceHandlers:
    def __init__(self, storage, gsheets, subjects_config, generate_subjects_keyboard_func):
        self.storage = storage
        self.gsheets = gsheets
        self.subjects_config = subjects_config
        self.generate_subjects_keyboard_func = generate_subjects_keyboard_func

    def register_handlers(self, dp):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–§–∏–Ω–∞–Ω—Å—ã" –≤ –º–µ–Ω—é
        dp.message.register(self.start_finances, F.text == "üí∞ –§–∏–Ω–∞–Ω—Å—ã")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        dp.callback_query.register(self.finance_select_person, F.data == "finance_start")
        dp.callback_query.register(self.finance_show_balance, F.data == "finance_show_balance")
        dp.callback_query.register(self.finance_back_from_balance, F.data == "finance_back_from_balance")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —á–µ–ª–æ–≤–µ–∫–∞
        dp.callback_query.register(self.finance_select_child, F.data.startswith("finance_child_"))
        dp.callback_query.register(self.finance_select_self, F.data == "finance_self")
        dp.callback_query.register(self.finance_back_to_person_selection, F.data == "finance_back_to_person")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        dp.callback_query.register(self.finance_select_subject, F.data.startswith("subject_"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤
        dp.callback_query.register(self.finance_select_date, F.data.startswith("finance_day_"))
        dp.callback_query.register(self.finance_change_month, F.data.startswith("finance_change_"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        dp.callback_query.register(self.finance_back_to_dates, F.data == "finance_back_to_dates")
        dp.callback_query.register(self.finance_back_to_subjects, F.data == "finance_back_to_subjects")
        dp.callback_query.register(self.finance_cancel, F.data == "finance_cancel")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞
        dp.callback_query.register(self.balance_show_self, F.data == "balance_self")
        dp.callback_query.register(self.balance_show_child, F.data.startswith("balance_child_"))

    async def start_finances(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ - –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è"""
        user_id = message.from_user.id
        user_roles = self.storage.get_user_roles(user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å—ã
        await state.update_data(finance_user_id=user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º
        is_student = 'student' in user_roles
        is_parent = 'parent' in user_roles

        if not (is_student or is_parent):
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
                "–§–∏–Ω–∞–Ω—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∞–º –∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º.",
                reply_markup=await self._generate_main_menu(user_id)
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        builder = InlineKeyboardBuilder()

        builder.button(
            text="üìä –î–µ—Ç–∞–ª–∏ –ø–æ –¥–∞—Ç–µ",
            callback_data="finance_start"
        )
        
        builder.button(
            text="üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", 
            callback_data="finance_show_balance"
        )
        
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="finance_cancel"
        )
        
        builder.adjust(1)

        message_text = "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        await message.answer(message_text, reply_markup=builder.as_markup())
        await state.set_state(FinanceStates.SELECT_PERSON)

    async def finance_show_balance(self, callback: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å"""
        try:
            user_id = callback.from_user.id
            user_roles = self.storage.get_user_roles(user_id)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç—è—Ö –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            children = []
            if 'parent' in user_roles:
                children_ids = self.storage.get_parent_children(user_id)
                for child_id in children_ids:
                    child_info = self.storage.get_child_info(child_id)
                    if child_info:
                        children.append({
                            'id': child_id,
                            'name': child_info.get('user_name', f'–£—á–µ–Ω–∏–∫ {child_id}')
                        })

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
            builder = InlineKeyboardBuilder()

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–µ–Ω–∏–∫ - –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–µ–±—è
            if 'student' in user_roles:
                user_name = self.storage.get_user_name(user_id)
                balance = self.storage.get_student_balance(user_id)
                builder.button(
                    text=f"üë§ {user_name}: {balance} —Ä—É–±.",
                    callback_data="balance_self"
                )

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–æ–¥–∏—Ç–µ–ª—å - –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–µ—Ç–µ–π
            if 'parent' in user_roles and children:
                for child in children:
                    balance = self.storage.get_student_balance(child['id'])
                    builder.button(
                        text=f"üë∂ {child['name']}: {balance} —Ä—É–±.",
                        callback_data=f"balance_child_{child['id']}"
                    )

            builder.button(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data="finance_back_from_balance"
            )
            builder.adjust(1)

            await callback.message.edit_text(
                "üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n\n"
                "–ë–∞–ª–∞–Ω—Å = –í—Å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - –í—Å–µ —Å–ø–∏—Å–∞–Ω–∏—è\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                reply_markup=builder.as_markup()
            )
            await state.set_state(FinanceStates.SHOW_BALANCE)

        except Exception as e:
            logger.error(f"Error in finance_show_balance: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def balance_show_self(self, callback: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–µ–±—è"""
        try:
            user_id = callback.from_user.id
            user_name = self.storage.get_user_name(user_id)
            balance = self.storage.get_student_balance(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
            finance_history = self.gsheets.get_student_finance_history(user_id)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
            total_replenished = sum(op["replenished"] for op in finance_history)
            total_withdrawn = sum(op["withdrawn"] for op in finance_history)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            history_text = ""
            if finance_history:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π
                recent_operations = finance_history[-10:]
                for op in recent_operations:
                    date_display = datetime.strptime(op["date"], "%Y-%m-%d").strftime("%d.%m.%Y")
                    replenished_text = f"+{op['replenished']} —Ä—É–±." if op["replenished"] > 0 else ""
                    withdrawn_text = f"-{op['withdrawn']} —Ä—É–±." if op["withdrawn"] > 0 else ""
                    operation_text = replenished_text or withdrawn_text
                    
                    history_text += f"üìÖ {date_display}: {operation_text}\n"
            else:
                history_text = "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
            
            message_text = (
                f"üí∞ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ\n\n"
                f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {user_name}\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n\n"
                f"–ë–∞–ª–∞–Ω—Å = –í—Å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - –í—Å–µ —Å–ø–∏—Å–∞–Ω–∏—è\n\n"
                f"–û—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–Ω—è—Ç–∏—è."
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="balance_self")
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="finance_show_balance")
            builder.adjust(2)
            
            await callback.message.edit_text(
                message_text,
                reply_markup=builder.as_markup()
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in balance_show_self: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def balance_show_child(self, callback: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞"""
        try:
            child_id = int(callback.data.replace("balance_child_", ""))
            child_info = self.storage.get_child_info(child_id)
            
            if not child_info:
                await callback.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–±–µ–Ω–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
                
            child_name = child_info.get('user_name', f'–£—á–µ–Ω–∏–∫ {child_id}')
            balance = self.storage.get_student_balance(child_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
            finance_history = self.gsheets.get_student_finance_history(child_id)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
            total_replenished = sum(op["replenished"] for op in finance_history)
            total_withdrawn = sum(op["withdrawn"] for op in finance_history)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            history_text = ""
            if finance_history:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π
                recent_operations = finance_history[-10:]
                for op in recent_operations:
                    date_display = datetime.strptime(op["date"], "%Y-%m-%d").strftime("%d.%m.%Y")
                    replenished_text = f"+{op['replenished']} —Ä—É–±." if op["replenished"] > 0 else ""
                    withdrawn_text = f"-{op['withdrawn']} —Ä—É–±." if op["withdrawn"] > 0 else ""
                    operation_text = replenished_text or withdrawn_text
                    
                    history_text += f"üìÖ {date_display}: {operation_text}\n"
            else:
                history_text = "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
            
            message_text = (
                f"üí∞ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ\n\n"
                f"üë∂ –†–µ–±–µ–Ω–æ–∫: {child_name}\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n\n"
                f"–ë–∞–ª–∞–Ω—Å = –í—Å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - –í—Å–µ —Å–ø–∏—Å–∞–Ω–∏—è\n\n"
                f"–û—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–Ω—è—Ç–∏—è."
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"balance_child_{child_id}")
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="finance_show_balance")
            builder.adjust(2)
            
            await callback.message.edit_text(
                message_text,
                reply_markup=builder.as_markup()
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in balance_show_child: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    @staticmethod
    async def finance_back_from_balance(callback: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            user_id = data.get('finance_user_id', callback.from_user.id)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
            await state.clear()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤
            builder = InlineKeyboardBuilder()

            builder.button(
                text="üìä –î–µ—Ç–∞–ª–∏ –ø–æ –¥–∞—Ç–µ",
                callback_data="finance_start"
            )
            
            builder.button(
                text="üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", 
                callback_data="finance_show_balance"
            )
            
            builder.button(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="finance_cancel"
            )
            
            builder.adjust(1)

            message_text = "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            await callback.message.edit_text(
                message_text, 
                reply_markup=builder.as_markup()
            )
            await state.set_state(FinanceStates.SELECT_PERSON)
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in finance_back_from_balance: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def finance_select_person(self, callback: types.CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ –¥–∞—Ç–µ"""
        try:
            user_id = callback.from_user.id
            user_roles = self.storage.get_user_roles(user_id)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            await state.set_state(FinanceStates.SELECT_PERSON)

            builder = InlineKeyboardBuilder()

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–µ–Ω–∏–∫ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è
            if 'student' in user_roles:
                user_name = self.storage.get_user_name(user_id)
                builder.button(
                    text=f"üë§ {user_name} (–Ø)",
                    callback_data="finance_self"
                )

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–æ–¥–∏—Ç–µ–ª—å - –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–π
            if 'parent' in user_roles:
                children_ids = self.storage.get_parent_children(user_id)
                for child_id in children_ids:
                    child_info = self.storage.get_child_info(child_id)
                    if child_info:
                        child_name = child_info.get('user_name', f'–£—á–µ–Ω–∏–∫ {child_id}')
                        builder.button(
                            text=f"üë∂ {child_name}",
                            callback_data=f"finance_child_{child_id}"
                        )

            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="finance_back_from_balance")
            builder.adjust(1)

            await callback.message.edit_text(
                "üë• –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π:",
                reply_markup=builder.as_markup()
            )

        except Exception as e:
            logger.error(f"Error in finance_select_person: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def finance_select_child(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π"""
        try:
            child_id = int(callback.data.replace("finance_child_", ""))
            child_info = self.storage.get_child_info(child_id)

            if not child_info:
                await callback.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–±–µ–Ω–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            child_name = child_info.get('user_name', f'–£—á–µ–Ω–∏–∫ {child_id}')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–µ–ª–æ–≤–µ–∫–µ
            await state.update_data(
                finance_target_id=child_id,
                finance_target_name=child_name,
                finance_target_type='child'
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
            available_subjects = self.storage.get_available_subjects_for_student(child_id)

            if not available_subjects:
                await callback.answer(
                    f"‚ùå –£ {child_name} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
                    show_alert=True
                )
                return

            await callback.message.edit_text(
                f"üë∂ –í—ã–±—Ä–∞–Ω: {child_name}\n"
                "üìö –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
                reply_markup=self.generate_subjects_keyboard_func(
                    available_subjects=available_subjects
                )
            )
            await state.set_state(FinanceStates.SELECT_SUBJECT)
            await callback.answer()

        except Exception as e:
            logger.error(f"Error in finance_select_child: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def finance_select_self(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–±—è –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π"""
        try:
            data = await state.get_data()
            user_id = data.get('finance_user_id', callback.from_user.id)

            user_name = self.storage.get_user_name(user_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–µ–ª–æ–≤–µ–∫–µ
            await state.update_data(
                finance_target_id=user_id,
                finance_target_name=user_name,
                finance_target_type='self'
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É—á–µ–Ω–∏–∫–∞
            available_subjects = self.storage.get_available_subjects_for_student(user_id)

            if not available_subjects:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤", show_alert=True)
                return

            await callback.message.edit_text(
                f"üë§ –í—ã–±—Ä–∞–Ω: {user_name}\n"
                "üìö –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
                reply_markup=self.generate_subjects_keyboard_func(
                    available_subjects=available_subjects
                )
            )
            await state.set_state(FinanceStates.SELECT_SUBJECT)
            await callback.answer()

        except Exception as e:
            logger.error(f"Error in finance_select_self: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def finance_select_subject(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        try:
            subject_id = callback.data.replace("subject_", "")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if subject_id not in self.subjects_config:
                await callback.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            subject_name = self.subjects_config[subject_id]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
            await state.update_data(
                finance_subject_id=subject_id,
                finance_subject_name=subject_name
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            target_id = data.get('finance_target_id')
            target_name = data.get('finance_target_name')

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤
            available_dates = self.gsheets.get_available_finance_dates(target_id, subject_id)

            if not available_dates:
                await callback.message.edit_text(
                    f"üí∞ –§–∏–Ω–∞–Ω—Å—ã –¥–ª—è {target_name}\n"
                    f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
                    "‚ùå –ù–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
                )
                await state.clear()
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
            await callback.message.edit_text(
                f"üí∞ –§–∏–Ω–∞–Ω—Å—ã –¥–ª—è: {target_name}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤:",
                reply_markup=generate_finance_calendar()
            )
            await state.set_state(FinanceStates.SELECT_DATE)
            await callback.answer()

        except Exception as e:
            logger.error(f"Error in finance_select_subject: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def finance_select_date(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        try:
            date_str = callback.data.replace("finance_day_", "")
            year, month, day = map(int, date_str.split("-"))
            selected_date = datetime(year, month, day).date()
            formatted_date = selected_date.strftime("%Y-%m-%d")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            await state.update_data(finance_selected_date=formatted_date)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            target_id = data.get('finance_target_id')
            target_name = data.get('finance_target_name')
            subject_id = data.get('finance_subject_id')
            subject_name = data.get('finance_subject_name')

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            finance_data = self.gsheets.get_student_finances(
                target_id, subject_id, formatted_date
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            message_text = self._format_finance_message(
                target_name, subject_name, formatted_date, finance_data
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = self._generate_finance_navigation_keyboard()

            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
            await state.set_state(FinanceStates.SHOW_FINANCES)
            await callback.answer()

        except Exception as e:
            logger.error(f"Error in finance_select_date: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def finance_change_month(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –º–µ—Å—è—Ü–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
        try:
            date_str = callback.data.replace("finance_change_", "")
            year, month = map(int, date_str.split("-"))

            await callback.message.edit_reply_markup(
                reply_markup=generate_finance_calendar(year, month)
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"Error changing finance calendar month: {e}")
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—è—Ü", show_alert=True)

    async def finance_back_to_dates(self, callback: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
        data = await state.get_data()
        target_name = data.get('finance_target_name')
        subject_name = data.get('finance_subject_name')

        await callback.message.edit_text(
            f"üí∞ –§–∏–Ω–∞–Ω—Å—ã –¥–ª—è: {target_name}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n\n"
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤:",
            reply_markup=generate_finance_calendar()
        )
        await state.set_state(FinanceStates.SELECT_DATE)
        await callback.answer()

    async def finance_back_to_subjects(self, callback: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞"""
        data = await state.get_data()
        target_name = data.get('finance_target_name')

        target_id = data.get('finance_target_id')
        available_subjects = self.storage.get_available_subjects_for_student(target_id)

        await callback.message.edit_text(
            f"üí∞ –§–∏–Ω–∞–Ω—Å—ã –¥–ª—è: {target_name}\n"
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
            reply_markup=self.generate_subjects_keyboard_func(
                available_subjects=available_subjects
            )
        )
        await state.set_state(FinanceStates.SELECT_SUBJECT)
        await callback.answer()

    async def finance_back_to_person_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —á–µ–ª–æ–≤–µ–∫–∞"""
        await self.start_finances(callback.message, state)
        await callback.answer()

    async def finance_cancel(self, callback: types.CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        try:
            user_id = callback.from_user.id

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            main_menu = await self._generate_main_menu(user_id)

            # –í–º–µ—Å—Ç–æ edit_text –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_reply_markup —Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=None  # –£–±–∏—Ä–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu
            )

            await callback.answer()

        except Exception as e:
            logger.error(f"Error in finance_cancel: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    def _format_finance_message(self, target_name: str, subject_name: str,
                                date: str, finance_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        replenished = finance_data.get("replenished", 0.0)
        withdrawn = finance_data.get("withdrawn", 0.0)
        tariff = finance_data.get("tariff", 0.0)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
        except:
            display_date = date

        message = (
            f"üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            f"üë§ –î–ª—è: {target_name}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n"
            f"üìÖ –î–∞—Ç–∞: {display_date}\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
        if withdrawn > 0:
            message += f"‚úÖ –ó–∞–Ω—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: -{withdrawn} —Ä—É–±.\n"
        else:
            message += "‚ùå –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
        if replenished > 0:
            message += f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: +{replenished} —Ä—É–±.\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
        message += f"üìã –¢–∞—Ä–∏—Ñ: {tariff} —Ä—É–±./–∑–∞–Ω—è—Ç–∏–µ\n\n"

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
        daily_change = replenished - withdrawn
        if daily_change > 0:
            message += f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å: +{daily_change} —Ä—É–±."
        elif daily_change < 0:
            message += f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å: {daily_change} —Ä—É–±."
        else:
            message += "‚ûñ –ó–∞ –¥–µ–Ω—å –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è"

        return message

    def _generate_finance_navigation_keyboard(self, show_balance_button=True):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º"""
        builder = InlineKeyboardBuilder()

        builder.button(
            text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
            callback_data="finance_back_to_dates"
        )
        builder.button(
            text="üìö –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç",
            callback_data="finance_back_to_subjects"
        )
        builder.button(
            text="üë§ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
            callback_data="finance_back_to_person"
        )
        
        if show_balance_button:
            builder.button(
                text="üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å",
                callback_data="finance_show_balance"
            )
            
        builder.button(
            text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å",
            callback_data="finance_cancel"
        )

        builder.adjust(1)
        return builder.as_markup()

    async def _generate_main_menu(self, user_id: int):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        from menu_handlers import generate_main_menu
        return await generate_main_menu(user_id, self.storage)